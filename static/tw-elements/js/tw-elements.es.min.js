/*!
* Taliwind Elements 1.0.0-beta2
* 
* Tailwind Elements is an open-source UI kit of advanced components for TailwindCSS.
* Copyright Â© 2023 MDBootstrap.com
* 
* Unless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* In addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
* 
*/
var Ll = Object.defineProperty;
var Ml = (s, t, e) => t in s ? Ll(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var Tt = (s, t, e) => (Ml(s, typeof t != "symbol" ? t + "" : t, e), e);
const Ls = (() => {
  const s = {};
  let t = 1;
  return {
    set(e, i, n) {
      typeof e[i] > "u" && (e[i] = {
        key: i,
        id: t
      }, t++), s[e[i].id] = n;
    },
    get(e, i) {
      if (!e || typeof e[i] > "u")
        return null;
      const n = e[i];
      return n.key === i ? s[n.id] : null;
    },
    delete(e, i) {
      if (typeof e[i] > "u")
        return;
      const n = e[i];
      n.key === i && (delete s[n.id], delete e[i]);
    }
  };
})(), I = {
  setData(s, t, e) {
    Ls.set(s, t, e);
  },
  getData(s, t) {
    return Ls.get(s, t);
  },
  removeData(s, t) {
    Ls.delete(s, t);
  }
}, Nl = 1e6, Rl = 1e3, yn = "transitionend", Pl = (s) => s == null ? `${s}` : {}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase(), kt = (s) => {
  do
    s += Math.floor(Math.random() * Nl);
  while (document.getElementById(s));
  return s;
}, oa = (s) => {
  let t = s.getAttribute("data-te-target");
  if (!t || t === "#") {
    let e = s.getAttribute("href");
    if (!e || !e.includes("#") && !e.startsWith("."))
      return null;
    e.includes("#") && !e.startsWith("#") && (e = `#${e.split("#")[1]}`), t = e && e !== "#" ? e.trim() : null;
  }
  return t;
}, Fn = (s) => {
  const t = oa(s);
  return t && document.querySelector(t) ? t : null;
}, Xt = (s) => {
  const t = oa(s);
  return t ? document.querySelector(t) : null;
}, Bl = (s) => {
  if (!s)
    return 0;
  let { transitionDuration: t, transitionDelay: e } = window.getComputedStyle(s);
  const i = Number.parseFloat(t), n = Number.parseFloat(e);
  return !i && !n ? 0 : (t = t.split(",")[0], e = e.split(",")[0], (Number.parseFloat(t) + Number.parseFloat(e)) * Rl);
}, ra = (s) => {
  s.dispatchEvent(new Event(yn));
}, Le = (s) => !s || typeof s != "object" ? !1 : (typeof s.jquery < "u" && (s = s[0]), typeof s.nodeType < "u"), Gt = (s) => Le(s) ? s.jquery ? s[0] : s : typeof s == "string" && s.length > 0 ? document.querySelector(s) : null, M = (s, t, e) => {
  Object.keys(e).forEach((i) => {
    const n = e[i], o = t[i], r = o && Le(o) ? "element" : Pl(o);
    if (!new RegExp(n).test(r))
      throw new Error(
        `${s.toUpperCase()}: Option "${i}" provided type "${r}" but expected type "${n}".`
      );
  });
}, xt = (s) => {
  if (!s || s.getClientRects().length === 0)
    return !1;
  if (s.style && s.parentNode && s.parentNode.style) {
    const t = getComputedStyle(s), e = getComputedStyle(s.parentNode);
    return getComputedStyle(s).getPropertyValue("visibility") === "visible" || t.display !== "none" && e.display !== "none" && t.visibility !== "hidden";
  }
  return !1;
}, de = (s) => !s || s.nodeType !== Node.ELEMENT_NODE || s.classList.contains("disabled") ? !0 : typeof s.disabled < "u" ? s.disabled : s.hasAttribute("disabled") && s.getAttribute("disabled") !== "false", aa = (s) => {
  if (!document.documentElement.attachShadow)
    return null;
  if (typeof s.getRootNode == "function") {
    const t = s.getRootNode();
    return t instanceof ShadowRoot ? t : null;
  }
  return s instanceof ShadowRoot ? s : s.parentNode ? aa(s.parentNode) : null;
}, ps = () => function() {
}, Re = (s) => {
  s.offsetHeight;
}, la = () => {
  const { jQuery: s } = window;
  return s && !document.body.hasAttribute("data-te-no-jquery") ? s : null;
}, Ms = [], ca = (s) => {
  document.readyState === "loading" ? (Ms.length || document.addEventListener("DOMContentLoaded", () => {
    Ms.forEach((t) => t());
  }), Ms.push(s)) : s();
}, F = () => document.documentElement.dir === "rtl", Hl = (s) => Array.from(s), L = (s) => document.createElement(s), ce = (s) => {
  typeof s == "function" && s();
}, da = (s, t, e = !0) => {
  if (!e) {
    ce(s);
    return;
  }
  const i = 5, n = Bl(t) + i;
  let o = !1;
  const r = ({ target: a }) => {
    a === t && (o = !0, t.removeEventListener(yn, r), ce(s));
  };
  t.addEventListener(yn, r), setTimeout(() => {
    o || ra(t);
  }, n);
}, ha = (s, t, e, i) => {
  let n = s.indexOf(t);
  if (n === -1)
    return s[!e && i ? s.length - 1 : 0];
  const o = s.length;
  return n += e ? 1 : -1, i && (n = (n + o) % o), s[Math.max(0, Math.min(n, o - 1))];
}, Vl = /[^.]*(?=\..*)\.|.*/, Wl = /\..*/, Fl = /::\d+$/, Ns = {};
let ro = 1;
const Yl = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
}, jl = /^(mouseenter|mouseleave)/i, ua = /* @__PURE__ */ new Set([
  "click",
  "dblclick",
  "mouseup",
  "mousedown",
  "contextmenu",
  "mousewheel",
  "DOMMouseScroll",
  "mouseover",
  "mouseout",
  "mousemove",
  "selectstart",
  "selectend",
  "keydown",
  "keypress",
  "keyup",
  "orientationchange",
  "touchstart",
  "touchmove",
  "touchend",
  "touchcancel",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointerleave",
  "pointercancel",
  "gesturestart",
  "gesturechange",
  "gestureend",
  "focus",
  "blur",
  "change",
  "reset",
  "select",
  "submit",
  "focusin",
  "focusout",
  "load",
  "unload",
  "beforeunload",
  "resize",
  "move",
  "DOMContentLoaded",
  "readystatechange",
  "error",
  "abort",
  "scroll"
]);
function pa(s, t) {
  return t && `${t}::${ro++}` || s.uidEvent || ro++;
}
function fa(s) {
  const t = pa(s);
  return s.uidEvent = t, Ns[t] = Ns[t] || {}, Ns[t];
}
function Kl(s, t) {
  return function e(i) {
    return i.delegateTarget = s, e.oneOff && u.off(s, i.type, t), t.apply(s, [i]);
  };
}
function Ul(s, t, e) {
  return function i(n) {
    const o = s.querySelectorAll(t);
    for (let { target: r } = n; r && r !== this; r = r.parentNode)
      for (let a = o.length; a--; "")
        if (o[a] === r)
          return n.delegateTarget = r, i.oneOff && u.off(s, n.type, e), e.apply(r, [n]);
    return null;
  };
}
function _a(s, t, e = null) {
  const i = Object.keys(s);
  for (let n = 0, o = i.length; n < o; n++) {
    const r = s[i[n]];
    if (r.originalHandler === t && r.delegationSelector === e)
      return r;
  }
  return null;
}
function ma(s, t, e) {
  const i = typeof t == "string", n = i ? e : t;
  let o = ga(s);
  return ua.has(o) || (o = s), [i, n, o];
}
function ao(s, t, e, i, n) {
  if (typeof t != "string" || !s)
    return;
  if (e || (e = i, i = null), jl.test(t)) {
    const g = (m) => function(E) {
      if (!E.relatedTarget || E.relatedTarget !== E.delegateTarget && !E.delegateTarget.contains(E.relatedTarget))
        return m.call(this, E);
    };
    i ? i = g(i) : e = g(e);
  }
  const [o, r, a] = ma(
    t,
    e,
    i
  ), l = fa(s), c = l[a] || (l[a] = {}), h = _a(
    c,
    r,
    o ? e : null
  );
  if (h) {
    h.oneOff = h.oneOff && n;
    return;
  }
  const _ = pa(
    r,
    t.replace(Vl, "")
  ), f = o ? Ul(s, e, i) : Kl(s, e);
  f.delegationSelector = o ? e : null, f.originalHandler = r, f.oneOff = n, f.uidEvent = _, c[_] = f, s.addEventListener(a, f, o);
}
function wn(s, t, e, i, n) {
  const o = _a(t[e], i, n);
  o && (s.removeEventListener(e, o, Boolean(n)), delete t[e][o.uidEvent]);
}
function zl(s, t, e, i) {
  const n = t[e] || {};
  Object.keys(n).forEach((o) => {
    if (o.includes(i)) {
      const r = n[o];
      wn(
        s,
        t,
        e,
        r.originalHandler,
        r.delegationSelector
      );
    }
  });
}
function ga(s) {
  return s = s.replace(Wl, ""), Yl[s] || s;
}
const u = {
  on(s, t, e, i) {
    ao(s, t, e, i, !1);
  },
  one(s, t, e, i) {
    ao(s, t, e, i, !0);
  },
  off(s, t, e, i) {
    if (typeof t != "string" || !s)
      return;
    const [n, o, r] = ma(
      t,
      e,
      i
    ), a = r !== t, l = fa(s), c = t.startsWith(".");
    if (typeof o < "u") {
      if (!l || !l[r])
        return;
      wn(
        s,
        l,
        r,
        o,
        n ? e : null
      );
      return;
    }
    c && Object.keys(l).forEach((_) => {
      zl(
        s,
        l,
        _,
        t.slice(1)
      );
    });
    const h = l[r] || {};
    Object.keys(h).forEach((_) => {
      const f = _.replace(Fl, "");
      if (!a || t.includes(f)) {
        const g = h[_];
        wn(
          s,
          l,
          r,
          g.originalHandler,
          g.delegationSelector
        );
      }
    });
  },
  trigger(s, t, e) {
    if (typeof t != "string" || !s)
      return null;
    const i = la(), n = ga(t), o = t !== n, r = ua.has(n);
    let a, l = !0, c = !0, h = !1, _ = null;
    return o && i && (a = i.Event(t, e), i(s).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (_ = document.createEvent("HTMLEvents"), _.initEvent(n, l, !0)) : _ = new CustomEvent(t, {
      bubbles: l,
      cancelable: !0
    }), typeof e < "u" && Object.keys(e).forEach((f) => {
      Object.defineProperty(_, f, {
        get() {
          return e[f];
        }
      });
    }), h && _.preventDefault(), c && s.dispatchEvent(_), _.defaultPrevented && typeof a < "u" && a.preventDefault(), _;
  }
}, Jt = {
  on(s, t, e, i) {
    const n = t.split(" ");
    for (let o = 0; o < n.length; o++)
      u.on(s, n[o], e, i);
  },
  off(s, t, e, i) {
    const n = t.split(" ");
    for (let o = 0; o < n.length; o++)
      u.off(s, n[o], e, i);
  }
}, Xl = "5.1.3";
class mt {
  constructor(t) {
    t = Gt(t), t && (this._element = t, I.setData(this._element, this.constructor.DATA_KEY, this));
  }
  dispose() {
    I.removeData(this._element, this.constructor.DATA_KEY), u.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t) => {
      this[t] = null;
    });
  }
  _queueCallback(t, e, i = !0) {
    da(t, e, i);
  }
  /** Static */
  static getInstance(t) {
    return I.getData(Gt(t), this.DATA_KEY);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
  static get VERSION() {
    return Xl;
  }
  static get NAME() {
    throw new Error(
      'You have to implement the static method "NAME", for each component!'
    );
  }
  static get DATA_KEY() {
    return `te.${this.NAME}`;
  }
  static get EVENT_KEY() {
    return `.${this.DATA_KEY}`;
  }
}
const Gl = "button", ql = "active";
class ba extends mt {
  // Getters
  static get NAME() {
    return Gl;
  }
  // Public
  toggle() {
    this._element.setAttribute(
      "aria-pressed",
      this._element.classList.toggle(ql)
    );
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = ba.getOrCreateInstance(this);
      t === "toggle" && e[t]();
    });
  }
}
var ot = "top", dt = "bottom", ht = "right", rt = "left", di = "auto", Pe = [ot, dt, ht, rt], ue = "start", bs = "end", va = "clippingParents", Yn = "viewport", Ce = "popper", Ea = "reference", On = /* @__PURE__ */ Pe.reduce(function(s, t) {
  return s.concat([t + "-" + ue, t + "-" + bs]);
}, []), jn = /* @__PURE__ */ [].concat(Pe, [di]).reduce(function(s, t) {
  return s.concat([t, t + "-" + ue, t + "-" + bs]);
}, []), Ta = "beforeRead", Ca = "read", Aa = "afterRead", ya = "beforeMain", wa = "main", Oa = "afterMain", ka = "beforeWrite", Sa = "write", xa = "afterWrite", fs = [Ta, Ca, Aa, ya, wa, Oa, ka, Sa, xa];
function gt(s) {
  return s ? (s.nodeName || "").toLowerCase() : null;
}
function bt(s) {
  if (s.toString() !== "[object Window]") {
    var t = s.ownerDocument;
    return t && t.defaultView || window;
  }
  return s;
}
function ni(s) {
  var t = bt(s).Element;
  return s instanceof t || s instanceof Element;
}
function _t(s) {
  var t = bt(s).HTMLElement;
  return s instanceof t || s instanceof HTMLElement;
}
function Ql(s) {
  var t = bt(s).ShadowRoot;
  return s instanceof t || s instanceof ShadowRoot;
}
function Zl(s) {
  var t = s.state;
  Object.keys(t.elements).forEach(function(e) {
    var i = t.styles[e] || {}, n = t.attributes[e] || {}, o = t.elements[e];
    !_t(o) || !gt(o) || (Object.assign(o.style, i), Object.keys(n).forEach(function(r) {
      var a = n[r];
      a === !1 ? o.removeAttribute(r) : o.setAttribute(r, a === !0 ? "" : a);
    }));
  });
}
function Jl(s) {
  var t = s.state, e = {
    popper: {
      position: t.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(t.elements.popper.style, e.popper), t.elements.arrow && Object.assign(t.elements.arrow.style, e.arrow), function() {
    Object.keys(t.elements).forEach(function(i) {
      var n = t.elements[i], o = t.attributes[i] || {}, r = Object.keys(t.styles.hasOwnProperty(i) ? t.styles[i] : e[i]), a = r.reduce(function(l, c) {
        return l[c] = "", l;
      }, {});
      !_t(n) || !gt(n) || (Object.assign(n.style, a), Object.keys(o).forEach(function(l) {
        n.removeAttribute(l);
      }));
    });
  };
}
const Kn = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: Zl,
  effect: Jl,
  requires: ["computeStyles"]
};
function pt(s) {
  return s.split("-")[0];
}
function Un(s) {
  return {
    x: s.offsetLeft,
    y: s.offsetTop,
    width: s.offsetWidth,
    height: s.offsetHeight
  };
}
function Da(s, t) {
  var e = t.getRootNode && t.getRootNode();
  if (s.contains(t))
    return !0;
  if (e && Ql(e)) {
    var i = t;
    do {
      if (i && s.isSameNode(i))
        return !0;
      i = i.parentNode || i.host;
    } while (i);
  }
  return !1;
}
function ft(s) {
  return bt(s).getComputedStyle(s);
}
function tc(s) {
  return ["table", "td", "th"].indexOf(gt(s)) >= 0;
}
function Mt(s) {
  return ((ni(s) ? s.ownerDocument : (
    // $FlowFixMe[prop-missing]
    s.document
  )) || window.document).documentElement;
}
function vs(s) {
  return gt(s) === "html" ? s : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    s.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    s.parentNode || // DOM Element detected
    // $FlowFixMe[incompatible-return]: need a better way to handle this...
    s.host || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Mt(s)
  );
}
function lo(s) {
  if (!_t(s) || // https://github.com/popperjs/popper-core/issues/837
  ft(s).position === "fixed")
    return null;
  var t = s.offsetParent;
  if (t) {
    var e = Mt(t);
    if (gt(t) === "body" && ft(t).position === "static" && ft(e).position !== "static")
      return e;
  }
  return t;
}
function ec(s) {
  for (var t = vs(s); _t(t) && ["html", "body"].indexOf(gt(t)) < 0; ) {
    var e = ft(t);
    if (e.transform !== "none" || e.perspective !== "none" || e.willChange && e.willChange !== "auto")
      return t;
    t = t.parentNode;
  }
  return null;
}
function hi(s) {
  for (var t = bt(s), e = lo(s); e && tc(e) && ft(e).position === "static"; )
    e = lo(e);
  return e && gt(e) === "body" && ft(e).position === "static" ? t : e || ec(s) || t;
}
function zn(s) {
  return ["top", "bottom"].indexOf(s) >= 0 ? "x" : "y";
}
function qi(s, t, e) {
  return Math.max(s, Math.min(t, e));
}
function Ia() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function $a(s) {
  return Object.assign(Object.assign({}, Ia()), s);
}
function La(s, t) {
  return t.reduce(function(e, i) {
    return e[i] = s, e;
  }, {});
}
function ic(s) {
  var t, e = s.state, i = s.name, n = e.elements.arrow, o = e.modifiersData.popperOffsets, r = pt(e.placement), a = zn(r), l = [rt, ht].indexOf(r) >= 0, c = l ? "height" : "width";
  if (!(!n || !o)) {
    var h = e.modifiersData[i + "#persistent"].padding, _ = Un(n), f = a === "y" ? ot : rt, g = a === "y" ? dt : ht, m = e.rects.reference[c] + e.rects.reference[a] - o[a] - e.rects.popper[c], E = o[a] - e.rects.reference[a], C = hi(n), b = C ? a === "y" ? C.clientHeight || 0 : C.clientWidth || 0 : 0, v = m / 2 - E / 2, T = h[f], A = b - _[c] - h[g], w = b / 2 - _[c] / 2 + v, y = qi(T, w, A), O = a;
    e.modifiersData[i] = (t = {}, t[O] = y, t.centerOffset = y - w, t);
  }
}
function sc(s) {
  var t = s.state, e = s.options, i = s.name, n = e.element, o = n === void 0 ? "[data-popper-arrow]" : n, r = e.padding, a = r === void 0 ? 0 : r;
  if (o != null && !(typeof o == "string" && (o = t.elements.popper.querySelector(o), !o))) {
    if ({}.NODE_ENV !== "production" && (_t(o) || console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "))), !Da(t.elements.popper, o)) {
      ({}).NODE_ENV !== "production" && console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      return;
    }
    t.elements.arrow = o, t.modifiersData[i + "#persistent"] = {
      padding: $a(typeof a != "number" ? a : La(a, Pe))
    };
  }
}
const Ma = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: ic,
  effect: sc,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
var nc = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function oc(s) {
  var t = s.x, e = s.y, i = window, n = i.devicePixelRatio || 1;
  return {
    x: Math.round(t * n) / n || 0,
    y: Math.round(e * n) / n || 0
  };
}
function co(s) {
  var t, e = s.popper, i = s.popperRect, n = s.placement, o = s.offsets, r = s.position, a = s.gpuAcceleration, l = s.adaptive, c = s.roundOffsets, h = c ? oc(o) : o, _ = h.x, f = _ === void 0 ? 0 : _, g = h.y, m = g === void 0 ? 0 : g, E = o.hasOwnProperty("x"), C = o.hasOwnProperty("y"), b = rt, v = ot, T = window;
  if (l) {
    var A = hi(e);
    A === bt(e) && (A = Mt(e)), n === ot && (v = dt, m -= A.clientHeight - i.height, m *= a ? 1 : -1), n === rt && (b = ht, f -= A.clientWidth - i.width, f *= a ? 1 : -1);
  }
  var w = Object.assign({
    position: r
  }, l && nc);
  if (a) {
    var y;
    return Object.assign(Object.assign({}, w), {}, (y = {}, y[v] = C ? "0" : "", y[b] = E ? "0" : "", y.transform = (T.devicePixelRatio || 1) < 2 ? "translate(" + f + "px, " + m + "px)" : "translate3d(" + f + "px, " + m + "px, 0)", y));
  }
  return Object.assign(Object.assign({}, w), {}, (t = {}, t[v] = C ? m + "px" : "", t[b] = E ? f + "px" : "", t.transform = "", t));
}
function rc(s) {
  var t = s.state, e = s.options, i = e.gpuAcceleration, n = i === void 0 ? !0 : i, o = e.adaptive, r = o === void 0 ? !0 : o, a = e.roundOffsets, l = a === void 0 ? !0 : a;
  if ({}.NODE_ENV !== "production") {
    var c = ft(t.elements.popper).transitionProperty || "";
    r && ["transform", "top", "right", "bottom", "left"].some(function(_) {
      return c.indexOf(_) >= 0;
    }) && console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', `

`, 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", `

`, "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
  }
  var h = {
    placement: pt(t.placement),
    popper: t.elements.popper,
    popperRect: t.rects.popper,
    gpuAcceleration: n
  };
  t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign(Object.assign({}, t.styles.popper), co(Object.assign(Object.assign({}, h), {}, {
    offsets: t.modifiersData.popperOffsets,
    position: t.options.strategy,
    adaptive: r,
    roundOffsets: l
  })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign(Object.assign({}, t.styles.arrow), co(Object.assign(Object.assign({}, h), {}, {
    offsets: t.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: l
  })))), t.attributes.popper = Object.assign(Object.assign({}, t.attributes.popper), {}, {
    "data-popper-placement": t.placement
  });
}
const Xn = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: rc,
  data: {}
};
var Ai = {
  passive: !0
};
function ac(s) {
  var t = s.state, e = s.instance, i = s.options, n = i.scroll, o = n === void 0 ? !0 : n, r = i.resize, a = r === void 0 ? !0 : r, l = bt(t.elements.popper), c = [].concat(t.scrollParents.reference, t.scrollParents.popper);
  return o && c.forEach(function(h) {
    h.addEventListener("scroll", e.update, Ai);
  }), a && l.addEventListener("resize", e.update, Ai), function() {
    o && c.forEach(function(h) {
      h.removeEventListener("scroll", e.update, Ai);
    }), a && l.removeEventListener("resize", e.update, Ai);
  };
}
const Gn = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: ac,
  data: {}
};
var lc = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Qi(s) {
  return s.replace(/left|right|bottom|top/g, function(t) {
    return lc[t];
  });
}
var cc = {
  start: "end",
  end: "start"
};
function ho(s) {
  return s.replace(/start|end/g, function(t) {
    return cc[t];
  });
}
function oi(s) {
  var t = s.getBoundingClientRect();
  return {
    width: t.width,
    height: t.height,
    top: t.top,
    right: t.right,
    bottom: t.bottom,
    left: t.left,
    x: t.left,
    y: t.top
  };
}
function qn(s) {
  var t = bt(s), e = t.pageXOffset, i = t.pageYOffset;
  return {
    scrollLeft: e,
    scrollTop: i
  };
}
function Qn(s) {
  return oi(Mt(s)).left + qn(s).scrollLeft;
}
function dc(s) {
  var t = bt(s), e = Mt(s), i = t.visualViewport, n = e.clientWidth, o = e.clientHeight, r = 0, a = 0;
  return i && (n = i.width, o = i.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = i.offsetLeft, a = i.offsetTop)), {
    width: n,
    height: o,
    x: r + Qn(s),
    y: a
  };
}
function hc(s) {
  var t = Mt(s), e = qn(s), i = s.ownerDocument.body, n = Math.max(t.scrollWidth, t.clientWidth, i ? i.scrollWidth : 0, i ? i.clientWidth : 0), o = Math.max(t.scrollHeight, t.clientHeight, i ? i.scrollHeight : 0, i ? i.clientHeight : 0), r = -e.scrollLeft + Qn(s), a = -e.scrollTop;
  return ft(i || t).direction === "rtl" && (r += Math.max(t.clientWidth, i ? i.clientWidth : 0) - n), {
    width: n,
    height: o,
    x: r,
    y: a
  };
}
function Zn(s) {
  var t = ft(s), e = t.overflow, i = t.overflowX, n = t.overflowY;
  return /auto|scroll|overlay|hidden/.test(e + n + i);
}
function Na(s) {
  return ["html", "body", "#document"].indexOf(gt(s)) >= 0 ? s.ownerDocument.body : _t(s) && Zn(s) ? s : Na(vs(s));
}
function ti(s, t) {
  t === void 0 && (t = []);
  var e = Na(s), i = gt(e) === "body", n = bt(e), o = i ? [n].concat(n.visualViewport || [], Zn(e) ? e : []) : e, r = t.concat(o);
  return i ? r : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    r.concat(ti(vs(o)))
  );
}
function kn(s) {
  return Object.assign(Object.assign({}, s), {}, {
    left: s.x,
    top: s.y,
    right: s.x + s.width,
    bottom: s.y + s.height
  });
}
function uc(s) {
  var t = oi(s);
  return t.top = t.top + s.clientTop, t.left = t.left + s.clientLeft, t.bottom = t.top + s.clientHeight, t.right = t.left + s.clientWidth, t.width = s.clientWidth, t.height = s.clientHeight, t.x = t.left, t.y = t.top, t;
}
function uo(s, t) {
  return t === Yn ? kn(dc(s)) : _t(t) ? uc(t) : kn(hc(Mt(s)));
}
function pc(s) {
  var t = ti(vs(s)), e = ["absolute", "fixed"].indexOf(ft(s).position) >= 0, i = e && _t(s) ? hi(s) : s;
  return ni(i) ? t.filter(function(n) {
    return ni(n) && Da(n, i) && gt(n) !== "body";
  }) : [];
}
function fc(s, t, e) {
  var i = t === "clippingParents" ? pc(s) : [].concat(t), n = [].concat(i, [e]), o = n[0], r = n.reduce(function(a, l) {
    var c = uo(s, l);
    return a.top = Math.max(c.top, a.top), a.right = Math.min(c.right, a.right), a.bottom = Math.min(c.bottom, a.bottom), a.left = Math.max(c.left, a.left), a;
  }, uo(s, o));
  return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;
}
function ri(s) {
  return s.split("-")[1];
}
function Ra(s) {
  var t = s.reference, e = s.element, i = s.placement, n = i ? pt(i) : null, o = i ? ri(i) : null, r = t.x + t.width / 2 - e.width / 2, a = t.y + t.height / 2 - e.height / 2, l;
  switch (n) {
    case ot:
      l = {
        x: r,
        y: t.y - e.height
      };
      break;
    case dt:
      l = {
        x: r,
        y: t.y + t.height
      };
      break;
    case ht:
      l = {
        x: t.x + t.width,
        y: a
      };
      break;
    case rt:
      l = {
        x: t.x - e.width,
        y: a
      };
      break;
    default:
      l = {
        x: t.x,
        y: t.y
      };
  }
  var c = n ? zn(n) : null;
  if (c != null) {
    var h = c === "y" ? "height" : "width";
    switch (o) {
      case ue:
        l[c] = l[c] - (t[h] / 2 - e[h] / 2);
        break;
      case bs:
        l[c] = l[c] + (t[h] / 2 - e[h] / 2);
        break;
    }
  }
  return l;
}
function Me(s, t) {
  t === void 0 && (t = {});
  var e = t, i = e.placement, n = i === void 0 ? s.placement : i, o = e.boundary, r = o === void 0 ? va : o, a = e.rootBoundary, l = a === void 0 ? Yn : a, c = e.elementContext, h = c === void 0 ? Ce : c, _ = e.altBoundary, f = _ === void 0 ? !1 : _, g = e.padding, m = g === void 0 ? 0 : g, E = $a(typeof m != "number" ? m : La(m, Pe)), C = h === Ce ? Ea : Ce, b = s.elements.reference, v = s.rects.popper, T = s.elements[f ? C : h], A = fc(ni(T) ? T : T.contextElement || Mt(s.elements.popper), r, l), w = oi(b), y = Ra({
    reference: w,
    element: v,
    strategy: "absolute",
    placement: n
  }), O = kn(Object.assign(Object.assign({}, v), y)), x = h === Ce ? O : w, k = {
    top: A.top - x.top + E.top,
    bottom: x.bottom - A.bottom + E.bottom,
    left: A.left - x.left + E.left,
    right: x.right - A.right + E.right
  }, D = s.modifiersData.offset;
  if (h === Ce && D) {
    var S = D[n];
    Object.keys(k).forEach(function(P) {
      var B = [ht, dt].indexOf(P) >= 0 ? 1 : -1, Q = [ot, dt].indexOf(P) >= 0 ? "y" : "x";
      k[P] += S[Q] * B;
    });
  }
  return k;
}
function _c(s, t) {
  t === void 0 && (t = {});
  var e = t, i = e.placement, n = e.boundary, o = e.rootBoundary, r = e.padding, a = e.flipVariations, l = e.allowedAutoPlacements, c = l === void 0 ? jn : l, h = ri(i), _ = h ? a ? On : On.filter(function(m) {
    return ri(m) === h;
  }) : Pe, f = _.filter(function(m) {
    return c.indexOf(m) >= 0;
  });
  f.length === 0 && (f = _, {}.NODE_ENV !== "production" && console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" ")));
  var g = f.reduce(function(m, E) {
    return m[E] = Me(s, {
      placement: E,
      boundary: n,
      rootBoundary: o,
      padding: r
    })[pt(E)], m;
  }, {});
  return Object.keys(g).sort(function(m, E) {
    return g[m] - g[E];
  });
}
function mc(s) {
  if (pt(s) === di)
    return [];
  var t = Qi(s);
  return [ho(s), t, ho(t)];
}
function gc(s) {
  var t = s.state, e = s.options, i = s.name;
  if (!t.modifiersData[i]._skip) {
    for (var n = e.mainAxis, o = n === void 0 ? !0 : n, r = e.altAxis, a = r === void 0 ? !0 : r, l = e.fallbackPlacements, c = e.padding, h = e.boundary, _ = e.rootBoundary, f = e.altBoundary, g = e.flipVariations, m = g === void 0 ? !0 : g, E = e.allowedAutoPlacements, C = t.options.placement, b = pt(C), v = b === C, T = l || (v || !m ? [Qi(C)] : mc(C)), A = [C].concat(T).reduce(function(Zt, Et) {
      return Zt.concat(pt(Et) === di ? _c(t, {
        placement: Et,
        boundary: h,
        rootBoundary: _,
        padding: c,
        flipVariations: m,
        allowedAutoPlacements: E
      }) : Et);
    }, []), w = t.rects.reference, y = t.rects.popper, O = /* @__PURE__ */ new Map(), x = !0, k = A[0], D = 0; D < A.length; D++) {
      var S = A[D], P = pt(S), B = ri(S) === ue, Q = [ot, dt].indexOf(P) >= 0, lt = Q ? "width" : "height", Nt = Me(t, {
        placement: S,
        boundary: h,
        rootBoundary: _,
        altBoundary: f,
        padding: c
      }), Qt = Q ? B ? ht : rt : B ? dt : ot;
      w[lt] > y[lt] && (Qt = Qi(Qt));
      var xs = Qi(Qt), fe = [];
      if (o && fe.push(Nt[P] <= 0), a && fe.push(Nt[Qt] <= 0, Nt[xs] <= 0), fe.every(function(Zt) {
        return Zt;
      })) {
        k = S, x = !1;
        break;
      }
      O.set(S, fe);
    }
    if (x)
      for (var vi = m ? 3 : 1, Ds = function(Et) {
        var Ti = A.find(function(Is) {
          var me = O.get(Is);
          if (me)
            return me.slice(0, Et).every(function($s) {
              return $s;
            });
        });
        if (Ti)
          return k = Ti, "break";
      }, _e = vi; _e > 0; _e--) {
        var Ei = Ds(_e);
        if (Ei === "break")
          break;
      }
    t.placement !== k && (t.modifiersData[i]._skip = !0, t.placement = k, t.reset = !0);
  }
}
const Pa = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: gc,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function po(s, t, e) {
  return e === void 0 && (e = {
    x: 0,
    y: 0
  }), {
    top: s.top - t.height - e.y,
    right: s.right - t.width + e.x,
    bottom: s.bottom - t.height + e.y,
    left: s.left - t.width - e.x
  };
}
function fo(s) {
  return [ot, ht, dt, rt].some(function(t) {
    return s[t] >= 0;
  });
}
function bc(s) {
  var t = s.state, e = s.name, i = t.rects.reference, n = t.rects.popper, o = t.modifiersData.preventOverflow, r = Me(t, {
    elementContext: "reference"
  }), a = Me(t, {
    altBoundary: !0
  }), l = po(r, i), c = po(a, n, o), h = fo(l), _ = fo(c);
  t.modifiersData[e] = {
    referenceClippingOffsets: l,
    popperEscapeOffsets: c,
    isReferenceHidden: h,
    hasPopperEscaped: _
  }, t.attributes.popper = Object.assign(Object.assign({}, t.attributes.popper), {}, {
    "data-popper-reference-hidden": h,
    "data-popper-escaped": _
  });
}
const Ba = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: bc
};
function vc(s, t, e) {
  var i = pt(s), n = [rt, ot].indexOf(i) >= 0 ? -1 : 1, o = typeof e == "function" ? e(Object.assign(Object.assign({}, t), {}, {
    placement: s
  })) : e, r = o[0], a = o[1];
  return r = r || 0, a = (a || 0) * n, [rt, ht].indexOf(i) >= 0 ? {
    x: a,
    y: r
  } : {
    x: r,
    y: a
  };
}
function Ec(s) {
  var t = s.state, e = s.options, i = s.name, n = e.offset, o = n === void 0 ? [0, 0] : n, r = jn.reduce(function(h, _) {
    return h[_] = vc(_, t.rects, o), h;
  }, {}), a = r[t.placement], l = a.x, c = a.y;
  t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += l, t.modifiersData.popperOffsets.y += c), t.modifiersData[i] = r;
}
const Ha = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: Ec
};
function Tc(s) {
  var t = s.state, e = s.name;
  t.modifiersData[e] = Ra({
    reference: t.rects.reference,
    element: t.rects.popper,
    strategy: "absolute",
    placement: t.placement
  });
}
const Jn = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: Tc,
  data: {}
};
function Cc(s) {
  return s === "x" ? "y" : "x";
}
function Ac(s) {
  var t = s.state, e = s.options, i = s.name, n = e.mainAxis, o = n === void 0 ? !0 : n, r = e.altAxis, a = r === void 0 ? !1 : r, l = e.boundary, c = e.rootBoundary, h = e.altBoundary, _ = e.padding, f = e.tether, g = f === void 0 ? !0 : f, m = e.tetherOffset, E = m === void 0 ? 0 : m, C = Me(t, {
    boundary: l,
    rootBoundary: c,
    padding: _,
    altBoundary: h
  }), b = pt(t.placement), v = ri(t.placement), T = !v, A = zn(b), w = Cc(A), y = t.modifiersData.popperOffsets, O = t.rects.reference, x = t.rects.popper, k = typeof E == "function" ? E(Object.assign(Object.assign({}, t.rects), {}, {
    placement: t.placement
  })) : E, D = {
    x: 0,
    y: 0
  };
  if (y) {
    if (o) {
      var S = A === "y" ? ot : rt, P = A === "y" ? dt : ht, B = A === "y" ? "height" : "width", Q = y[A], lt = y[A] + C[S], Nt = y[A] - C[P], Qt = g ? -x[B] / 2 : 0, xs = v === ue ? O[B] : x[B], fe = v === ue ? -x[B] : -O[B], vi = t.elements.arrow, Ds = g && vi ? Un(vi) : {
        width: 0,
        height: 0
      }, _e = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : Ia(), Ei = _e[S], Zt = _e[P], Et = qi(0, O[B], Ds[B]), Ti = T ? O[B] / 2 - Qt - Et - Ei - k : xs - Et - Ei - k, Is = T ? -O[B] / 2 + Qt + Et + Zt + k : fe + Et + Zt + k, me = t.elements.arrow && hi(t.elements.arrow), $s = me ? A === "y" ? me.clientTop || 0 : me.clientLeft || 0 : 0, so = t.modifiersData.offset ? t.modifiersData.offset[t.placement][A] : 0, kl = y[A] + Ti - so - $s, Sl = y[A] + Is - so, no = qi(g ? Math.min(lt, kl) : lt, Q, g ? Math.max(Nt, Sl) : Nt);
      y[A] = no, D[A] = no - Q;
    }
    if (a) {
      var xl = A === "x" ? ot : rt, Dl = A === "x" ? dt : ht, Ci = y[w], Il = Ci + C[xl], $l = Ci - C[Dl], oo = qi(Il, Ci, $l);
      y[w] = oo, D[w] = oo - Ci;
    }
    t.modifiersData[i] = D;
  }
}
const Va = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: Ac,
  requiresIfExists: ["offset"]
};
function yc(s) {
  return {
    scrollLeft: s.scrollLeft,
    scrollTop: s.scrollTop
  };
}
function wc(s) {
  return s === bt(s) || !_t(s) ? qn(s) : yc(s);
}
function Oc(s, t, e) {
  e === void 0 && (e = !1);
  var i = Mt(t), n = oi(s), o = _t(t), r = {
    scrollLeft: 0,
    scrollTop: 0
  }, a = {
    x: 0,
    y: 0
  };
  return (o || !o && !e) && ((gt(t) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  Zn(i)) && (r = wc(t)), _t(t) ? (a = oi(t), a.x += t.clientLeft, a.y += t.clientTop) : i && (a.x = Qn(i))), {
    x: n.left + r.scrollLeft - a.x,
    y: n.top + r.scrollTop - a.y,
    width: n.width,
    height: n.height
  };
}
function kc(s) {
  var t = /* @__PURE__ */ new Map(), e = /* @__PURE__ */ new Set(), i = [];
  s.forEach(function(o) {
    t.set(o.name, o);
  });
  function n(o) {
    e.add(o.name);
    var r = [].concat(o.requires || [], o.requiresIfExists || []);
    r.forEach(function(a) {
      if (!e.has(a)) {
        var l = t.get(a);
        l && n(l);
      }
    }), i.push(o);
  }
  return s.forEach(function(o) {
    e.has(o.name) || n(o);
  }), i;
}
function Sc(s) {
  var t = kc(s);
  return fs.reduce(function(e, i) {
    return e.concat(t.filter(function(n) {
      return n.phase === i;
    }));
  }, []);
}
function xc(s) {
  var t;
  return function() {
    return t || (t = new Promise(function(e) {
      Promise.resolve().then(function() {
        t = void 0, e(s());
      });
    })), t;
  };
}
function Rt(s) {
  for (var t = arguments.length, e = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
    e[i - 1] = arguments[i];
  return [].concat(e).reduce(function(n, o) {
    return n.replace(/%s/, o);
  }, s);
}
var te = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s', Dc = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available', Ic = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function $c(s) {
  s.forEach(function(t) {
    Object.keys(t).forEach(function(e) {
      switch (e) {
        case "name":
          typeof t.name != "string" && console.error(Rt(te, String(t.name), '"name"', '"string"', '"' + String(t.name) + '"'));
          break;
        case "enabled":
          typeof t.enabled != "boolean" && console.error(Rt(te, t.name, '"enabled"', '"boolean"', '"' + String(t.enabled) + '"'));
        case "phase":
          fs.indexOf(t.phase) < 0 && console.error(Rt(te, t.name, '"phase"', "either " + fs.join(", "), '"' + String(t.phase) + '"'));
          break;
        case "fn":
          typeof t.fn != "function" && console.error(Rt(te, t.name, '"fn"', '"function"', '"' + String(t.fn) + '"'));
          break;
        case "effect":
          typeof t.effect != "function" && console.error(Rt(te, t.name, '"effect"', '"function"', '"' + String(t.fn) + '"'));
          break;
        case "requires":
          Array.isArray(t.requires) || console.error(Rt(te, t.name, '"requires"', '"array"', '"' + String(t.requires) + '"'));
          break;
        case "requiresIfExists":
          Array.isArray(t.requiresIfExists) || console.error(Rt(te, t.name, '"requiresIfExists"', '"array"', '"' + String(t.requiresIfExists) + '"'));
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + t.name + '" modifier, valid properties are ' + Ic.map(function(i) {
            return '"' + i + '"';
          }).join(", ") + '; but "' + e + '" was provided.');
      }
      t.requires && t.requires.forEach(function(i) {
        s.find(function(n) {
          return n.name === i;
        }) == null && console.error(Rt(Dc, String(t.name), i, i));
      });
    });
  });
}
function Lc(s, t) {
  var e = /* @__PURE__ */ new Set();
  return s.filter(function(i) {
    var n = t(i);
    if (!e.has(n))
      return e.add(n), !0;
  });
}
function Mc(s) {
  var t = s.reduce(function(e, i) {
    var n = e[i.name];
    return e[i.name] = n ? Object.assign(Object.assign(Object.assign({}, n), i), {}, {
      options: Object.assign(Object.assign({}, n.options), i.options),
      data: Object.assign(Object.assign({}, n.data), i.data)
    }) : i, e;
  }, {});
  return Object.keys(t).map(function(e) {
    return t[e];
  });
}
var _o = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.", Nc = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.", mo = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function go() {
  for (var s = arguments.length, t = new Array(s), e = 0; e < s; e++)
    t[e] = arguments[e];
  return !t.some(function(i) {
    return !(i && typeof i.getBoundingClientRect == "function");
  });
}
function Es(s) {
  s === void 0 && (s = {});
  var t = s, e = t.defaultModifiers, i = e === void 0 ? [] : e, n = t.defaultOptions, o = n === void 0 ? mo : n;
  return function(a, l, c) {
    c === void 0 && (c = o);
    var h = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, mo), o),
      modifiersData: {},
      elements: {
        reference: a,
        popper: l
      },
      attributes: {},
      styles: {}
    }, _ = [], f = !1, g = {
      state: h,
      setOptions: function(b) {
        E(), h.options = Object.assign(Object.assign(Object.assign({}, o), h.options), b), h.scrollParents = {
          reference: ni(a) ? ti(a) : a.contextElement ? ti(a.contextElement) : [],
          popper: ti(l)
        };
        var v = Sc(Mc([].concat(i, h.options.modifiers)));
        if (h.orderedModifiers = v.filter(function(D) {
          return D.enabled;
        }), {}.NODE_ENV !== "production") {
          var T = Lc([].concat(v, h.options.modifiers), function(D) {
            var S = D.name;
            return S;
          });
          if ($c(T), pt(h.options.placement) === di) {
            var A = h.orderedModifiers.find(function(D) {
              var S = D.name;
              return S === "flip";
            });
            A || console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
          }
          var w = ft(l), y = w.marginTop, O = w.marginRight, x = w.marginBottom, k = w.marginLeft;
          [y, O, x, k].some(function(D) {
            return parseFloat(D);
          }) && console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
        }
        return m(), g.update();
      },
      // Sync update â it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!f) {
          var b = h.elements, v = b.reference, T = b.popper;
          if (!go(v, T)) {
            ({}).NODE_ENV !== "production" && console.error(_o);
            return;
          }
          h.rects = {
            reference: Oc(v, hi(T), h.options.strategy === "fixed"),
            popper: Un(T)
          }, h.reset = !1, h.placement = h.options.placement, h.orderedModifiers.forEach(function(S) {
            return h.modifiersData[S.name] = Object.assign({}, S.data);
          });
          for (var A = 0, w = 0; w < h.orderedModifiers.length; w++) {
            if ({}.NODE_ENV !== "production" && (A += 1, A > 100)) {
              console.error(Nc);
              break;
            }
            if (h.reset === !0) {
              h.reset = !1, w = -1;
              continue;
            }
            var y = h.orderedModifiers[w], O = y.fn, x = y.options, k = x === void 0 ? {} : x, D = y.name;
            typeof O == "function" && (h = O({
              state: h,
              options: k,
              name: D,
              instance: g
            }) || h);
          }
        }
      },
      // Async and optimistically optimized update â it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: xc(function() {
        return new Promise(function(C) {
          g.forceUpdate(), C(h);
        });
      }),
      destroy: function() {
        E(), f = !0;
      }
    };
    if (!go(a, l))
      return {}.NODE_ENV !== "production" && console.error(_o), g;
    g.setOptions(c).then(function(C) {
      !f && c.onFirstUpdate && c.onFirstUpdate(C);
    });
    function m() {
      h.orderedModifiers.forEach(function(C) {
        var b = C.name, v = C.options, T = v === void 0 ? {} : v, A = C.effect;
        if (typeof A == "function") {
          var w = A({
            state: h,
            name: b,
            instance: g,
            options: T
          }), y = function() {
          };
          _.push(w || y);
        }
      });
    }
    function E() {
      _.forEach(function(C) {
        return C();
      }), _ = [];
    }
    return g;
  };
}
var Rc = /* @__PURE__ */ Es(), Pc = [Gn, Jn, Xn, Kn], Bc = /* @__PURE__ */ Es({
  defaultModifiers: Pc
}), Hc = [Gn, Jn, Xn, Kn, Ha, Pa, Va, Ma, Ba], Be = /* @__PURE__ */ Es({
  defaultModifiers: Hc
});
const Wa = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  afterMain: Oa,
  afterRead: Aa,
  afterWrite: xa,
  applyStyles: Kn,
  arrow: Ma,
  auto: di,
  basePlacements: Pe,
  beforeMain: ya,
  beforeRead: Ta,
  beforeWrite: ka,
  bottom: dt,
  clippingParents: va,
  computeStyles: Xn,
  createPopper: Be,
  createPopperBase: Rc,
  createPopperLite: Bc,
  detectOverflow: Me,
  end: bs,
  eventListeners: Gn,
  flip: Pa,
  hide: Ba,
  left: rt,
  main: wa,
  modifierPhases: fs,
  offset: Ha,
  placements: jn,
  popper: Ce,
  popperGenerator: Es,
  popperOffsets: Jn,
  preventOverflow: Va,
  read: Ca,
  reference: Ea,
  right: ht,
  start: ue,
  top: ot,
  variationPlacements: On,
  viewport: Yn,
  write: Sa
}, Symbol.toStringTag, { value: "Module" }));
function Rs(s) {
  return s === "true" ? !0 : s === "false" ? !1 : s === Number(s).toString() ? Number(s) : s === "" || s === "null" ? null : s;
}
function Ps(s) {
  return s.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`);
}
const p = {
  setDataAttribute(s, t, e) {
    s.setAttribute(`data-te-${Ps(t)}`, e);
  },
  removeDataAttribute(s, t) {
    s.removeAttribute(`data-te-${Ps(t)}`);
  },
  getDataAttributes(s) {
    if (!s)
      return {};
    const t = {};
    return Object.keys(s.dataset).filter((e) => e.startsWith("te")).forEach((e) => {
      if (e.startsWith("teClass"))
        return;
      let i = e.replace(/^te/, "");
      i = i.charAt(0).toLowerCase() + i.slice(1, i.length), t[i] = Rs(s.dataset[e]);
    }), t;
  },
  getDataClassAttributes(s) {
    if (!s)
      return {};
    const t = {
      ...s.dataset
    };
    return Object.keys(t).filter((e) => e.startsWith("teClass")).forEach((e) => {
      let i = e.replace(/^teClass/, "");
      i = i.charAt(0).toLowerCase() + i.slice(1, i.length), t[i] = Rs(t[e]);
    }), t;
  },
  getDataAttribute(s, t) {
    return Rs(
      s.getAttribute(`data-te-${Ps(t)}`)
    );
  },
  offset(s) {
    const t = s.getBoundingClientRect();
    return {
      top: t.top + document.body.scrollTop,
      left: t.left + document.body.scrollLeft
    };
  },
  position(s) {
    return {
      top: s.offsetTop,
      left: s.offsetLeft
    };
  },
  style(s, t) {
    Object.assign(s.style, t);
  },
  toggleClass(s, t) {
    s && Bs(t).forEach((e) => {
      s.classList.contains(e) ? s.classList.remove(e) : s.classList.add(e);
    });
  },
  addClass(s, t) {
    Bs(t).forEach(
      (e) => !s.classList.contains(e) && s.classList.add(e)
    );
  },
  addStyle(s, t) {
    Object.keys(t).forEach((e) => {
      s.style[e] = t[e];
    });
  },
  removeClass(s, t) {
    Bs(t).forEach(
      (e) => s.classList.contains(e) && s.classList.remove(e)
    );
  },
  hasClass(s, t) {
    return s.classList.contains(t);
  }
};
function Bs(s) {
  return typeof s == "string" ? s.split(" ") : Array.isArray(s) ? s : !1;
}
const Vc = 3, d = {
  closest(s, t) {
    return s.closest(t);
  },
  matches(s, t) {
    return s.matches(t);
  },
  find(s, t = document.documentElement) {
    return [].concat(
      ...Element.prototype.querySelectorAll.call(t, s)
    );
  },
  findOne(s, t = document.documentElement) {
    return Element.prototype.querySelector.call(t, s);
  },
  children(s, t) {
    return [].concat(...s.children).filter((i) => i.matches(t));
  },
  parents(s, t) {
    const e = [];
    let i = s.parentNode;
    for (; i && i.nodeType === Node.ELEMENT_NODE && i.nodeType !== Vc; )
      this.matches(i, t) && e.push(i), i = i.parentNode;
    return e;
  },
  prev(s, t) {
    let e = s.previousElementSibling;
    for (; e; ) {
      if (e.matches(t))
        return [e];
      e = e.previousElementSibling;
    }
    return [];
  },
  next(s, t) {
    let e = s.nextElementSibling;
    for (; e; ) {
      if (this.matches(e, t))
        return [e];
      e = e.nextElementSibling;
    }
    return [];
  },
  focusableChildren(s) {
    const t = [
      "a",
      "button",
      "input",
      "textarea",
      "select",
      "details",
      "[tabindex]",
      '[contenteditable="true"]'
    ].map((e) => `${e}:not([tabindex^="-"])`).join(", ");
    return this.find(t, s).filter(
      (e) => !de(e) && xt(e)
    );
  }
}, Hs = "dropdown", Wc = "te.dropdown", pe = `.${Wc}`, to = ".data-api", Zi = "Escape", bo = "Space", vo = "Tab", Sn = "ArrowUp", Ji = "ArrowDown", Fc = 2, Yc = new RegExp(
  `${Sn}|${Ji}|${Zi}`
), jc = `hide${pe}`, Kc = `hidden${pe}`, Uc = `show${pe}`, zc = `shown${pe}`, Xc = `click${pe}${to}`, Eo = `keydown${pe}${to}`, Gc = `keyup${pe}${to}`, Pt = "show", qc = "dropup", Qc = "dropend", Zc = "dropstart", Jc = "[data-te-navbar-ref]", yi = "[data-te-dropdown-toggle-ref]", Vs = "[data-te-dropdown-menu-ref]", td = "[data-te-navbar-nav-ref]", ed = "[data-te-dropdown-menu-ref] [data-te-dropdown-item-ref]:not(.disabled):not(:disabled)", id = F() ? "top-end" : "top-start", sd = F() ? "top-start" : "top-end", nd = F() ? "bottom-end" : "bottom-start", od = F() ? "bottom-start" : "bottom-end", rd = F() ? "left-start" : "right-start", ad = F() ? "right-start" : "left-start", ld = [{ opacity: "0" }, { opacity: "1" }], cd = [{ opacity: "1" }, { opacity: "0" }], wi = {
  duration: 550,
  iterations: 1,
  easing: "ease",
  fill: "both"
}, dd = {
  offset: [0, 2],
  boundary: "clippingParents",
  reference: "toggle",
  display: "dynamic",
  popperConfig: null,
  autoClose: !0,
  dropdownAnimation: "on"
}, hd = {
  offset: "(array|string|function)",
  boundary: "(string|element)",
  reference: "(string|element|object)",
  display: "string",
  popperConfig: "(null|object|function)",
  autoClose: "(boolean|string)",
  dropdownAnimation: "string"
};
class wt extends mt {
  constructor(t, e) {
    super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._fadeOutAnimate = null;
    const i = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;
    this._animationCanPlay = this._config.dropdownAnimation === "on" && !i, this._didInit = !1, this._init();
  }
  // Getters
  static get Default() {
    return dd;
  }
  static get DefaultType() {
    return hd;
  }
  static get NAME() {
    return Hs;
  }
  // Public
  toggle() {
    return this._isShown() ? this.hide() : this.show();
  }
  show() {
    if (de(this._element) || this._isShown(this._menu))
      return;
    const t = {
      relatedTarget: this._element
    };
    if (u.trigger(
      this._element,
      Uc,
      t
    ).defaultPrevented)
      return;
    const i = wt.getParentFromElement(this._element);
    this._inNavbar ? p.setDataAttribute(this._menu, "popper", "none") : this._createPopper(i), "ontouchstart" in document.documentElement && !i.closest(td) && [].concat(...document.body.children).forEach((n) => u.on(n, "mouseover", ps)), this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.setAttribute(`data-te-dropdown-${Pt}`, ""), this._animationCanPlay && this._menu.animate(ld, wi), this._element.setAttribute(`data-te-dropdown-${Pt}`, ""), setTimeout(
      () => {
        u.trigger(this._element, zc, t);
      },
      this._animationCanPlay ? wi.duration : 0
    );
  }
  hide() {
    if (de(this._element) || !this._isShown(this._menu))
      return;
    const t = {
      relatedTarget: this._element
    };
    this._completeHide(t);
  }
  dispose() {
    this._popper && this._popper.destroy(), super.dispose();
  }
  update() {
    this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();
  }
  // Private
  _init() {
    this._didInit || (u.on(
      document,
      Eo,
      yi,
      wt.dataApiKeydownHandler
    ), u.on(
      document,
      Eo,
      Vs,
      wt.dataApiKeydownHandler
    ), u.on(document, Xc, wt.clearMenus), u.on(document, Gc, wt.clearMenus), this._didInit = !0);
  }
  _completeHide(t) {
    this._fadeOutAnimate && this._fadeOutAnimate.playState === "running" || u.trigger(
      this._element,
      jc,
      t
    ).defaultPrevented || ("ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach((i) => u.off(i, "mouseover", ps)), this._animationCanPlay && (this._fadeOutAnimate = this._menu.animate(
      cd,
      wi
    )), setTimeout(
      () => {
        this._popper && this._popper.destroy(), this._menu.removeAttribute(`data-te-dropdown-${Pt}`), this._element.removeAttribute(`data-te-dropdown-${Pt}`), this._element.setAttribute("aria-expanded", "false"), p.removeDataAttribute(this._menu, "popper"), u.trigger(this._element, Kc, t);
      },
      this._animationCanPlay ? wi.duration : 0
    ));
  }
  _getConfig(t) {
    if (t = {
      ...this.constructor.Default,
      ...p.getDataAttributes(this._element),
      ...t
    }, M(Hs, t, this.constructor.DefaultType), typeof t.reference == "object" && !Le(t.reference) && typeof t.reference.getBoundingClientRect != "function")
      throw new TypeError(
        `${Hs.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`
      );
    return t;
  }
  _createPopper(t) {
    if (typeof Wa > "u")
      throw new TypeError(
        "Bootstrap's dropdowns require Popper (https://popper.js.org)"
      );
    let e = this._element;
    this._config.reference === "parent" ? e = t : Le(this._config.reference) ? e = Gt(this._config.reference) : typeof this._config.reference == "object" && (e = this._config.reference);
    const i = this._getPopperConfig(), n = i.modifiers.find(
      (o) => o.name === "applyStyles" && o.enabled === !1
    );
    this._popper = Be(
      e,
      this._menu,
      i
    ), n && p.setDataAttribute(this._menu, "popper", "static");
  }
  _isShown(t = this._element) {
    return t.dataset[`teDropdown${Pt.charAt(0).toUpperCase() + Pt.slice(1)}`] === "";
  }
  _getMenuElement() {
    return d.next(this._element, Vs)[0];
  }
  _getPlacement() {
    const t = this._element.parentNode;
    if (t.dataset.teDropdownPosition === Qc)
      return rd;
    if (t.dataset.teDropdownPosition === Zc)
      return ad;
    const e = getComputedStyle(this._menu).getPropertyValue("--te-position").trim() === "end";
    return t.dataset.teDropdownPosition === qc ? e ? sd : id : e ? od : nd;
  }
  _detectNavbar() {
    return this._element.closest(Jc) !== null;
  }
  _getOffset() {
    const { offset: t } = this._config;
    return typeof t == "string" ? t.split(",").map((e) => Number.parseInt(e, 10)) : typeof t == "function" ? (e) => t(e, this._element) : t;
  }
  _getPopperConfig() {
    const t = {
      placement: this._getPlacement(),
      modifiers: [
        {
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        },
        {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }
      ]
    };
    return this._config.display === "static" && (t.modifiers = [
      {
        name: "applyStyles",
        enabled: !1
      }
    ]), {
      ...t,
      ...typeof this._config.popperConfig == "function" ? this._config.popperConfig(t) : this._config.popperConfig
    };
  }
  _selectMenuItem({ key: t, target: e }) {
    const i = d.find(
      ed,
      this._menu
    ).filter(xt);
    i.length && ha(
      i,
      e,
      t === Ji,
      !i.includes(e)
    ).focus();
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = wt.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t]();
      }
    });
  }
  static clearMenus(t) {
    if (t && (t.button === Fc || t.type === "keyup" && t.key !== vo))
      return;
    const e = d.find(yi);
    for (let i = 0, n = e.length; i < n; i++) {
      const o = wt.getInstance(e[i]);
      if (!o || o._config.autoClose === !1 || !o._isShown())
        continue;
      const r = {
        relatedTarget: o._element
      };
      if (t) {
        const a = t.composedPath(), l = a.includes(o._menu);
        if (a.includes(o._element) || o._config.autoClose === "inside" && !l || o._config.autoClose === "outside" && l || o._menu.contains(t.target) && (t.type === "keyup" && t.key === vo || /input|select|option|textarea|form/i.test(t.target.tagName)))
          continue;
        t.type === "click" && (r.clickEvent = t);
      }
      o._completeHide(r);
    }
  }
  static getParentFromElement(t) {
    return Xt(t) || t.parentNode;
  }
  static dataApiKeydownHandler(t) {
    if (/input|textarea/i.test(t.target.tagName) ? t.key === bo || t.key !== Zi && (t.key !== Ji && t.key !== Sn || t.target.closest(Vs)) : !Yc.test(t.key))
      return;
    const e = this.dataset[`teDropdown${Pt.charAt(0).toUpperCase() + Pt.slice(1)}`] === "";
    if (!e && t.key === Zi || (t.preventDefault(), t.stopPropagation(), de(this)))
      return;
    const i = this.matches(yi) ? this : d.prev(this, yi)[0], n = wt.getOrCreateInstance(i);
    if (t.key === Zi) {
      n.hide();
      return;
    }
    if (t.key === Sn || t.key === Ji) {
      e || n.show(), n._selectMenuItem(t);
      return;
    }
    (!e || t.key === bo) && wt.clearMenus();
  }
}
const Ws = "collapse", Fa = "te.collapse", Ts = `.${Fa}`, To = {
  toggle: !0,
  parent: null
}, ud = {
  toggle: "boolean",
  parent: "(null|element)"
}, pd = `show${Ts}`, fd = `shown${Ts}`, _d = `hide${Ts}`, md = `hidden${Ts}`, Fs = "data-te-collapse-show", Co = "data-te-collapse-collapsed", Oi = "data-te-collapse-collapsing", gd = "data-te-collapse-horizontal", we = "data-te-collapse-item", Ao = `:scope [${we}] [${we}]`, bd = "width", vd = "height", Ed = "[data-te-collapse-item][data-te-collapse-show], [data-te-collapse-item][data-te-collapse-collapsing]", yo = "[data-te-collapse-init]", Td = {
  visible: "!visible",
  hidden: "hidden",
  baseTransition: "overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none",
  collapsing: "h-0 transition-[height] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none",
  collapsingHorizontal: "w-0 h-auto transition-[width] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none"
}, Cd = {
  visible: "string",
  hidden: "string",
  baseTransition: "string",
  collapsing: "string",
  collapsingHorizontal: "string"
};
class Ut extends mt {
  constructor(t, e, i) {
    super(t), this._isTransitioning = !1, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._triggerArray = [];
    const n = d.find(yo);
    for (let o = 0, r = n.length; o < r; o++) {
      const a = n[o], l = Fn(a), c = d.find(l).filter(
        (h) => h === this._element
      );
      l !== null && c.length && (this._selector = l, this._triggerArray.push(a));
    }
    this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();
  }
  // Getters
  static get Default() {
    return To;
  }
  static get NAME() {
    return Ws;
  }
  // Public
  toggle() {
    this._isShown() ? this.hide() : this.show();
  }
  show() {
    if (this._isTransitioning || this._isShown())
      return;
    let t = [], e;
    if (this._config.parent) {
      const h = d.find(
        Ao,
        this._config.parent
      );
      t = d.find(
        Ed,
        this._config.parent
      ).filter((_) => !h.includes(_));
    }
    const i = d.findOne(this._selector);
    if (t.length) {
      const h = t.find((_) => i !== _);
      if (e = h ? Ut.getInstance(h) : null, e && e._isTransitioning)
        return;
    }
    if (u.trigger(this._element, pd).defaultPrevented)
      return;
    t.forEach((h) => {
      i !== h && Ut.getOrCreateInstance(h, { toggle: !1 }).hide(), e || I.setData(h, Fa, null);
    });
    const o = this._getDimension(), r = o === "height" ? this._classes.collapsing : this._classes.collapsingHorizontal;
    p.removeClass(this._element, this._classes.visible), p.removeClass(this._element, this._classes.hidden), p.addClass(this._element, r), this._element.removeAttribute(we), this._element.setAttribute(Oi, ""), this._element.style[o] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;
    const a = () => {
      this._isTransitioning = !1, p.removeClass(this._element, this._classes.hidden), p.removeClass(this._element, r), p.addClass(this._element, this._classes.visible), this._element.removeAttribute(Oi), this._element.setAttribute(we, ""), this._element.setAttribute(Fs, ""), this._element.style[o] = "", u.trigger(this._element, fd);
    }, c = `scroll${o[0].toUpperCase() + o.slice(1)}`;
    this._queueCallback(a, this._element, !0), this._element.style[o] = `${this._element[c]}px`;
  }
  hide() {
    if (this._isTransitioning || !this._isShown() || u.trigger(this._element, _d).defaultPrevented)
      return;
    const e = this._getDimension(), i = e === "height" ? this._classes.collapsing : this._classes.collapsingHorizontal;
    this._element.style[e] = `${this._element.getBoundingClientRect()[e]}px`, Re(this._element), p.addClass(this._element, i), p.removeClass(this._element, this._classes.visible), p.removeClass(this._element, this._classes.hidden), this._element.setAttribute(Oi, ""), this._element.removeAttribute(we), this._element.removeAttribute(Fs);
    const n = this._triggerArray.length;
    for (let r = 0; r < n; r++) {
      const a = this._triggerArray[r], l = Xt(a);
      l && !this._isShown(l) && this._addAriaAndCollapsedClass([a], !1);
    }
    this._isTransitioning = !0;
    const o = () => {
      this._isTransitioning = !1, p.removeClass(this._element, i), p.addClass(this._element, this._classes.visible), p.addClass(this._element, this._classes.hidden), this._element.removeAttribute(Oi), this._element.setAttribute(we, ""), u.trigger(this._element, md);
    };
    this._element.style[e] = "", this._queueCallback(o, this._element, !0);
  }
  _isShown(t = this._element) {
    return t.hasAttribute(Fs);
  }
  // Private
  _getConfig(t) {
    return t = {
      ...To,
      ...p.getDataAttributes(this._element),
      ...t
    }, t.toggle = Boolean(t.toggle), t.parent = Gt(t.parent), M(Ws, t, ud), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Td,
      ...e,
      ...t
    }, M(Ws, t, Cd), t;
  }
  _getDimension() {
    return this._element.hasAttribute(gd) ? bd : vd;
  }
  _initializeChildren() {
    if (!this._config.parent)
      return;
    const t = d.find(
      Ao,
      this._config.parent
    );
    d.find(yo, this._config.parent).filter((e) => !t.includes(e)).forEach((e) => {
      const i = Xt(e);
      i && this._addAriaAndCollapsedClass([e], this._isShown(i));
    });
  }
  _addAriaAndCollapsedClass(t, e) {
    t.length && t.forEach((i) => {
      e ? i.removeAttribute(Co) : i.setAttribute(`${Co}`, ""), i.setAttribute("aria-expanded", e);
    });
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = {};
      typeof t == "string" && /show|hide/.test(t) && (e.toggle = !1);
      const i = Ut.getOrCreateInstance(this, e);
      if (typeof t == "string") {
        if (typeof i[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        i[t]();
      }
    });
  }
}
const wo = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", Oo = ".sticky-top";
class ai {
  constructor() {
    this._element = document.body;
  }
  getWidth() {
    const t = document.documentElement.clientWidth;
    return Math.abs(window.innerWidth - t);
  }
  hide() {
    const t = this.getWidth();
    this._disableOverFlow(), this._setElementAttributes(
      this._element,
      "paddingRight",
      (e) => e + t
    ), this._setElementAttributes(
      wo,
      "paddingRight",
      (e) => e + t
    ), this._setElementAttributes(
      Oo,
      "marginRight",
      (e) => e - t
    );
  }
  _disableOverFlow() {
    this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden";
  }
  _setElementAttributes(t, e, i) {
    const n = this.getWidth(), o = (r) => {
      if (r !== this._element && window.innerWidth > r.clientWidth + n)
        return;
      this._saveInitialAttribute(r, e);
      const a = window.getComputedStyle(r)[e];
      r.style[e] = `${i(
        Number.parseFloat(a)
      )}px`;
    };
    this._applyManipulationCallback(t, o);
  }
  reset() {
    this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, "paddingRight"), this._resetElementAttributes(wo, "paddingRight"), this._resetElementAttributes(Oo, "marginRight");
  }
  _saveInitialAttribute(t, e) {
    const i = t.style[e];
    i && p.setDataAttribute(t, e, i);
  }
  _resetElementAttributes(t, e) {
    const i = (n) => {
      const o = p.getDataAttribute(n, e);
      typeof o > "u" ? n.style.removeProperty(e) : (p.removeDataAttribute(n, e), n.style[e] = o);
    };
    this._applyManipulationCallback(t, i);
  }
  _applyManipulationCallback(t, e) {
    Le(t) ? e(t) : d.find(t, this._element).forEach(e);
  }
  isOverflowing() {
    return this.getWidth() > 0;
  }
}
const Ad = {
  isVisible: !0,
  // if false, we use the backdrop helper without adding any element to the dom
  isAnimated: !1,
  rootElement: "body",
  // give the choice to place backdrop under different elements
  clickCallback: null,
  backdropClasses: null
}, yd = {
  isVisible: "boolean",
  isAnimated: "boolean",
  rootElement: "(element|string)",
  clickCallback: "(function|null)",
  backdropClasses: "(array|null)"
}, Ya = "backdrop", ko = `mousedown.te.${Ya}`;
class eo {
  constructor(t) {
    this._config = this._getConfig(t), this._isAppended = !1, this._element = null;
  }
  show(t) {
    if (!this._config.isVisible) {
      ce(t);
      return;
    }
    this._append(), this._config.isAnimated && Re(this._getElement());
    const e = this._config.backdropClasses || [
      "opacity-50",
      "transition-all",
      "duration-300",
      "ease-in-out",
      "fixed",
      "top-0",
      "left-0",
      "z-[1040]",
      "bg-black",
      "w-screen",
      "h-screen"
    ];
    p.removeClass(this._getElement(), "opacity-0"), p.addClass(this._getElement(), e), this._element.setAttribute("data-te-backdrop-show", ""), this._emulateAnimation(() => {
      ce(t);
    });
  }
  hide(t) {
    if (!this._config.isVisible) {
      ce(t);
      return;
    }
    this._element.removeAttribute("data-te-backdrop-show"), this._getElement().classList.add("opacity-0"), this._getElement().classList.remove("opacity-50"), this._emulateAnimation(() => {
      this.dispose(), ce(t);
    });
  }
  // Private
  _getElement() {
    if (!this._element) {
      const t = document.createElement("div");
      t.className = this._config.className, this._config.isAnimated && t.classList.add("opacity-50"), this._element = t;
    }
    return this._element;
  }
  _getConfig(t) {
    return t = {
      ...Ad,
      ...typeof t == "object" ? t : {}
    }, t.rootElement = Gt(t.rootElement), M(Ya, t, yd), t;
  }
  _append() {
    this._isAppended || (this._config.rootElement.append(this._getElement()), u.on(this._getElement(), ko, () => {
      ce(this._config.clickCallback);
    }), this._isAppended = !0);
  }
  dispose() {
    this._isAppended && (u.off(this._element, ko), this._element.remove(), this._isAppended = !1);
  }
  _emulateAnimation(t) {
    da(
      t,
      this._getElement(),
      this._config.isAnimated
    );
  }
}
class ui {
  constructor(t, e = {}, i) {
    this._element = t, this._toggler = i, this._event = e.event || "blur", this._condition = e.condition || (() => !0), this._selector = e.selector || 'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])', this._onlyVisible = e.onlyVisible || !1, this._focusableElements = [], this._firstElement = null, this._lastElement = null, this.handler = (n) => {
      this._condition(n) && !n.shiftKey && n.target === this._lastElement ? (n.preventDefault(), this._firstElement.focus()) : this._condition(n) && n.shiftKey && n.target === this._firstElement && (n.preventDefault(), this._lastElement.focus());
    };
  }
  trap() {
    this._setElements(), this._init(), this._setFocusTrap();
  }
  disable() {
    this._focusableElements.forEach((t) => {
      t.removeEventListener(this._event, this.handler);
    }), this._toggler && this._toggler.focus();
  }
  update() {
    this._setElements(), this._setFocusTrap();
  }
  _init() {
    const t = (e) => {
      !this._firstElement || e.key !== "Tab" || this._focusableElements.includes(e.target) || (e.preventDefault(), this._firstElement.focus(), window.removeEventListener("keydown", t));
    };
    window.addEventListener("keydown", t);
  }
  _filterVisible(t) {
    return t.filter((e) => {
      if (!xt(e))
        return !1;
      const i = d.parents(e, "*");
      for (let n = 0; n < i.length; n++) {
        const o = window.getComputedStyle(i[n]);
        if (o && (o.display === "none" || o.visibility === "hidden"))
          return !1;
      }
      return !0;
    });
  }
  _setElements() {
    this._focusableElements = d.focusableChildren(this._element), this._onlyVisible && (this._focusableElements = this._filterVisible(this._focusableElements)), this._firstElement = this._focusableElements[0], this._lastElement = this._focusableElements[this._focusableElements.length - 1];
  }
  _setFocusTrap() {
    this._focusableElements.forEach((t, e) => {
      e === this._focusableElements.length - 1 || e === 0 ? t.addEventListener(this._event, this.handler) : t.removeEventListener(this._event, this.handler);
    });
  }
}
const Cs = (s, t = "hide") => {
  const e = `click.dismiss${s.EVENT_KEY}`, i = s.NAME;
  u.on(
    document,
    e,
    `[data-te-${i}-dismiss]`,
    function(n) {
      if (["A", "AREA"].includes(this.tagName) && n.preventDefault(), de(this))
        return;
      const o = Xt(this) || this.closest(`.${i}`) || this.closest(`[data-te-${i}-init]`);
      if (!o)
        return;
      s.getOrCreateInstance(o)[t]();
    }
  );
}, So = "offcanvas", wd = "te.offcanvas", He = `.${wd}`, Od = ".data-api", kd = `load${He}${Od}`, Sd = "Escape", xo = {
  backdrop: !0,
  keyboard: !0,
  scroll: !1
}, xd = {
  backdrop: "boolean",
  keyboard: "boolean",
  scroll: "boolean"
}, Do = "show", Dd = "[data-te-offcanvas-init][data-te-offcanvas-show]", Id = `show${He}`, $d = `shown${He}`, Ld = `hide${He}`, Md = `hidden${He}`, Nd = `keydown.dismiss${He}`;
class ts extends mt {
  constructor(t, e) {
    super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners(), this._didInit = !1, this._init();
  }
  // Getters
  static get NAME() {
    return So;
  }
  static get Default() {
    return xo;
  }
  // Public
  toggle(t) {
    return this._isShown ? this.hide() : this.show(t);
  }
  show(t) {
    if (this._isShown || u.trigger(this._element, Id, {
      relatedTarget: t
    }).defaultPrevented)
      return;
    this._isShown = !0, this._element.style.visibility = "visible", this._backdrop.show(), this._config.scroll || new ai().hide(), this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.setAttribute(`data-te-offcanvas-${Do}`, "");
    const i = () => {
      this._config.scroll || this._focustrap.trap(), u.trigger(this._element, $d, { relatedTarget: t });
    };
    this._queueCallback(i, this._element, !0);
  }
  hide() {
    if (!this._isShown || u.trigger(this._element, Ld).defaultPrevented)
      return;
    this._focustrap.disable(), this._element.blur(), this._isShown = !1, this._element.removeAttribute(`data-te-offcanvas-${Do}`), this._backdrop.hide();
    const e = () => {
      this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._element.style.visibility = "hidden", this._config.scroll || new ai().reset(), u.trigger(this._element, Md);
    };
    this._queueCallback(e, this._element, !0);
  }
  dispose() {
    this._backdrop.dispose(), this._focustrap.disable(), super.dispose();
  }
  // Private
  _init() {
    this._didInit || (u.on(
      window,
      kd,
      () => d.find(Dd).forEach(
        (t) => ts.getOrCreateInstance(t).show()
      )
    ), Cs(ts), this._didInit = !0);
  }
  _getConfig(t) {
    return t = {
      ...xo,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" ? t : {}
    }, M(So, t, xd), t;
  }
  _initializeBackDrop() {
    return new eo({
      isVisible: this._config.backdrop,
      isAnimated: !0,
      rootElement: this._element.parentNode,
      clickCallback: () => this.hide()
    });
  }
  _initializeFocusTrap() {
    return new ui(this._element, {
      event: "keydown",
      condition: (t) => t.key === "Tab"
    });
  }
  _addEventListeners() {
    u.on(this._element, Nd, (t) => {
      this._config.keyboard && t.key === Sd && this.hide();
    });
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = ts.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (e[t] === void 0 || t.startsWith("_") || t === "constructor")
          throw new TypeError(`No method named "${t}"`);
        e[t](this);
      }
    });
  }
}
const Ys = "alert", Rd = "te.alert", ja = `.${Rd}`, Pd = `close${ja}`, Bd = `closed${ja}`, We = "data-te-alert-show", Hd = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
}, Io = {
  animation: !0,
  autohide: !0,
  delay: 1e3
}, Vd = {
  fadeIn: "animate-[fade-in_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none",
  fadeOut: "animate-[fade-out_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none"
}, Wd = {
  fadeIn: "string",
  fadeOut: "string"
};
class xn extends mt {
  constructor(t, e, i) {
    super(t), this._element = t, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._didInit = !1, this._init();
  }
  // Getters
  static get DefaultType() {
    return Hd;
  }
  static get Default() {
    return Io;
  }
  static get NAME() {
    return Ys;
  }
  // Public
  close() {
    if (u.trigger(this._element, Pd).defaultPrevented)
      return;
    let e = 0;
    this._config.animation && (e = 300, p.addClass(this._element, this._classes.fadeOut)), this._element.removeAttribute(We), setTimeout(() => {
      this._queueCallback(
        () => this._destroyElement(),
        this._element,
        this._config.animation
      );
    }, e);
  }
  show() {
    if (this._element) {
      if (this._config.autohide && this._setupAutohide(), !this._element.hasAttribute(We) && (p.removeClass(this._element, "hidden"), p.addClass(this._element, "block"), xt(this._element))) {
        const t = (e) => {
          p.removeClass(this._element, "hidden"), p.addClass(this._element, "block"), u.off(e.target, "animationend", t);
        };
        this._element.setAttribute(We, ""), u.on(this._element, "animationend", t);
      }
      this._config.animation && (p.removeClass(this._element, this._classes.fadeOut), p.addClass(this._element, this._classes.fadeIn));
    }
  }
  hide() {
    if (this._element && this._element.hasAttribute(We)) {
      this._element.removeAttribute(We);
      const t = (e) => {
        p.addClass(this._element, "hidden"), p.removeClass(this._element, "block"), this._timeout !== null && (clearTimeout(this._timeout), this._timeout = null), u.off(e.target, "animationend", t);
      };
      u.on(this._element, "animationend", t), p.removeClass(this._element, this._classes.fadeIn), p.addClass(this._element, this._classes.fadeOut);
    }
  }
  // Private
  _init() {
    this._didInit || (Cs(xn, "close"), this._didInit = !0);
  }
  _getConfig(t) {
    return t = {
      ...Io,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" && t ? t : {}
    }, M(Ys, t, this.constructor.DefaultType), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Vd,
      ...e,
      ...t
    }, M(Ys, t, Wd), t;
  }
  _setupAutohide() {
    this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay);
  }
  _destroyElement() {
    this._element.remove(), u.trigger(this._element, Bd), this.dispose();
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = xn.getOrCreateInstance(this);
      if (typeof t == "string") {
        if (e[t] === void 0 || t.startsWith("_") || t === "constructor")
          throw new TypeError(`No method named "${t}"`);
        e[t](this);
      }
    });
  }
}
const js = "carousel", Fd = "te.carousel", at = `.${Fd}`, Ka = ".data-api", Yd = "ArrowLeft", jd = "ArrowRight", Kd = 500, Ud = 40, $o = {
  interval: 5e3,
  keyboard: !0,
  slide: !1,
  pause: "hover",
  wrap: !0,
  touch: !0
}, zd = {
  interval: "(number|boolean)",
  keyboard: "boolean",
  slide: "(boolean|string)",
  pause: "(string|boolean)",
  wrap: "boolean",
  touch: "boolean"
}, Xd = {
  pointer: "touch-pan-y",
  block: "!block",
  visible: "data-[te-carousel-fade]:opacity-100 data-[te-carousel-fade]:z-[1]",
  invisible: "data-[te-carousel-fade]:z-0 data-[te-carousel-fade]:opacity-0 data-[te-carousel-fade]:duration-0 data-[te-carousel-fade]:delay-600",
  slideRight: "translate-x-full",
  slideLeft: "-translate-x-full"
}, Gd = {
  pointer: "string",
  block: "string",
  visible: "string",
  invisible: "string",
  slideRight: "string",
  slideLeft: "string"
}, ee = "next", ie = "prev", ae = "left", Ge = "right", qd = {
  [Yd]: Ge,
  [jd]: ae
}, Qd = `slide${at}`, Lo = `slid${at}`, Zd = `keydown${at}`, Jd = `mouseenter${at}`, th = `mouseleave${at}`, eh = `touchstart${at}`, ih = `touchmove${at}`, sh = `touchend${at}`, nh = `pointerdown${at}`, oh = `pointerup${at}`, rh = `dragstart${at}`, ah = `load${at}${Ka}`, lh = `click${at}${Ka}`, ch = "data-te-carousel-init", se = "data-te-carousel-active", dh = "data-te-carousel-slide", hh = "data-te-carousel-item-end", Ks = "data-te-carousel-item-start", uh = "data-te-carousel-item-next", ph = "data-te-carousel-item-prev", fh = "data-te-carousel-pointer-event", _h = "[data-te-carousel-init]", Ua = "[data-te-carousel-active]", io = "[data-te-carousel-item]", ge = `${Ua}${io}`, mh = `${io} img`, gh = "[data-te-carousel-item-next], [data-te-carousel-item-prev]", bh = "[data-te-carousel-indicators]", vh = "[data-te-target]", Eh = "[data-te-slide], [data-te-slide-to]", Th = "touch", Ch = "pen";
class Yt extends mt {
  constructor(t, e, i) {
    super(t), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._indicatorsElement = d.findOne(
      bh,
      this._element
    ), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._setActiveElementClass(), this._addEventListeners(), this._didInit = !1, this._init();
  }
  // Getters
  static get Default() {
    return $o;
  }
  static get NAME() {
    return js;
  }
  // Public
  next() {
    this._slide(ee);
  }
  nextWhenVisible() {
    !document.hidden && xt(this._element) && this.next();
  }
  prev() {
    this._slide(ie);
  }
  pause(t) {
    t || (this._isPaused = !0), d.findOne(gh, this._element) && (ra(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
  }
  cycle(t) {
    t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval(
      (document.visibilityState ? this.nextWhenVisible : this.next).bind(
        this
      ),
      this._config.interval
    ));
  }
  to(t) {
    this._activeElement = d.findOne(
      ge,
      this._element
    );
    const e = this._getItemIndex(this._activeElement);
    if (t > this._items.length - 1 || t < 0)
      return;
    if (this._isSliding) {
      u.one(this._element, Lo, () => this.to(t));
      return;
    }
    if (e === t) {
      this.pause(), this.cycle();
      return;
    }
    const i = t > e ? ee : ie;
    this._slide(i, this._items[t]);
  }
  // Private
  _init() {
    this._didInit || (u.on(
      document,
      lh,
      Eh,
      Yt.dataApiClickHandler
    ), u.on(window, ah, () => {
      const t = d.find(_h);
      for (let e = 0, i = t.length; e < i; e++)
        Yt.carouselInterface(
          t[e],
          Yt.getInstance(t[e])
        );
    }), this._didInit = !0);
  }
  _getConfig(t) {
    return t = {
      ...$o,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" ? t : {}
    }, M(js, t, zd), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Xd,
      ...e,
      ...t
    }, M(js, t, Gd), t;
  }
  _applyInitialClasses() {
    const t = d.findOne(
      ge,
      this._element
    );
    t.classList.add(
      this._classes.block,
      ...this._classes.visible.split(" ")
    ), this._setActiveIndicatorElement(t);
  }
  _handleSwipe() {
    const t = Math.abs(this.touchDeltaX);
    if (t <= Ud)
      return;
    const e = t / this.touchDeltaX;
    this.touchDeltaX = 0, e && this._slide(e > 0 ? Ge : ae);
  }
  _setActiveElementClass() {
    this._activeElement = d.findOne(
      ge,
      this._element
    ), p.addClass(this._activeElement, "hidden");
  }
  _addEventListeners() {
    this._config.keyboard && u.on(
      this._element,
      Zd,
      (t) => this._keydown(t)
    ), this._config.pause === "hover" && (u.on(
      this._element,
      Jd,
      (t) => this.pause(t)
    ), u.on(
      this._element,
      th,
      (t) => this.cycle(t)
    )), this._config.touch && this._touchSupported && this._addTouchEventListeners(), this._applyInitialClasses();
  }
  _addTouchEventListeners() {
    const t = (o) => this._pointerEvent && (o.pointerType === Ch || o.pointerType === Th), e = (o) => {
      t(o) ? this.touchStartX = o.clientX : this._pointerEvent || (this.touchStartX = o.touches[0].clientX);
    }, i = (o) => {
      this.touchDeltaX = o.touches && o.touches.length > 1 ? 0 : o.touches[0].clientX - this.touchStartX;
    }, n = (o) => {
      t(o) && (this.touchDeltaX = o.clientX - this.touchStartX), this._handleSwipe(), this._config.pause === "hover" && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(
        (r) => this.cycle(r),
        Kd + this._config.interval
      ));
    };
    d.find(mh, this._element).forEach(
      (o) => {
        u.on(
          o,
          rh,
          (r) => r.preventDefault()
        );
      }
    ), this._pointerEvent ? (u.on(
      this._element,
      nh,
      (o) => e(o)
    ), u.on(this._element, oh, (o) => n(o)), this._element.classList.add(this._classes.pointer), this._element.setAttribute(`${fh}`, "")) : (u.on(this._element, eh, (o) => e(o)), u.on(this._element, ih, (o) => i(o)), u.on(this._element, sh, (o) => n(o)));
  }
  _keydown(t) {
    if (/input|textarea/i.test(t.target.tagName))
      return;
    const e = qd[t.key];
    e && (t.preventDefault(), this._slide(e));
  }
  _getItemIndex(t) {
    return this._items = t && t.parentNode ? d.find(io, t.parentNode) : [], this._items.indexOf(t);
  }
  _getItemByOrder(t, e) {
    const i = t === ee;
    return ha(
      this._items,
      e,
      i,
      this._config.wrap
    );
  }
  _triggerSlideEvent(t, e) {
    const i = this._getItemIndex(t), n = this._getItemIndex(
      d.findOne(ge, this._element)
    );
    return u.trigger(this._element, Qd, {
      relatedTarget: t,
      direction: e,
      from: n,
      to: i
    });
  }
  _setActiveIndicatorElement(t) {
    if (this._indicatorsElement) {
      const e = d.findOne(
        Ua,
        this._indicatorsElement
      );
      e.removeAttribute(se), e.removeAttribute("aria-current"), e.classList.remove("!opacity-100");
      const i = d.find(
        vh,
        this._indicatorsElement
      );
      for (let n = 0; n < i.length; n++)
        if (Number.parseInt(
          i[n].getAttribute("data-te-slide-to"),
          10
        ) === this._getItemIndex(t)) {
          i[n].setAttribute(`${se}`, ""), i[n].setAttribute("aria-current", "true"), i[n].classList.add("!opacity-100");
          break;
        }
    }
  }
  _updateInterval() {
    const t = this._activeElement || d.findOne(ge, this._element);
    if (!t)
      return;
    const e = Number.parseInt(
      t.getAttribute("data-te-interval"),
      10
    );
    e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;
  }
  _slide(t, e) {
    const i = this._directionToOrder(t), n = d.findOne(
      ge,
      this._element
    ), o = this._getItemIndex(n), r = e || this._getItemByOrder(i, n), a = this._getItemIndex(r), l = Boolean(this._interval), c = i === ee, h = c ? Ks : hh, _ = c ? uh : ph, f = this._orderToDirection(i), g = h === Ks ? this._classes.slideLeft : this._classes.slideRight, m = h !== Ks ? this._classes.slideLeft : this._classes.slideRight;
    if (r && r.hasAttribute(se)) {
      this._isSliding = !1;
      return;
    }
    if (this._isSliding || this._triggerSlideEvent(r, f).defaultPrevented || !n || !r)
      return;
    this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;
    const C = () => {
      u.trigger(this._element, Lo, {
        relatedTarget: r,
        direction: f,
        from: o,
        to: a
      });
    };
    if (this._element.hasAttribute(dh)) {
      r.setAttribute(`${_}`, ""), r.classList.add(this._classes.block, m), Re(r), n.setAttribute(`${h}`, ""), n.classList.add(
        g,
        ...this._classes.invisible.split(" ")
      ), n.classList.remove(...this._classes.visible.split(" ")), r.setAttribute(`${h}`, ""), r.classList.add(...this._classes.visible.split(" ")), r.classList.remove(
        this._classes.slideRight,
        this._classes.slideLeft
      );
      const b = () => {
        r.removeAttribute(h), r.removeAttribute(_), r.setAttribute(`${se}`, ""), n.removeAttribute(se), n.classList.remove(
          g,
          ...this._classes.invisible.split(" "),
          this._classes.block
        ), n.removeAttribute(_), n.removeAttribute(h), this._isSliding = !1, setTimeout(C, 0);
      };
      this._queueCallback(b, n, !0);
    } else
      n.removeAttribute(se), n.classList.remove(this._classes.block), r.setAttribute(`${se}`, ""), r.classList.add(this._classes.block), this._isSliding = !1, C();
    l && this.cycle();
  }
  _directionToOrder(t) {
    return [Ge, ae].includes(t) ? F() ? t === ae ? ie : ee : t === ae ? ee : ie : t;
  }
  _orderToDirection(t) {
    return [ee, ie].includes(t) ? F() ? t === ie ? ae : Ge : t === ie ? Ge : ae : t;
  }
  // Static
  static carouselInterface(t, e) {
    const i = Yt.getOrCreateInstance(t, e);
    let { _config: n } = i;
    typeof e == "object" && (n = {
      ...n,
      ...e
    });
    const o = typeof e == "string" ? e : n.slide;
    if (typeof e == "number")
      i.to(e);
    else if (typeof o == "string") {
      if (typeof i[o] > "u")
        throw new TypeError(`No method named "${o}"`);
      i[o]();
    } else
      n.interval && n.carouselInit === null && (i.pause(), i.cycle());
  }
  static jQueryInterface(t) {
    return this.each(function() {
      Yt.carouselInterface(this, t);
    });
  }
  static dataApiClickHandler(t) {
    const e = Xt(this);
    if (!e || !e.hasAttribute(ch))
      return;
    const i = {
      ...p.getDataAttributes(e),
      ...p.getDataAttributes(this)
    }, n = this.getAttribute("data-te-slide-to");
    n && (i.interval = !1), Yt.carouselInterface(e, i), n && Yt.getInstance(e).to(n), t.preventDefault();
  }
}
const Us = "modal", Ah = "te.modal", vt = `.${Ah}`, Mo = "Escape", No = {
  backdrop: !0,
  keyboard: !0,
  focus: !0
}, yh = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  focus: "boolean"
}, wh = {
  show: "transform-none",
  static: "scale-[1.02]",
  staticProperties: "transition-scale duration-300 ease-in-out"
}, Oh = {
  show: "string",
  static: "string",
  staticProperties: "string"
}, kh = `hide${vt}`, Sh = `hidePrevented${vt}`, xh = `hidden${vt}`, Dh = `show${vt}`, Ih = `shown${vt}`, Ro = `resize${vt}`, Po = `click.dismiss${vt}`, Bo = `keydown.dismiss${vt}`, $h = `mouseup.dismiss${vt}`, Ho = `mousedown.dismiss${vt}`, Vo = "data-te-modal-open", Wo = "data-te-open", Fe = "[data-te-modal-dialog-ref]", Lh = "[data-te-modal-body-ref]";
class Dn extends mt {
  constructor(t, e, i) {
    super(t), this._config = this._getConfig(e), this._classes = this._getClasses(i), this._dialog = d.findOne(Fe, this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new ai(), this._didInit = !1, this._init();
  }
  // Getters
  static get Default() {
    return No;
  }
  static get NAME() {
    return Us;
  }
  // Public
  toggle(t) {
    return this._isShown ? this.hide() : this.show(t);
  }
  show(t) {
    this._isShown || this._isTransitioning || u.trigger(this._element, Dh, {
      relatedTarget: t
    }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.setAttribute(Vo, "true"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), u.on(this._dialog, Ho, () => {
      u.one(this._element, $h, (i) => {
        i.target === this._element && (this._ignoreBackdropClick = !0);
      });
    }), this._showElement(t), this._showBackdrop());
  }
  hide() {
    if (!this._isShown || this._isTransitioning || u.trigger(this._element, kh).defaultPrevented)
      return;
    this._isShown = !1;
    const e = this._isAnimated();
    e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), this._focustrap.disable(), d.findOne(Fe, this._element).classList.remove(this._classes.show), u.off(this._element, Po), u.off(this._dialog, Ho), this._queueCallback(() => this._hideModal(), this._element, e), this._element.removeAttribute(Wo);
  }
  dispose() {
    [window, this._dialog].forEach(
      (t) => u.off(t, vt)
    ), this._backdrop.dispose(), this._focustrap.disable(), super.dispose();
  }
  handleUpdate() {
    this._adjustDialog();
  }
  // Private
  _init() {
    this._didInit || (Cs(Dn), this._didInit = !0);
  }
  _initializeBackDrop() {
    return new eo({
      isVisible: Boolean(this._config.backdrop),
      // 'static' option will be translated to true, and booleans will keep their value
      isAnimated: this._isAnimated()
    });
  }
  _initializeFocusTrap() {
    return new ui(this._element, {
      event: "keydown",
      condition: (t) => t.key === "Tab"
    });
  }
  _getConfig(t) {
    return t = {
      ...No,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" ? t : {}
    }, M(Us, t, yh), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...wh,
      ...e,
      ...t
    }, M(Us, t, Oh), t;
  }
  _showElement(t) {
    const e = this._isAnimated(), i = d.findOne(Lh, this._dialog);
    (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) && document.body.append(this._element), this._element.style.display = "block", this._element.classList.remove("hidden"), this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.setAttribute(`${Wo}`, "true"), this._element.scrollTop = 0;
    const n = d.findOne(Fe, this._element);
    n.classList.add(this._classes.show), n.classList.remove("opacity-0"), n.classList.add("opacity-100"), i && (i.scrollTop = 0), e && Re(this._element);
    const o = () => {
      this._config.focus && this._focustrap.trap(), this._isTransitioning = !1, u.trigger(this._element, Ih, {
        relatedTarget: t
      });
    };
    this._queueCallback(o, this._dialog, e);
  }
  _setEscapeEvent() {
    this._isShown ? u.on(document, Bo, (t) => {
      this._config.keyboard && t.key === Mo ? (t.preventDefault(), this.hide()) : !this._config.keyboard && t.key === Mo && this._triggerBackdropTransition();
    }) : u.off(this._element, Bo);
  }
  _setResizeEvent() {
    this._isShown ? u.on(window, Ro, () => this._adjustDialog()) : u.off(window, Ro);
  }
  _hideModal() {
    const t = d.findOne(Fe, this._element);
    t.classList.remove(this._classes.show), t.classList.remove("opacity-100"), t.classList.add("opacity-0"), setTimeout(() => {
      this._element.style.display = "none";
    }, 300), this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(() => {
      document.body.removeAttribute(Vo), this._resetAdjustments(), this._scrollBar.reset(), u.trigger(this._element, xh);
    });
  }
  _showBackdrop(t) {
    u.on(this._element, Po, (e) => {
      if (this._ignoreBackdropClick) {
        this._ignoreBackdropClick = !1;
        return;
      }
      e.target === e.currentTarget && (this._config.backdrop === !0 ? this.hide() : this._config.backdrop === "static" && this._triggerBackdropTransition());
    }), this._backdrop.show(t);
  }
  _isAnimated() {
    return !!d.findOne(Fe, this._element);
  }
  _triggerBackdropTransition() {
    if (u.trigger(this._element, Sh).defaultPrevented)
      return;
    const { classList: e, scrollHeight: i, style: n } = this._element, o = i > document.documentElement.clientHeight;
    !o && n.overflowY === "hidden" || e.contains(this._classes.static) || (o || (n.overflowY = "hidden"), e.add(...this._classes.static.split(" ")), e.add(...this._classes.staticProperties.split(" ")), this._queueCallback(() => {
      e.remove(this._classes.static), setTimeout(() => {
        e.remove(...this._classes.staticProperties.split(" "));
      }, 300), o || this._queueCallback(() => {
        n.overflowY = "";
      }, this._dialog);
    }, this._dialog), this._element.focus());
  }
  // ----------------------------------------------------------------------
  // the following methods are used to handle overflowing modals
  // ----------------------------------------------------------------------
  _adjustDialog() {
    const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0;
    (!i && t && !F() || i && !t && F()) && (this._element.style.paddingLeft = `${e}px`), (i && !t && !F() || !i && t && F()) && (this._element.style.paddingRight = `${e}px`);
  }
  _resetAdjustments() {
    this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
  }
  // Static
  static jQueryInterface(t, e) {
    return this.each(function() {
      const i = Dn.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof i[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        i[t](e);
      }
    });
  }
}
const Mh = /* @__PURE__ */ new Set([
  "background",
  "cite",
  "href",
  "itemtype",
  "longdesc",
  "poster",
  "src",
  "xlink:href"
]), Nh = /^aria-[\w-]*$/i, Rh = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, Ph = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i, Bh = (s, t) => {
  const e = s.nodeName.toLowerCase();
  if (t.includes(e))
    return Mh.has(e) ? Boolean(
      Rh.test(s.nodeValue) || Ph.test(s.nodeValue)
    ) : !0;
  const i = t.filter(
    (n) => n instanceof RegExp
  );
  for (let n = 0, o = i.length; n < o; n++)
    if (i[n].test(e))
      return !0;
  return !1;
}, Hh = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", Nh],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
function Fo(s, t, e) {
  if (!s.length)
    return s;
  if (e && typeof e == "function")
    return e(s);
  const n = new window.DOMParser().parseFromString(s, "text/html"), o = [].concat(...n.body.querySelectorAll("*"));
  for (let r = 0, a = o.length; r < a; r++) {
    const l = o[r], c = l.nodeName.toLowerCase();
    if (!Object.keys(t).includes(c)) {
      l.remove();
      continue;
    }
    const h = [].concat(...l.attributes), _ = [].concat(
      t["*"] || [],
      t[c] || []
    );
    h.forEach((f) => {
      Bh(f, _) || l.removeAttribute(f.nodeName);
    });
  }
  return n.body.innerHTML;
}
const Yo = "tooltip", Vh = "te.tooltip", Ct = `.${Vh}`, Wh = "te-tooltip", Fh = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]), Yh = {
  animation: "boolean",
  template: "string",
  title: "(string|element|function)",
  trigger: "string",
  delay: "(number|object)",
  html: "boolean",
  selector: "(string|boolean)",
  placement: "(string|function)",
  offset: "(array|string|function)",
  container: "(string|element|boolean)",
  fallbackPlacements: "array",
  boundary: "(string|element)",
  customClass: "(string|function)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  allowList: "object",
  popperConfig: "(null|object|function)"
}, jh = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: F() ? "left" : "right",
  BOTTOM: "bottom",
  LEFT: F() ? "right" : "left"
}, Kh = {
  animation: !0,
  template: '<div class="opacity-0 transition-opacity duration-300 ease-in-out absolute z-[1080] block m-0 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal" role="tooltip"><div data-te-tooltip-inner-ref class="tooltip-inner max-w-[200px] text-sm py-1.5 px-4 text-white text-center bg-[#6d6d6d] rounded"></div></div>',
  trigger: "hover focus",
  title: "",
  delay: 0,
  html: !1,
  selector: !1,
  placement: "top",
  offset: [0, 0],
  container: !1,
  fallbackPlacements: ["top", "right", "bottom", "left"],
  boundary: "clippingParents",
  customClass: "",
  sanitize: !0,
  sanitizeFn: null,
  allowList: Hh,
  popperConfig: { hide: !0 }
}, Uh = {
  HIDE: `hide${Ct}`,
  HIDDEN: `hidden${Ct}`,
  SHOW: `show${Ct}`,
  SHOWN: `shown${Ct}`,
  INSERTED: `inserted${Ct}`,
  CLICK: `click${Ct}`,
  FOCUSIN: `focusin${Ct}`,
  FOCUSOUT: `focusout${Ct}`,
  MOUSEENTER: `mouseenter${Ct}`,
  MOUSELEAVE: `mouseleave${Ct}`
}, zh = "fade", Xh = "modal", zs = "show", Ye = "show", Xs = "out", jo = ".tooltip-inner", Ko = `.${Xh}`, Uo = "hide.te.modal", je = "hover", Gs = "focus", Gh = "click", qh = "manual";
class pi extends mt {
  constructor(t, e) {
    if (typeof Wa > "u")
      throw new TypeError(
        "Bootstrap's tooltips require Popper (https://popper.js.org)"
      );
    super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();
  }
  // Getters
  static get Default() {
    return Kh;
  }
  static get NAME() {
    return Yo;
  }
  static get Event() {
    return Uh;
  }
  static get DefaultType() {
    return Yh;
  }
  // Public
  enable() {
    this._isEnabled = !0;
  }
  disable() {
    this._isEnabled = !1;
  }
  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }
  toggle(t) {
    if (this._isEnabled)
      if (t) {
        const e = this._initializeOnDelegatedTarget(t);
        e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);
      } else {
        if (this.getTipElement().classList.contains(zs)) {
          this._leave(null, this);
          return;
        }
        this._enter(null, this);
      }
  }
  dispose() {
    clearTimeout(this._timeout), u.off(
      this._element.closest(Ko),
      Uo,
      this._hideModalHandler
    ), this.tip && this.tip.remove(), this._disposePopper(), super.dispose();
  }
  show() {
    if (this._element.style.display === "none")
      throw new Error("Please use show on visible elements");
    if (!(this.isWithContent() && this._isEnabled))
      return;
    const t = u.trigger(
      this._element,
      this.constructor.Event.SHOW
    ), e = aa(this._element), i = e === null ? this._element.ownerDocument.documentElement.contains(this._element) : e.contains(this._element);
    if (t.defaultPrevented || !i)
      return;
    this.constructor.NAME === "tooltip" && this.tip && this.getTitle() !== this.tip.querySelector(jo).innerHTML && (this._disposePopper(), this.tip.remove(), this.tip = null);
    const n = this.getTipElement(), o = kt(this.constructor.NAME);
    n.setAttribute("id", o), this._element.setAttribute("aria-describedby", o), this._config.animation && setTimeout(() => {
      this.tip.classList.add("opacity-100"), this.tip.classList.remove("opacity-0");
    }, 100);
    const r = typeof this._config.placement == "function" ? this._config.placement.call(this, n, this._element) : this._config.placement, a = this._getAttachment(r);
    this._addAttachmentClass(a);
    const { container: l } = this._config;
    if (I.setData(n, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.append(n), u.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = Be(
      this._element,
      n,
      this._getPopperConfig(a)
    ), n.getAttribute("id").includes("tooltip"))
      switch (r) {
        case "bottom":
          n.classList.add("py-[0.4rem]");
          break;
        case "left":
          n.classList.add("px-[0.4rem]");
          break;
        case "right":
          n.classList.add("px-[0.4rem]");
          break;
        default:
          n.classList.add("py-[0.4rem]");
          break;
      }
    const h = this._resolvePossibleFunction(this._config.customClass);
    h && n.classList.add(...h.split(" ")), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach((g) => {
      u.on(g, "mouseover", ps);
    });
    const _ = () => {
      const g = this._hoverState;
      this._hoverState = null, u.trigger(this._element, this.constructor.Event.SHOWN), g === Xs && this._leave(null, this);
    }, f = this.tip.classList.contains("transition-opacity");
    this._queueCallback(_, this.tip, f);
  }
  hide() {
    if (!this._popper)
      return;
    const t = this.getTipElement(), e = () => {
      this._isWithActiveTrigger() || (this._hoverState !== Ye && t.remove(), this._cleanTipClass(), this._element.removeAttribute("aria-describedby"), u.trigger(this._element, this.constructor.Event.HIDDEN), this._disposePopper());
    };
    if (u.trigger(
      this._element,
      this.constructor.Event.HIDE
    ).defaultPrevented)
      return;
    t.classList.add("opacity-0"), t.classList.remove("opacity-100"), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach((o) => u.off(o, "mouseover", ps)), this._activeTrigger[Gh] = !1, this._activeTrigger[Gs] = !1, this._activeTrigger[je] = !1;
    const n = this.tip.classList.contains("opacity-0");
    this._queueCallback(e, this.tip, n), this._hoverState = "";
  }
  update() {
    this._popper !== null && this._popper.update();
  }
  // Protected
  isWithContent() {
    return Boolean(this.getTitle());
  }
  getTipElement() {
    if (this.tip)
      return this.tip;
    const t = document.createElement("div");
    t.innerHTML = this._config.template;
    const e = t.children[0];
    return this.setContent(e), e.classList.remove(zh, zs), this.tip = e, this.tip;
  }
  setContent(t) {
    this._sanitizeAndSetContent(t, this.getTitle(), jo);
  }
  _sanitizeAndSetContent(t, e, i) {
    const n = d.findOne(i, t);
    if (!e && n) {
      n.remove();
      return;
    }
    this.setElementContent(n, e);
  }
  setElementContent(t, e) {
    if (t !== null) {
      if (Le(e)) {
        e = Gt(e), this._config.html ? e.parentNode !== t && (t.innerHTML = "", t.append(e)) : t.textContent = e.textContent;
        return;
      }
      this._config.html ? (this._config.sanitize && (e = Fo(
        e,
        this._config.allowList,
        this._config.sanitizeFn
      )), t.innerHTML = e) : t.textContent = e;
    }
  }
  getTitle() {
    const t = this._element.getAttribute("data-te-original-title") || this._config.title;
    return this._resolvePossibleFunction(t);
  }
  updateAttachment(t) {
    return t === "right" ? "end" : t === "left" ? "start" : t;
  }
  // Private
  _initializeOnDelegatedTarget(t, e) {
    return e || this.constructor.getOrCreateInstance(
      t.delegateTarget,
      this._getDelegateConfig()
    );
  }
  _getOffset() {
    const { offset: t } = this._config;
    return typeof t == "string" ? t.split(",").map((e) => Number.parseInt(e, 10)) : typeof t == "function" ? (e) => t(e, this._element) : t;
  }
  _resolvePossibleFunction(t) {
    return typeof t == "function" ? t.call(this._element) : t;
  }
  _getPopperConfig(t) {
    const e = {
      placement: t,
      modifiers: [
        {
          name: "flip",
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        },
        {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        },
        {
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        },
        {
          name: "arrow",
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        },
        {
          name: "onChange",
          enabled: !0,
          phase: "afterWrite",
          fn: (i) => this._handlePopperPlacementChange(i)
        }
      ],
      onFirstUpdate: (i) => {
        i.options.placement !== i.placement && this._handlePopperPlacementChange(i);
      }
    };
    return {
      ...e,
      ...typeof this._config.popperConfig == "function" ? this._config.popperConfig(e) : this._config.popperConfig
    };
  }
  _addAttachmentClass(t) {
    this.getTipElement().classList.add(
      `${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`
    );
  }
  _getAttachment(t) {
    return jh[t.toUpperCase()];
  }
  _setListeners() {
    this._config.trigger.split(" ").forEach((e) => {
      if (e === "click")
        u.on(
          this._element,
          this.constructor.Event.CLICK,
          this._config.selector,
          (i) => this.toggle(i)
        );
      else if (e !== qh) {
        const i = e === je ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, n = e === je ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;
        u.on(
          this._element,
          i,
          this._config.selector,
          (o) => this._enter(o)
        ), u.on(
          this._element,
          n,
          this._config.selector,
          (o) => this._leave(o)
        );
      }
    }), this._hideModalHandler = () => {
      this._element && this.hide();
    }, u.on(
      this._element.closest(Ko),
      Uo,
      this._hideModalHandler
    ), this._config.selector ? this._config = {
      ...this._config,
      trigger: "manual",
      selector: ""
    } : this._fixTitle();
  }
  _fixTitle() {
    const t = this._element.getAttribute("title"), e = typeof this._element.getAttribute(
      "data-te-original-title"
    );
    (t || e !== "string") && (this._element.setAttribute("data-te-original-title", t || ""), t && !this._element.getAttribute("aria-label") && !this._element.textContent && this._element.setAttribute("aria-label", t), this._element.setAttribute("title", ""));
  }
  _enter(t, e) {
    if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === "focusin" ? Gs : je] = !0), e.getTipElement().classList.contains(zs) || e._hoverState === Ye) {
      e._hoverState = Ye;
      return;
    }
    if (clearTimeout(e._timeout), e._hoverState = Ye, !e._config.delay || !e._config.delay.show) {
      e.show();
      return;
    }
    e._timeout = setTimeout(() => {
      e._hoverState === Ye && e.show();
    }, e._config.delay.show);
  }
  _leave(t, e) {
    if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === "focusout" ? Gs : je] = e._element.contains(t.relatedTarget)), !e._isWithActiveTrigger()) {
      if (clearTimeout(e._timeout), e._hoverState = Xs, !e._config.delay || !e._config.delay.hide) {
        e.hide();
        return;
      }
      e._timeout = setTimeout(() => {
        e._hoverState === Xs && e.hide();
      }, e._config.delay.hide);
    }
  }
  _isWithActiveTrigger() {
    for (const t in this._activeTrigger)
      if (this._activeTrigger[t])
        return !0;
    return !1;
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._element);
    return Object.keys(e).forEach((i) => {
      Fh.has(i) && delete e[i];
    }), t = {
      ...this.constructor.Default,
      ...e,
      ...typeof t == "object" && t ? t : {}
    }, t.container = t.container === !1 ? document.body : Gt(t.container), typeof t.delay == "number" && (t.delay = {
      show: t.delay,
      hide: t.delay
    }), typeof t.title == "number" && (t.title = t.title.toString()), typeof t.content == "number" && (t.content = t.content.toString()), M(Yo, t, this.constructor.DefaultType), t.sanitize && (t.template = Fo(
      t.template,
      t.allowList,
      t.sanitizeFn
    )), t;
  }
  _getDelegateConfig() {
    const t = {};
    for (const e in this._config)
      this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);
    return t;
  }
  _cleanTipClass() {
    const t = this.getTipElement(), e = new RegExp(
      `(^|\\s)${this._getBasicClassPrefix()}\\S+`,
      "g"
    ), i = t.getAttribute("class").match(e);
    i !== null && i.length > 0 && i.map((n) => n.trim()).forEach((n) => t.classList.remove(n));
  }
  _getBasicClassPrefix() {
    return Wh;
  }
  _handlePopperPlacementChange(t) {
    const { state: e } = t;
    e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));
  }
  _disposePopper() {
    this._popper && (this._popper.destroy(), this._popper = null);
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = pi.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t]();
      }
    });
  }
}
const Qh = "popover", Zh = "te.popover", At = `.${Zh}`, Jh = "te-popover", tu = {
  ...pi.Default,
  placement: "right",
  offset: [0, 8],
  trigger: "click",
  content: "",
  template: '<div class="opacity-0 transition-opacity duration-150 ease-in-out absolute top-0 left-0 z-[1070] block max-w-[267px] break-words bg-white bg-clip-padding border border-neutral-100 rounded-lg shadow-[0_0px_3px_0_rgba(0,0,0,0.07),0_2px_2px_0_rgba(0,0,0,0.04)] text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal dark:bg-neutral-700 dark:border-0 dark:text-white data-[popper-reference-hidden]:hidden" role="tooltip"><h3 class="popover-header py-2 px-4 mb-0 border-b-2 border-neutral-100 rounded-t-lg font-medium empty:hidden dark:border-neutral-500"></h3><div class="popover-body p-4 text-[#212529] dark:text-white"></div></div>'
}, eu = {
  ...pi.DefaultType,
  content: "(string|element|function)"
}, iu = {
  HIDE: `hide${At}`,
  HIDDEN: `hidden${At}`,
  SHOW: `show${At}`,
  SHOWN: `shown${At}`,
  INSERTED: `inserted${At}`,
  CLICK: `click${At}`,
  FOCUSIN: `focusin${At}`,
  FOCUSOUT: `focusout${At}`,
  MOUSEENTER: `mouseenter${At}`,
  MOUSELEAVE: `mouseleave${At}`
}, su = ".popover-header", nu = ".popover-body";
class za extends pi {
  // Getters
  static get Default() {
    return tu;
  }
  static get NAME() {
    return Qh;
  }
  static get Event() {
    return iu;
  }
  static get DefaultType() {
    return eu;
  }
  // Overrides
  isWithContent() {
    return this.getTitle() || this._getContent();
  }
  setContent(t) {
    this._sanitizeAndSetContent(t, this.getTitle(), su), this._sanitizeAndSetContent(t, this._getContent(), nu);
  }
  // Private
  _getContent() {
    return this._resolvePossibleFunction(this._config.content);
  }
  _getBasicClassPrefix() {
    return Jh;
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = za.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t]();
      }
    });
  }
}
const qs = "scrollspy", ou = "te.scrollspy", As = `.${ou}`, ru = ".data-api", zo = {
  offset: 10,
  method: "auto",
  target: ""
}, au = {
  offset: "number",
  method: "string",
  target: "(string|element)"
}, lu = {
  active: "!text-primary dark:!text-primary-400 font-semibold border-l-[0.125rem] border-solid border-primary dark:border-primary-400"
}, cu = {
  active: "string"
}, du = `activate${As}`, hu = `scroll${As}`, uu = `load${As}${ru}`, Qs = "data-te-nav-link-active", Xa = "[data-te-dropdown-item-ref]", pu = '[data-te-spy="scroll"]', fu = "[data-te-nav-list-ref]", In = "[data-te-nav-link-ref]", _u = "[data-te-nav-item-ref]", Ga = "[data-te-list-group-item-ref]", Zs = `${In}, ${Ga}, ${Xa}`, mu = "[data-te-dropdown-ref]", gu = "[data-te-dropdown-toggle-ref]", bu = "offset", Xo = "position";
class $n extends mt {
  constructor(t, e, i) {
    super(t), this._scrollElement = this._element.tagName === "BODY" ? window : this._element, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, u.on(this._scrollElement, hu, () => this._process()), this.refresh(), this._process(), this._didInit = !1, this._init();
  }
  // Getters
  static get Default() {
    return zo;
  }
  static get NAME() {
    return qs;
  }
  // Public
  refresh() {
    const t = this._scrollElement === this._scrollElement.window ? bu : Xo, e = this._config.method === "auto" ? t : this._config.method, i = e === Xo ? this._getScrollTop() : 0;
    this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), d.find(
      Zs,
      this._config.target
    ).map((o) => {
      const r = Fn(o), a = r ? d.findOne(r) : null;
      if (a) {
        const l = a.getBoundingClientRect();
        if (l.width || l.height)
          return [
            p[e](a).top + i,
            r
          ];
      }
      return null;
    }).filter((o) => o).sort((o, r) => o[0] - r[0]).forEach((o) => {
      this._offsets.push(o[0]), this._targets.push(o[1]);
    });
  }
  dispose() {
    u.off(this._scrollElement, As), super.dispose();
  }
  // Private
  _init() {
    this._didInit || (u.on(window, uu, () => {
      d.find(pu).forEach(
        (t) => new $n(t)
      );
    }), this._didInit = !0);
  }
  _getConfig(t) {
    return t = {
      ...zo,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" && t ? t : {}
    }, t.target = Gt(t.target) || document.documentElement, M(qs, t, au), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...lu,
      ...e,
      ...t
    }, M(qs, t, cu), t;
  }
  _getScrollTop() {
    return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
  }
  _getScrollHeight() {
    return this._scrollElement.scrollHeight || Math.max(
      document.body.scrollHeight,
      document.documentElement.scrollHeight
    );
  }
  _getOffsetHeight() {
    return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
  }
  _process() {
    const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), i = this._config.offset + e - this._getOffsetHeight();
    if (this._scrollHeight !== e && this.refresh(), t >= i) {
      const n = this._targets[this._targets.length - 1];
      this._activeTarget !== n && this._activate(n);
      return;
    }
    if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) {
      this._activeTarget = null, this._clear();
      return;
    }
    for (let n = this._offsets.length; n--; )
      this._activeTarget !== this._targets[n] && t >= this._offsets[n] && (typeof this._offsets[n + 1] > "u" || t < this._offsets[n + 1]) && this._activate(this._targets[n]);
  }
  _activate(t) {
    this._activeTarget = t, this._clear();
    const e = Zs.split(",").map(
      (n) => `${n}[data-te-target="${t}"],${n}[href="${t}"]`
    ), i = d.findOne(e.join(","), this._config.target);
    i.classList.add(...this._classes.active.split(" ")), i.setAttribute(Qs, ""), i.getAttribute(Xa) ? d.findOne(
      gu,
      i.closest(mu)
    ).classList.add(...this._classes.active.split(" ")) : d.parents(i, fu).forEach(
      (n) => {
        d.prev(
          n,
          `${In}, ${Ga}`
        ).forEach((o) => {
          o.classList.add(...this._classes.active.split(" ")), o.setAttribute(Qs, "");
        }), d.prev(n, _u).forEach(
          (o) => {
            d.children(o, In).forEach(
              (r) => r.classList.add(...this._classes.active.split(" "))
            );
          }
        );
      }
    ), u.trigger(this._scrollElement, du, {
      relatedTarget: t
    });
  }
  _clear() {
    d.find(Zs, this._config.target).filter(
      (t) => t.classList.contains(...this._classes.active.split(" "))
    ).forEach((t) => {
      t.classList.remove(...this._classes.active.split(" ")), t.removeAttribute(Qs);
    });
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = $n.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t]();
      }
    });
  }
}
const Go = "tab", vu = "te.tab", ys = `.${vu}`, Eu = `hide${ys}`, Tu = `hidden${ys}`, Cu = `show${ys}`, Au = `shown${ys}`, yu = "data-te-dropdown-menu-ref", Ae = "data-te-tab-active", es = "data-te-nav-active", wu = "[data-te-dropdown-ref]", Ou = "[data-te-nav-ref]", qo = `[${Ae}]`, ku = `[${es}]`, Qo = ":scope > li > .active", Su = "[data-te-dropdown-toggle-ref]", xu = ":scope > [data-te-dropdown-menu-ref] [data-te-dropdown-show]", Du = {
  show: "opacity-100",
  hide: "opacity-0"
}, Iu = {
  show: "string",
  hide: "string"
};
class qa extends mt {
  constructor(t, e) {
    super(t), this._classes = this._getClasses(e);
  }
  // Getters
  static get NAME() {
    return Go;
  }
  // Public
  show() {
    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.getAttribute(es) === "")
      return;
    let t;
    const e = Xt(this._element), i = this._element.closest(Ou), n = d.findOne(
      ku,
      i
    );
    if (i) {
      const l = i.nodeName === "UL" || i.nodeName === "OL" ? Qo : qo;
      t = d.find(l, i), t = t[t.length - 1];
    }
    const o = t ? u.trigger(t, Eu, {
      relatedTarget: this._element
    }) : null;
    if (u.trigger(this._element, Cu, {
      relatedTarget: t
    }).defaultPrevented || o !== null && o.defaultPrevented)
      return;
    this._activate(
      this._element,
      i,
      null,
      n,
      this._element
    );
    const a = () => {
      u.trigger(t, Tu, {
        relatedTarget: this._element
      }), u.trigger(this._element, Au, {
        relatedTarget: t
      });
    };
    e ? this._activate(
      e,
      e.parentNode,
      a,
      n,
      this._element
    ) : a();
  }
  // Private
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Du,
      ...e,
      ...t
    }, M(Go, t, Iu), t;
  }
  _activate(t, e, i, n, o) {
    const a = (e && (e.nodeName === "UL" || e.nodeName === "OL") ? d.find(Qo, e) : d.children(e, qo))[0], l = i && a && a.hasAttribute(Ae), c = () => this._transitionComplete(
      t,
      a,
      i,
      n,
      o
    );
    a && l ? (p.removeClass(a, this._classes.show), p.addClass(a, this._classes.hide), this._queueCallback(c, t, !0)) : c();
  }
  _transitionComplete(t, e, i, n, o) {
    if (e && n) {
      e.removeAttribute(Ae), n.removeAttribute(es);
      const a = d.findOne(
        xu,
        e.parentNode
      );
      a && a.removeAttribute(Ae), e.getAttribute("role") === "tab" && e.setAttribute("aria-selected", !1);
    }
    t.setAttribute(Ae, ""), o.setAttribute(es, ""), t.getAttribute("role") === "tab" && t.setAttribute("aria-selected", !0), Re(t), t.classList.contains(this._classes.hide) && (p.removeClass(t, this._classes.hide), p.addClass(t, this._classes.show));
    let r = t.parentNode;
    if (r && r.nodeName === "LI" && (r = r.parentNode), r && r.hasAttribute(yu)) {
      const a = t.closest(wu);
      a && d.find(Su, a).forEach(
        (l) => l.setAttribute(Ae, "")
      ), t.setAttribute("aria-expanded", !0);
    }
    i && i();
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = qa.getOrCreateInstance(this);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t]();
      }
    });
  }
}
const Js = "toast", $u = "te.toast", qt = `.${$u}`, Lu = `mouseover${qt}`, Mu = `mouseout${qt}`, Nu = `focusin${qt}`, Ru = `focusout${qt}`, Pu = `hide${qt}`, Bu = `hidden${qt}`, Hu = `show${qt}`, Vu = `shown${qt}`, Zo = "data-te-toast-hide", tn = "data-te-toast-show", ki = "data-te-toast-showing", Wu = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
}, Jo = {
  animation: !0,
  autohide: !0,
  delay: 5e3
}, Fu = {
  fadeIn: "animate-[fade-in_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none",
  fadeOut: "animate-[fade-out_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none"
}, Yu = {
  fadeIn: "string",
  fadeOut: "string"
};
class Ln extends mt {
  constructor(t, e, i) {
    super(t), this._config = this._getConfig(e), this._classes = this._getClasses(i), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners(), this._didInit = !1, this._init();
  }
  // Getters
  static get DefaultType() {
    return Wu;
  }
  static get Default() {
    return Jo;
  }
  static get NAME() {
    return Js;
  }
  // Public
  show() {
    if (u.trigger(this._element, Hu).defaultPrevented)
      return;
    this._clearTimeout(), this._config.animation && (p.removeClass(this._element, this._classes.fadeOut), p.addClass(this._element, this._classes.fadeIn));
    const e = () => {
      this._element.removeAttribute(ki), u.trigger(this._element, Vu), this._maybeScheduleHide();
    };
    this._element.removeAttribute(Zo), Re(this._element), this._element.setAttribute(tn, ""), this._element.setAttribute(ki, ""), this._queueCallback(e, this._element, this._config.animation);
  }
  hide() {
    if (!this._element || this._element.dataset.teToastShow === void 0 || u.trigger(this._element, Pu).defaultPrevented)
      return;
    const e = () => {
      let i = 0;
      this._config.animation && (i = 300, p.removeClass(this._element, this._classes.fadeIn), p.addClass(this._element, this._classes.fadeOut)), setTimeout(() => {
        this._element.setAttribute(Zo, ""), this._element.removeAttribute(ki), this._element.removeAttribute(tn), u.trigger(this._element, Bu);
      }, i);
    };
    this._element.setAttribute(ki, ""), this._queueCallback(e, this._element, this._config.animation);
  }
  dispose() {
    this._clearTimeout(), this._element.dataset.teToastShow !== void 0 && this._element.removeAttribute(tn), super.dispose();
  }
  // Private
  _init() {
    this._didInit || (Cs(Ln), this._didInit = !0);
  }
  _getConfig(t) {
    return t = {
      ...Jo,
      ...p.getDataAttributes(this._element),
      ...typeof t == "object" && t ? t : {}
    }, M(Js, t, this.constructor.DefaultType), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Fu,
      ...e,
      ...t
    }, M(Js, t, Yu), t;
  }
  _maybeScheduleHide() {
    this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay)));
  }
  _onInteraction(t, e) {
    switch (t.type) {
      case "mouseover":
      case "mouseout":
        this._hasMouseInteraction = e;
        break;
      case "focusin":
      case "focusout":
        this._hasKeyboardInteraction = e;
        break;
    }
    if (e) {
      this._clearTimeout();
      return;
    }
    const i = t.relatedTarget;
    this._element === i || this._element.contains(i) || this._maybeScheduleHide();
  }
  _setListeners() {
    u.on(
      this._element,
      Lu,
      (t) => this._onInteraction(t, !0)
    ), u.on(
      this._element,
      Mu,
      (t) => this._onInteraction(t, !1)
    ), u.on(
      this._element,
      Nu,
      (t) => this._onInteraction(t, !0)
    ), u.on(
      this._element,
      Ru,
      (t) => this._onInteraction(t, !1)
    );
  }
  _clearTimeout() {
    clearTimeout(this._timeout), this._timeout = null;
  }
  // Static
  static jQueryInterface(t) {
    return this.each(function() {
      const e = Ln.getOrCreateInstance(this, t);
      if (typeof t == "string") {
        if (typeof e[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        e[t](this);
      }
    });
  }
}
(function(s) {
  var t = {};
  function e(i) {
    if (t[i])
      return t[i].exports;
    var n = t[i] = { i, l: !1, exports: {} };
    return s[i].call(n.exports, n, n.exports, e), n.l = !0, n.exports;
  }
  e.m = s, e.c = t, e.d = function(i, n, o) {
    e.o(i, n) || Object.defineProperty(i, n, { enumerable: !0, get: o });
  }, e.r = function(i) {
    typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(i, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(i, "__esModule", { value: !0 });
  }, e.t = function(i, n) {
    if (1 & n && (i = e(i)), 8 & n || 4 & n && typeof i == "object" && i && i.__esModule)
      return i;
    var o = /* @__PURE__ */ Object.create(null);
    if (e.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: i }), 2 & n && typeof i != "string")
      for (var r in i)
        e.d(o, r, function(a) {
          return i[a];
        }.bind(null, r));
    return o;
  }, e.n = function(i) {
    var n = i && i.__esModule ? function() {
      return i.default;
    } : function() {
      return i;
    };
    return e.d(n, "a", n), n;
  }, e.o = function(i, n) {
    return Object.prototype.hasOwnProperty.call(i, n);
  }, e.p = "", e(e.s = 0);
})([function(s, t, e) {
  e.r(t), e(1), e(5);
  function i(o) {
    if (!o.hasAttribute("autocompleted")) {
      o.setAttribute("autocompleted", "");
      var r = new window.CustomEvent("onautocomplete", { bubbles: !0, cancelable: !0, detail: null });
      o.dispatchEvent(r) || (o.value = "");
    }
  }
  function n(o) {
    o.hasAttribute("autocompleted") && (o.removeAttribute("autocompleted"), o.dispatchEvent(new window.CustomEvent("onautocomplete", { bubbles: !0, cancelable: !1, detail: null })));
  }
  document.addEventListener("animationstart", function(o) {
    o.animationName === "onautofillstart" ? i(o.target) : n(o.target);
  }, !0), document.addEventListener("input", function(o) {
    o.inputType !== "insertReplacementText" && "data" in o ? n(o.target) : i(o.target);
  }, !0);
}, function(s, t, e) {
  var i = e(2), n = e(3);
  typeof (n = n.__esModule ? n.default : n) == "string" && (n = [[s.i, n, ""]]);
  var o = { insert: "head", singleton: !1 }, r = (i(n, o), n.locals ? n.locals : {});
  s.exports = r;
}, function(s, t, e) {
  var i, n = function() {
    return i === void 0 && (i = Boolean(window && document && document.all && !window.atob)), i;
  }, o = function() {
    var b = {};
    return function(v) {
      if (b[v] === void 0) {
        var T = document.querySelector(v);
        if (window.HTMLIFrameElement && T instanceof window.HTMLIFrameElement)
          try {
            T = T.contentDocument.head;
          } catch {
            T = null;
          }
        b[v] = T;
      }
      return b[v];
    };
  }(), r = [];
  function a(b) {
    for (var v = -1, T = 0; T < r.length; T++)
      if (r[T].identifier === b) {
        v = T;
        break;
      }
    return v;
  }
  function l(b, v) {
    for (var T = {}, A = [], w = 0; w < b.length; w++) {
      var y = b[w], O = v.base ? y[0] + v.base : y[0], x = T[O] || 0, k = "".concat(O, " ").concat(x);
      T[O] = x + 1;
      var D = a(k), S = { css: y[1], media: y[2], sourceMap: y[3] };
      D !== -1 ? (r[D].references++, r[D].updater(S)) : r.push({ identifier: k, updater: C(S, v), references: 1 }), A.push(k);
    }
    return A;
  }
  function c(b) {
    var v = document.createElement("style"), T = b.attributes || {};
    if (T.nonce === void 0) {
      var A = e.nc;
      A && (T.nonce = A);
    }
    if (Object.keys(T).forEach(function(y) {
      v.setAttribute(y, T[y]);
    }), typeof b.insert == "function")
      b.insert(v);
    else {
      var w = o(b.insert || "head");
      if (!w)
        throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
      w.appendChild(v);
    }
    return v;
  }
  var h, _ = (h = [], function(b, v) {
    return h[b] = v, h.filter(Boolean).join(`
`);
  });
  function f(b, v, T, A) {
    var w = T ? "" : A.media ? "@media ".concat(A.media, " {").concat(A.css, "}") : A.css;
    if (b.styleSheet)
      b.styleSheet.cssText = _(v, w);
    else {
      var y = document.createTextNode(w), O = b.childNodes;
      O[v] && b.removeChild(O[v]), O.length ? b.insertBefore(y, O[v]) : b.appendChild(y);
    }
  }
  function g(b, v, T) {
    var A = T.css, w = T.media, y = T.sourceMap;
    if (w ? b.setAttribute("media", w) : b.removeAttribute("media"), y && btoa && (A += `
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(y)))), " */")), b.styleSheet)
      b.styleSheet.cssText = A;
    else {
      for (; b.firstChild; )
        b.removeChild(b.firstChild);
      b.appendChild(document.createTextNode(A));
    }
  }
  var m = null, E = 0;
  function C(b, v) {
    var T, A, w;
    if (v.singleton) {
      var y = E++;
      T = m || (m = c(v)), A = f.bind(null, T, y, !1), w = f.bind(null, T, y, !0);
    } else
      T = c(v), A = g.bind(null, T, v), w = function() {
        (function(O) {
          if (O.parentNode === null)
            return !1;
          O.parentNode.removeChild(O);
        })(T);
      };
    return A(b), function(O) {
      if (O) {
        if (O.css === b.css && O.media === b.media && O.sourceMap === b.sourceMap)
          return;
        A(b = O);
      } else
        w();
    };
  }
  s.exports = function(b, v) {
    (v = v || {}).singleton || typeof v.singleton == "boolean" || (v.singleton = n());
    var T = l(b = b || [], v);
    return function(A) {
      if (A = A || [], Object.prototype.toString.call(A) === "[object Array]") {
        for (var w = 0; w < T.length; w++) {
          var y = a(T[w]);
          r[y].references--;
        }
        for (var O = l(A, v), x = 0; x < T.length; x++) {
          var k = a(T[x]);
          r[k].references === 0 && (r[k].updater(), r.splice(k, 1));
        }
        T = O;
      }
    };
  };
}, function(s, t, e) {
  (t = e(4)(!1)).push([s.i, `INPUT:-webkit-autofill,SELECT:-webkit-autofill,TEXTAREA:-webkit-autofill{animation-name:onautofillstart}INPUT:not(:-webkit-autofill),SELECT:not(:-webkit-autofill),TEXTAREA:not(:-webkit-autofill){animation-name:onautofillcancel}@keyframes onautofillstart{from{}}@keyframes onautofillcancel{from{}}
`, ""]), s.exports = t;
}, function(s, t, e) {
  s.exports = function(i) {
    var n = [];
    return n.toString = function() {
      return this.map(function(o) {
        var r = function(a, l) {
          var c = a[1] || "", h = a[3];
          if (!h)
            return c;
          if (l && typeof btoa == "function") {
            var _ = (g = h, m = btoa(unescape(encodeURIComponent(JSON.stringify(g)))), E = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(m), "/*# ".concat(E, " */")), f = h.sources.map(function(C) {
              return "/*# sourceURL=".concat(h.sourceRoot || "").concat(C, " */");
            });
            return [c].concat(f).concat([_]).join(`
`);
          }
          var g, m, E;
          return [c].join(`
`);
        }(o, i);
        return o[2] ? "@media ".concat(o[2], " {").concat(r, "}") : r;
      }).join("");
    }, n.i = function(o, r, a) {
      typeof o == "string" && (o = [[null, o, ""]]);
      var l = {};
      if (a)
        for (var c = 0; c < this.length; c++) {
          var h = this[c][0];
          h != null && (l[h] = !0);
        }
      for (var _ = 0; _ < o.length; _++) {
        var f = [].concat(o[_]);
        a && l[f[0]] || (r && (f[2] ? f[2] = "".concat(r, " and ").concat(f[2]) : f[2] = r), n.push(f));
      }
    }, n;
  };
}, function(s, t) {
  (function() {
    if (typeof window < "u")
      try {
        var e = new window.CustomEvent("test", { cancelable: !0 });
        if (e.preventDefault(), e.defaultPrevented !== !0)
          throw new Error("Could not prevent default");
      } catch {
        var i = function(o, r) {
          var a, l;
          return (r = r || {}).bubbles = !!r.bubbles, r.cancelable = !!r.cancelable, (a = document.createEvent("CustomEvent")).initCustomEvent(o, r.bubbles, r.cancelable, r.detail), l = a.preventDefault, a.preventDefault = function() {
            l.call(this);
            try {
              Object.defineProperty(this, "defaultPrevented", { get: function() {
                return !0;
              } });
            } catch {
              this.defaultPrevented = !0;
            }
          }, a;
        };
        i.prototype = window.Event.prototype, window.CustomEvent = i;
      }
  })();
}]);
const en = "input", Si = "te.input", Qa = "data-te-input-wrapper-init", Za = "data-te-input-notch-ref", Ja = "data-te-input-notch-leading-ref", tl = "data-te-input-notch-middle-ref", ju = "data-te-input-notch-trailing-ref", Ku = "data-te-input-helper-ref", Uu = "data-te-input-placeholder-active", Bt = "data-te-input-state-active", tr = "data-te-input-focused", er = "data-te-input-form-counter", ne = `[${Qa}] input`, oe = `[${Qa}] textarea`, be = `[${Za}]`, ir = `[${Ja}]`, sr = `[${tl}]`, zu = `[${Ku}]`, Xu = {
  inputFormWhite: !1
}, Gu = {
  inputFormWhite: "(boolean)"
}, qu = {
  notch: "group flex absolute left-0 top-0 w-full max-w-full h-full text-left pointer-events-none",
  notchLeading: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none left-0 top-0 h-full w-2 border-r-0 rounded-l-[0.25rem] group-data-[te-input-focused]:border-r-0 group-data-[te-input-state-active]:border-r-0",
  notchLeadingNormal: "border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary",
  notchLeadingWhite: "border-neutral-200 group-data-[te-input-focused]:shadow-[-1px_0_0_#ffffff,_0_1px_0_0_#ffffff,_0_-1px_0_0_#ffffff] group-data-[te-input-focused]:border-white",
  notchMiddle: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow-0 shrink-0 basis-auto w-auto max-w-[calc(100%-1rem)] h-full border-r-0 border-l-0 group-data-[te-input-focused]:border-x-0 group-data-[te-input-state-active]:border-x-0 group-data-[te-input-focused]:border-t group-data-[te-input-state-active]:border-t group-data-[te-input-focused]:border-solid group-data-[te-input-state-active]:border-solid group-data-[te-input-focused]:border-t-transparent group-data-[te-input-state-active]:border-t-transparent",
  notchMiddleNormal: "border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary",
  notchMiddleWhite: "border-neutral-200 group-data-[te-input-focused]:shadow-[0_1px_0_0_#ffffff] group-data-[te-input-focused]:border-white",
  notchTrailing: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow h-full border-l-0 rounded-r-[0.25rem] group-data-[te-input-focused]:border-l-0 group-data-[te-input-state-active]:border-l-0",
  notchTrailingNormal: "border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary",
  notchTrailingWhite: "border-neutral-200 group-data-[te-input-focused]:shadow-[1px_0_0_#ffffff,_0_-1px_0_0_#ffffff,_0_1px_0_0_#ffffff] group-data-[te-input-focused]:border-white",
  counter: "text-right leading-[1.6]"
}, Qu = {
  notch: "string",
  notchLeading: "string",
  notchLeadingNormal: "string",
  notchLeadingWhite: "string",
  notchMiddle: "string",
  notchMiddleNormal: "string",
  notchMiddleWhite: "string",
  notchTrailing: "string",
  notchTrailingNormal: "string",
  notchTrailingWhite: "string",
  counter: "string"
};
class V {
  constructor(t, e, i) {
    this._config = this._getConfig(e, t), this._element = t, this._classes = this._getClasses(i), this._label = null, this._labelWidth = 0, this._labelMarginLeft = 0, this._notchLeading = null, this._notchMiddle = null, this._notchTrailing = null, this._initiated = !1, this._helper = null, this._counter = !1, this._counterElement = null, this._maxLength = 0, this._leadingIcon = null, this._element && (I.setData(t, Si, this), this.init());
  }
  // Getters
  static get NAME() {
    return en;
  }
  get input() {
    return d.findOne("input", this._element) || d.findOne("textarea", this._element);
  }
  // Public
  init() {
    this._initiated || (this._getLabelData(), this._applyDivs(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter(), this._getEvents(), this._initiated = !0);
  }
  update() {
    this._getLabelData(), this._getNotchData(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter();
  }
  forceActive() {
    this.input.setAttribute(Bt, ""), d.findOne(be, this.input.parentNode).setAttribute(
      Bt,
      ""
    );
  }
  forceInactive() {
    this.input.removeAttribute(Bt), d.findOne(
      be,
      this.input.parentNode
    ).removeAttribute(Bt);
  }
  dispose() {
    this._removeBorder(), I.removeData(this._element, Si), this._element = null;
  }
  // Private
  _getConfig(t, e) {
    return t = {
      ...Xu,
      ...p.getDataAttributes(e),
      ...typeof t == "object" ? t : {}
    }, M(en, t, Gu), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...qu,
      ...e,
      ...t
    }, M(en, t, Qu), t;
  }
  _getLabelData() {
    this._label = d.findOne("label", this._element), this._label === null ? this._showPlaceholder() : (this._getLabelWidth(), this._getLabelPositionInInputGroup(), this._toggleDefaultDatePlaceholder());
  }
  _getHelper() {
    this._helper = d.findOne(zu, this._element);
  }
  _getCounter() {
    this._counter = p.getDataAttribute(
      this.input,
      "inputShowcounter"
    ), this._counter && (this._maxLength = this.input.maxLength, this._showCounter());
  }
  _getEvents() {
    u.on(
      document,
      "focus",
      ne,
      V.activate(new V())
    ), u.on(
      document,
      "input",
      ne,
      V.activate(new V())
    ), u.on(
      document,
      "blur",
      ne,
      V.deactivate(new V())
    ), u.on(
      document,
      "focus",
      oe,
      V.activate(new V())
    ), u.on(
      document,
      "input",
      oe,
      V.activate(new V())
    ), u.on(
      document,
      "blur",
      oe,
      V.deactivate(new V())
    ), u.on(window, "shown.te.modal", (t) => {
      d.find(ne, t.target).forEach(
        (e) => {
          const i = V.getInstance(e.parentNode);
          i && i.update();
        }
      ), d.find(oe, t.target).forEach(
        (e) => {
          const i = V.getInstance(e.parentNode);
          i && i.update();
        }
      );
    }), u.on(window, "shown.te.dropdown", (t) => {
      const e = t.target.parentNode.querySelector(
        "[data-te-dropdown-menu-ref]"
      );
      e && (d.find(ne, e).forEach(
        (i) => {
          const n = V.getInstance(i.parentNode);
          n && n.update();
        }
      ), d.find(oe, e).forEach(
        (i) => {
          const n = V.getInstance(i.parentNode);
          n && n.update();
        }
      ));
    }), u.on(window, "shown.te.tab", (t) => {
      let e;
      t.target.href ? e = t.target.href.split("#")[1] : e = p.getDataAttribute(t.target, "target").split(
        "#"
      )[1];
      const i = d.findOne(`#${e}`);
      d.find(ne, i).forEach((n) => {
        const o = V.getInstance(n.parentNode);
        o && o.update();
      }), d.find(oe, i).forEach(
        (n) => {
          const o = V.getInstance(n.parentNode);
          o && o.update();
        }
      );
    }), u.on(window, "reset", (t) => {
      d.find(ne, t.target).forEach(
        (e) => {
          const i = V.getInstance(e.parentNode);
          i && i.forceInactive();
        }
      ), d.find(oe, t.target).forEach(
        (e) => {
          const i = V.getInstance(e.parentNode);
          i && i.forceInactive();
        }
      );
    }), u.on(window, "onautocomplete", (t) => {
      const e = V.getInstance(t.target.parentNode);
      !e || !t.cancelable || e.forceActive();
    });
  }
  _showCounter() {
    if (d.find(
      `[${er}]`,
      this._element
    ).length > 0)
      return;
    this._counterElement = document.createElement("div"), p.addClass(this._counterElement, this._classes.counter), this._counterElement.setAttribute(er, "");
    const e = this.input.value.length;
    this._counterElement.innerHTML = `${e} / ${this._maxLength}`, this._helper.appendChild(this._counterElement), this._bindCounter();
  }
  _bindCounter() {
    u.on(this.input, "input", () => {
      const t = this.input.value.length;
      this._counterElement.innerHTML = `${t} / ${this._maxLength}`;
    });
  }
  _toggleDefaultDatePlaceholder(t = this.input) {
    if (!(t.getAttribute("type") === "date"))
      return;
    !(document.activeElement === t) && !t.value ? t.style.opacity = 0 : t.style.opacity = 1;
  }
  _showPlaceholder() {
    this.input.setAttribute(Uu, "");
  }
  _getNotchData() {
    this._notchMiddle = d.findOne(
      sr,
      this._element
    ), this._notchLeading = d.findOne(
      ir,
      this._element
    );
  }
  _getLabelWidth() {
    this._labelWidth = this._label.clientWidth * 0.8 + 8;
  }
  _getLabelPositionInInputGroup() {
    if (this._labelMarginLeft = 0, !this._element.hasAttribute("data-te-input-group-ref"))
      return;
    const t = this.input, e = d.prev(
      t,
      "[data-te-input-group-text-ref]"
    )[0];
    e === void 0 ? this._labelMarginLeft = 0 : this._labelMarginLeft = e.offsetWidth - 1;
  }
  _applyDivs() {
    const t = this._config.inputFormWhite ? this._classes.notchLeadingWhite : this._classes.notchLeadingNormal, e = this._config.inputFormWhite ? this._classes.notchMiddleWhite : this._classes.notchMiddleNormal, i = this._config.inputFormWhite ? this._classes.notchTrailingWhite : this._classes.notchTrailingNormal, n = d.find(be, this._element), o = L("div");
    p.addClass(o, this._classes.notch), o.setAttribute(Za, ""), this._notchLeading = L("div"), p.addClass(
      this._notchLeading,
      `${this._classes.notchLeading} ${t}`
    ), this._notchLeading.setAttribute(Ja, ""), this._notchMiddle = L("div"), p.addClass(
      this._notchMiddle,
      `${this._classes.notchMiddle} ${e}`
    ), this._notchMiddle.setAttribute(tl, ""), this._notchTrailing = L("div"), p.addClass(
      this._notchTrailing,
      `${this._classes.notchTrailing} ${i}`
    ), this._notchTrailing.setAttribute(ju, ""), !(n.length >= 1) && (o.append(this._notchLeading), o.append(this._notchMiddle), o.append(this._notchTrailing), this._element.append(o));
  }
  _applyNotch() {
    this._notchMiddle.style.width = `${this._labelWidth}px`, this._notchLeading.style.width = `${this._labelMarginLeft + 9}px`, this._label !== null && (this._label.style.marginLeft = `${this._labelMarginLeft}px`);
  }
  _removeBorder() {
    const t = d.findOne(be, this._element);
    t && t.remove();
  }
  _activate(t) {
    ca(() => {
      this._getElements(t);
      const e = t ? t.target : this.input, i = d.findOne(
        be,
        this._element
      );
      t && t.type === "focus" && i.setAttribute(tr, ""), e.value !== "" && (e.setAttribute(Bt, ""), i.setAttribute(Bt, "")), this._toggleDefaultDatePlaceholder(e);
    });
  }
  _getElements(t) {
    if (t && (this._element = t.target.parentNode, this._label = d.findOne("label", this._element)), t && this._label) {
      const e = this._labelWidth;
      this._getLabelData(), e !== this._labelWidth && (this._notchMiddle = d.findOne(
        sr,
        t.target.parentNode
      ), this._notchLeading = d.findOne(
        ir,
        t.target.parentNode
      ), this._applyNotch());
    }
  }
  _deactivate(t) {
    const e = t ? t.target : this.input, i = d.findOne(
      be,
      e.parentNode
    );
    i.removeAttribute(tr), e.value === "" && (e.removeAttribute(Bt), i.removeAttribute(Bt)), this._toggleDefaultDatePlaceholder(e);
  }
  static activate(t) {
    return function(e) {
      t._activate(e);
    };
  }
  static deactivate(t) {
    return function(e) {
      t._deactivate(e);
    };
  }
  static jQueryInterface(t, e) {
    return this.each(function() {
      let i = I.getData(this, Si);
      const n = typeof t == "object" && t;
      if (!(!i && /dispose/.test(t)) && (i || (i = new V(this, n)), typeof t == "string")) {
        if (typeof i[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        i[t](e);
      }
    });
  }
  static getInstance(t) {
    return I.getData(t, Si);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const nr = "animation", sn = "te.animation", Zu = {
  animation: "string",
  animationStart: "string",
  animationShowOnLoad: "boolean",
  onStart: "(null|function)",
  onEnd: "(null|function)",
  onHide: "(null|function)",
  onShow: "(null|function)",
  animationOnScroll: "(string)",
  animationWindowHeight: "number",
  animationOffset: "(number|string)",
  animationDelay: "(number|string)",
  animationReverse: "boolean",
  animationInterval: "(number|string)",
  animationRepeat: "(number|boolean)",
  animationReset: "boolean"
}, Ju = {
  animation: "fade",
  animationStart: "onClick",
  animationShowOnLoad: !0,
  onStart: null,
  onEnd: null,
  onHide: null,
  onShow: null,
  animationOnScroll: "once",
  animationWindowHeight: 0,
  animationOffset: 0,
  animationDelay: 0,
  animationReverse: !1,
  animationInterval: 0,
  animationRepeat: !1,
  animationReset: !1
};
class el {
  constructor(t, e) {
    this._element = t, this._animateElement = this._getAnimateElement(), this._isFirstScroll = !0, this._repeatAnimateOnScroll = !0, this._options = this._getConfig(e), this._element && (I.setData(t, sn, this), this._init());
  }
  // Getters
  static get NAME() {
    return nr;
  }
  // Public
  init() {
    this._init();
  }
  startAnimation() {
    this._startAnimation();
  }
  stopAnimation() {
    this._clearAnimationClass();
  }
  changeAnimationType(t) {
    this._options.animation = t;
  }
  dispose() {
    u.off(this._element, "mousedown"), u.off(this._animateElement, "animationend"), u.off(window, "scroll"), u.off(this._element, "mouseover"), I.removeData(this._element, sn), this._element = null, this._animateElement = null, this._isFirstScroll = null, this._repeatAnimateOnScroll = null, this._options = null;
  }
  // Private
  _init() {
    switch (this._options.animationStart) {
      case "onHover":
        this._bindHoverEvents();
        break;
      case "onLoad":
        this._startAnimation();
        break;
      case "onScroll":
        this._bindScrollEvents();
        break;
      case "onClick":
        this._bindClickEvents();
        break;
    }
    this._bindTriggerOnEndCallback(), this._options.animationReset && this._bindResetAnimationAfterFinish();
  }
  _getAnimateElement() {
    const t = p.getDataAttribute(
      this._element,
      "animation-target"
    );
    return t ? d.find(t)[0] : this._element;
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._animateElement);
    return t = {
      ...Ju,
      ...e,
      ...t
    }, M(nr, t, Zu), t;
  }
  _animateOnScroll() {
    const t = p.offset(this._animateElement).top, e = this._animateElement.offsetHeight, i = window.innerHeight, n = t + this._options.animationOffset <= i && t + this._options.animationOffset + e >= 0, o = this._animateElement.style.visibility === "visible";
    switch (!0) {
      case (n && this._isFirstScroll):
        this._isFirstScroll = !1, this._startAnimation();
        break;
      case (!n && this._isFirstScroll):
        this._isFirstScroll = !1, this._hideAnimateElement();
        break;
      case (n && !o && this._repeatAnimateOnScroll):
        this._options.animationOnScroll !== "repeat" && (this._repeatAnimateOnScroll = !1), this._callback(this._options.onShow), this._showAnimateElement(), this._startAnimation();
        break;
      case (!n && o && this._repeatAnimateOnScroll):
        this._hideAnimateElement(), this._clearAnimationClass(), this._callback(this._options.onHide);
        break;
    }
  }
  _addAnimatedClass() {
    p.addClass(
      this._animateElement,
      `animate-${this._options.animation}`
    );
  }
  _clearAnimationClass() {
    this._animateElement.classList.remove(`animate-${this._options.animation}`);
  }
  _startAnimation() {
    this._callback(this._options.onStart), this._addAnimatedClass(), this._options.animationRepeat && !this._options.animationInterval && this._setAnimationRepeat(), this._options.animationReverse && this._setAnimationReverse(), this._options.animationDelay && this._setAnimationDelay(), this._options.animationDuration && this._setAnimationDuration(), this._options.animationInterval && this._setAnimationInterval();
  }
  _setAnimationReverse() {
    p.style(this._animateElement, {
      animationIterationCount: this._options.animationRepeat === !0 ? "infinite" : "2",
      animationDirection: "alternate"
    });
  }
  _setAnimationDuration() {
    p.style(this._animateElement, {
      animationDuration: `${this._options.animationDuration}ms`
    });
  }
  _setAnimationDelay() {
    p.style(this._animateElement, {
      animationDelay: `${this._options.animationDelay}ms`
    });
  }
  _setAnimationRepeat() {
    p.style(this._animateElement, {
      animationIterationCount: this._options.animationRepeat === !0 ? "infinite" : this._options.animationRepeat
    });
  }
  _setAnimationInterval() {
    u.on(this._animateElement, "click", () => {
      this._clearAnimationClass(), setTimeout(() => {
        this._addAnimatedClass();
      }, this._options.animationInterval);
    });
  }
  _hideAnimateElement() {
    p.style(this._animateElement, { visibility: "hidden" });
  }
  _showAnimateElement() {
    p.style(this._animateElement, { visibility: "visible" });
  }
  _bindResetAnimationAfterFinish() {
    u.on(this._animateElement, "animationend", () => {
      this._clearAnimationClass();
    });
  }
  _bindTriggerOnEndCallback() {
    u.on(this._animateElement, "animationend", () => {
      this._callback(this._options.onEnd);
    });
  }
  _bindScrollEvents() {
    this._options.animationShowOnLoad || this._animateOnScroll(), u.on(window, "scroll", () => {
      this._animateOnScroll();
    });
  }
  _bindClickEvents() {
    u.on(this._element, "mousedown", () => {
      this._startAnimation();
    });
  }
  _bindHoverEvents() {
    u.one(this._element, "mouseover", () => {
      this._startAnimation();
    }), u.one(this._animateElement, "animationend", () => {
      setTimeout(() => {
        this._bindHoverEvents();
      }, 100);
    });
  }
  _callback(t) {
    t instanceof Function && t();
  }
  // Static
  static autoInit(t) {
    t._init();
  }
  static jQueryInterface(t) {
    new el(this[0], t).init();
  }
  static getInstance(t) {
    return I.getData(t, sn);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const nn = "ripple", xi = "te.ripple", tp = "rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%", ep = ["[data-te-ripple-init]"], Di = [0, 0, 0], ip = [
  { name: "primary", gradientColor: "#3B71CA" },
  { name: "secondary", gradientColor: "#9FA6B2" },
  { name: "success", gradientColor: "#14A44D" },
  { name: "danger", gradientColor: "#DC4C64" },
  { name: "warning", gradientColor: "#E4A11B" },
  { name: "info", gradientColor: "#54B4D3" },
  { name: "light", gradientColor: "#fbfbfb" },
  { name: "dark", gradientColor: "#262626" }
], or = 0.5, sp = {
  rippleCentered: !1,
  rippleColor: "",
  rippleColorDark: "",
  rippleDuration: "500ms",
  rippleRadius: 0,
  rippleUnbound: !1
}, np = {
  rippleCentered: "boolean",
  rippleColor: "string",
  rippleColorDark: "string",
  rippleDuration: "string",
  rippleRadius: "number",
  rippleUnbound: "boolean"
}, op = {
  ripple: "relative overflow-hidden inline-block align-bottom",
  rippleWave: "rounded-[50%] opacity-50 pointer-events-none absolute touch-none scale-0 transition-[transform,_opacity] ease-[cubic-bezier(0,0,0.15,1),_cubic-bezier(0,0,0.15,1)] z-[999]",
  unbound: "overflow-visible"
}, rp = {
  ripple: "string",
  rippleWave: "string",
  unbound: "string"
};
class _s {
  constructor(t, e, i) {
    this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._element && (I.setData(t, xi, this), p.addClass(this._element, this._classes.ripple)), this._clickHandler = this._createRipple.bind(this), this._rippleTimer = null, this._isMinWidthSet = !1, this._initialClasses = null, this.init();
  }
  // Getters
  static get NAME() {
    return nn;
  }
  // Public
  init() {
    this._addClickEvent(this._element);
  }
  dispose() {
    I.removeData(this._element, xi), u.off(this._element, "click", this._clickHandler), this._element = null, this._options = null;
  }
  // Private
  _autoInit(t) {
    ep.forEach((e) => {
      d.closest(t.target, e) && (this._element = d.closest(t.target, e));
    }), this._element.style.minWidth || (p.style(this._element, {
      "min-width": getComputedStyle(this._element).width
    }), this._isMinWidthSet = !0), this._initialClasses = [...this._element.classList], p.addClass(this._element, this._classes.ripple), this._options = this._getConfig(), this._createRipple(t);
  }
  _addClickEvent(t) {
    u.on(t, "mousedown", this._clickHandler);
  }
  _createRipple(t) {
    this._element.className.indexOf(this._classes.ripple) < 0 && p.addClass(this._element, this._classes.ripple);
    const { layerX: e, layerY: i } = t, n = e, o = i, r = this._element.offsetHeight, a = this._element.offsetWidth, l = this._durationToMsNumber(this._options.rippleDuration), c = {
      offsetX: this._options.rippleCentered ? r / 2 : n,
      offsetY: this._options.rippleCentered ? a / 2 : o,
      height: r,
      width: a
    }, h = this._getDiameter(c), _ = this._options.rippleRadius || h / 2, f = {
      delay: l * or,
      duration: l - l * or
    }, g = {
      left: this._options.rippleCentered ? `${a / 2 - _}px` : `${n - _}px`,
      top: this._options.rippleCentered ? `${r / 2 - _}px` : `${o - _}px`,
      height: `${this._options.rippleRadius * 2 || h}px`,
      width: `${this._options.rippleRadius * 2 || h}px`,
      transitionDelay: `0s, ${f.delay}ms`,
      transitionDuration: `${l}ms, ${f.duration}ms`
    }, m = L("div");
    this._createHTMLRipple({
      wrapper: this._element,
      ripple: m,
      styles: g
    }), this._removeHTMLRipple({ ripple: m, duration: l });
  }
  _createHTMLRipple({ wrapper: t, ripple: e, styles: i }) {
    Object.keys(i).forEach(
      (n) => e.style[n] = i[n]
    ), p.addClass(e, this._classes.rippleWave), e.setAttribute("data-te-ripple-ref", ""), this._addColor(e, t), this._toggleUnbound(t), this._appendRipple(e, t);
  }
  _removeHTMLRipple({ ripple: t, duration: e }) {
    this._rippleTimer && (clearTimeout(this._rippleTimer), this._rippleTimer = null), t && setTimeout(() => {
      t.classList.add("!opacity-0");
    }, 10), this._rippleTimer = setTimeout(() => {
      if (t && (t.remove(), this._element)) {
        d.find("[data-te-ripple-ref]", this._element).forEach(
          (n) => {
            n.remove();
          }
        ), this._isMinWidthSet && (p.style(this._element, { "min-width": "" }), this._isMinWidthSet = !1);
        const i = this._initialClasses ? this._addedNewRippleClasses(
          this._classes.ripple,
          this._initialClasses
        ) : this._classes.ripple.split(" ");
        p.removeClass(this._element, i);
      }
    }, e);
  }
  _addedNewRippleClasses(t, e) {
    return t.split(" ").filter(
      (i) => e.findIndex((n) => i === n) === -1
    );
  }
  _durationToMsNumber(t) {
    return Number(t.replace("ms", "").replace("s", "000"));
  }
  _getConfig(t = {}) {
    const e = p.getDataAttributes(this._element);
    return t = {
      ...sp,
      ...e,
      ...t
    }, M(nn, t, np), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...op,
      ...e,
      ...t
    }, M(nn, t, rp), t;
  }
  _getDiameter({ offsetX: t, offsetY: e, height: i, width: n }) {
    const o = e <= i / 2, r = t <= n / 2, a = (f, g) => Math.sqrt(f ** 2 + g ** 2), l = e === i / 2 && t === n / 2, c = {
      first: o === !0 && r === !1,
      second: o === !0 && r === !0,
      third: o === !1 && r === !0,
      fourth: o === !1 && r === !1
    }, h = {
      topLeft: a(t, e),
      topRight: a(n - t, e),
      bottomLeft: a(t, i - e),
      bottomRight: a(n - t, i - e)
    };
    let _ = 0;
    return l || c.fourth ? _ = h.topLeft : c.third ? _ = h.topRight : c.second ? _ = h.bottomRight : c.first && (_ = h.bottomLeft), _ * 2;
  }
  _appendRipple(t, e) {
    e.appendChild(t), setTimeout(() => {
      p.addClass(t, "opacity-0 scale-100");
    }, 50);
  }
  _toggleUnbound(t) {
    this._options.rippleUnbound === !0 ? p.addClass(t, this._classes.unbound) : p.removeClass(t, this._classes.unbound);
  }
  _addColor(t) {
    let e = this._options.rippleColor || "rgb(0,0,0)";
    (localStorage.theme === "dark" || !("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches) && (e = this._options.rippleColorDark || this._options.rippleColor);
    const i = ip.find(
      (r) => r.name === e.toLowerCase()
    ), n = i ? this._colorToRGB(i.gradientColor).join(",") : this._colorToRGB(e).join(","), o = tp.split("{{color}}").join(`${n}`);
    t.style.backgroundImage = `radial-gradient(circle, ${o})`;
  }
  _colorToRGB(t) {
    function e(o) {
      return o.length < 7 && (o = `#${o[1]}${o[1]}${o[2]}${o[2]}${o[3]}${o[3]}`), [
        parseInt(o.substr(1, 2), 16),
        parseInt(o.substr(3, 2), 16),
        parseInt(o.substr(5, 2), 16)
      ];
    }
    function i(o) {
      const r = document.body.appendChild(
        document.createElement("fictum")
      ), a = "rgb(1, 2, 3)";
      return r.style.color = a, r.style.color !== a || (r.style.color = o, r.style.color === a || r.style.color === "") ? Di : (o = getComputedStyle(r).color, document.body.removeChild(r), o);
    }
    function n(o) {
      return o = o.match(/[.\d]+/g).map((r) => +Number(r)), o.length = 3, o;
    }
    return t.toLowerCase() === "transparent" ? Di : t[0] === "#" ? e(t) : (t.indexOf("rgb") === -1 && (t = i(t)), t.indexOf("rgb") === 0 ? n(t) : Di);
  }
  // Static
  static autoInitial(t) {
    return function(e) {
      t._autoInit(e);
    };
  }
  static jQueryInterface(t) {
    return this.each(function() {
      return I.getData(this, xi) ? null : new _s(this, t);
    });
  }
  static getInstance(t) {
    return I.getData(t, xi);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
function q(s) {
  return s.getDate();
}
function is(s) {
  return s.getDay();
}
function Y(s) {
  return s.getMonth();
}
function R(s) {
  return s.getFullYear();
}
function ap(s, t, e) {
  const i = e.startDay, n = i > 0 ? 7 - i : 0, r = new Date(s, t).getDay() + n;
  return r >= 7 ? r - 7 : r;
}
function Mn(s) {
  return lp(s).getDate();
}
function lp(s) {
  return Dt(s.getFullYear(), s.getMonth() + 1, 0);
}
function Se() {
  return new Date();
}
function Z(s, t) {
  return tt(s, t * 12);
}
function tt(s, t) {
  const e = Dt(
    s.getFullYear(),
    s.getMonth() + t,
    s.getDate()
  ), i = q(s), n = q(e);
  return i !== n && e.setDate(0), e;
}
function ve(s, t) {
  return Dt(s.getFullYear(), s.getMonth(), s.getDate() + t);
}
function Dt(s, t, e) {
  const i = new Date(s, t, e);
  return s >= 0 && s < 100 && i.setFullYear(i.getFullYear() - 1900), i;
}
function rr(s) {
  const t = s.split("-"), e = t[0], i = t[1], n = t[2];
  return Dt(e, i, n);
}
function cp(s) {
  return !Number.isNaN(s.getTime());
}
function Oe(s, t) {
  return R(s) - R(t) || Y(s) - Y(t) || q(s) - q(t);
}
function le(s, t) {
  return s.setHours(0, 0, 0, 0), t.setHours(0, 0, 0, 0), s.getTime() === t.getTime();
}
function ss(s, t) {
  const i = R(s) - hp();
  return dp(i, t);
}
function dp(s, t) {
  return (s % t + t) % t;
}
function hp(s, t, e) {
  let i = 0;
  return e ? i = R(e) - s + 1 : t && (i = R(t)), i;
}
function ms(s, t, e, i, n, o) {
  const r = new Date();
  r.setHours(0, 0, 0, 0);
  const a = t && Oe(s, t) <= -1, l = e && Oe(s, e) >= 1, c = n && Oe(s, r) <= -1, h = o && Oe(s, r) >= 1, _ = i && i(s) === !1;
  return a || l || _ || c || h;
}
function il(s, t, e, i, n, o) {
  const r = new Date(), a = i && R(i), l = i && Y(i), c = e && R(e), h = e && Y(e), _ = R(r), f = Y(r), g = l && a && (t > a || t === a && s > l), m = h && c && (t < c || t === c && s < h), E = n && (t < _ || t === _ && s < f), C = o && (t > _ || t === _ && s > f);
  return g || m || E || C;
}
function Nn(s, t, e, i, n) {
  const o = t && R(t), r = e && R(e), a = R(new Date()), l = r && s > r, c = o && s < o, h = i && s < a, _ = n && s > a;
  return l || c || h || _;
}
function up(s, t, e, i, n, o, r, a) {
  const l = new Date();
  return l.setHours(0, 0, 0, 0), (s && o && Oe(o, l) < 0 || s) && (o = l), o && ei(
    t,
    o,
    e,
    i,
    n,
    o,
    r,
    a
  );
}
function pp(s, t, e, i, n, o, r, a) {
  const l = new Date();
  return l.setHours(0, 0, 0, 0), (s && n && Oe(n, l) < 0 || s) && (n = l), n && ei(
    t,
    n,
    e,
    i,
    n,
    o,
    r,
    a
  );
}
function ei(s, t, e, i, n, o, r, a) {
  return e === "days" ? R(s) === R(t) && Y(s) === Y(t) : e === "months" ? R(s) === R(t) : e === "years" ? R(t) >= a && R(t) <= r : !1;
}
const fp = "data-te-datepicker-modal-container-ref", _p = "data-te-datepicker-dropdown-container-ref", mp = "data-te-dropdown-backdrop-ref", gp = "data-te-datepicker-date-text-ref", ar = "data-te-datepicker-view-ref", bp = "data-te-datepicker-previous-button-ref", vp = "data-te-datepicker-next-button-ref", Ep = "data-te-datepicker-ok-button-ref", Tp = "data-te-datepicker-cancel-button-ref", Cp = "data-te-datepicker-clear-button-ref", Ap = "data-te-datepicker-view-change-button-ref";
function yp(s, t, e, i, n, o, r, a, l, c) {
  const h = Y(s), _ = R(s), f = q(s), g = is(s), m = L("div"), E = `
        ${lr(
    s,
    h,
    _,
    t,
    e,
    i,
    n,
    o,
    r,
    a,
    c
  )}
    `, C = `
      ${Op(f, g, h, n, c)}
      ${lr(
    s,
    h,
    _,
    t,
    e,
    i,
    n,
    o,
    r,
    a,
    c
  )}
    `;
  return n.inline ? (p.addClass(m, c.datepickerDropdownContainer), m.setAttribute(_p, l), m.innerHTML = E) : (p.addClass(m, c.modalContainer), m.setAttribute(fp, l), m.innerHTML = C), m;
}
function wp(s) {
  const t = L("div");
  return p.addClass(t, s), t.setAttribute(mp, ""), t;
}
function Op(s, t, e, i, n) {
  return `
      <div class="${n.datepickerHeader}">
        <div class="${n.datepickerTitle}">
          <span class="${n.datepickerTitleText}">${i.title}</span>
        </div>
        <div class="${n.datepickerDate}">
          <span class="${n.datepickerDateText}" ${gp} >${i.weekdaysShort[t]}, ${i.monthsShort[e]} ${s}</span>
        </div>
      </div>
    `;
}
function lr(s, t, e, i, n, o, r, a, l, c, h) {
  let _;
  return r.inline ? _ = `
    <div class="${h.datepickerMain}">
      ${dr(t, e, r, h)}
      <div class="${h.datepickerView}" ${ar} tabindex="0">
        ${cr(
    s,
    e,
    i,
    n,
    o,
    r,
    a,
    l,
    c,
    h
  )}
      </div>
    </div>
  ` : _ = `
    <div class="${h.datepickerMain}">
      ${dr(t, e, r, h)}
      <div class="${h.datepickerView}" ${ar} tabindex="0">
        ${cr(
    s,
    e,
    i,
    n,
    o,
    r,
    a,
    l,
    c,
    h
  )}
      </div>
      ${kp(r, h)}
    </div>
  `, _;
}
function cr(s, t, e, i, n, o, r, a, l, c) {
  let h;
  return o.view === "days" ? h = ns(s, e, o, c) : o.view === "months" ? h = os(
    t,
    i,
    n,
    o,
    r,
    c
  ) : h = rs(
    s,
    i,
    o,
    a,
    l,
    c
  ), h;
}
function dr(s, t, e, i) {
  return `
    <div class="${i.datepickerDateControls}">
      <button class="${i.datepickerViewChangeButton}" aria-label="${e.switchToMultiYearViewLabel}" ${Ap}>
        ${e.monthsFull[s]} ${t} ${Ot(
    e,
    i
  )}
      </button>
      <div class="${i.datepickerArrowControls}">
        <button class="${i.datepickerPreviousButton}" aria-label="${e.prevMonthLabel}" ${bp}>${e.changeMonthIconTemplate}</button>
        <button class="${i.datepickerNextButton}" aria-label="${e.nextMonthLabel}" ${vp}>${e.changeMonthIconTemplate}</button>
      </div>
    </div>
    `;
}
function Ot(s, t) {
  return `
  <span class="${t.datepickerViewChangeIcon}">
  ${s.viewChangeIconTemplate}
  </span>
  `;
}
function kp(s, t) {
  const e = `<button class="${t.datepickerFooterBtn}" aria-label="${s.okBtnLabel}" ${Ep}>${s.okBtnText}</button>`, i = `<button class="${t.datepickerFooterBtn}" aria-label="${s.cancelBtnLabel}" ${Tp}>${s.cancelBtnText}</button>`, n = `<button class="${t.datepickerFooterBtn} ${t.datepickerClearBtn}" aria-label="${s.clearBtnLabel}" ${Cp}>${s.clearBtnText}</button>`;
  return `
        <div class="${t.datepickerFooter}">
          
        ${s.removeClearBtn ? "" : n}
        ${s.removeCancelBtn ? "" : i}
        ${s.removeOkBtn ? "" : e}
        </div>
      `;
}
function ns(s, t, e, i) {
  const n = Sp(s, t, e), r = `
      <tr>
        ${e.weekdaysNarrow.map((l, c) => `<th class="${i.datepickerDayHeading}" scope="col" aria-label="${e.weekdaysFull[c]}">${l}</th>`).join("")}
      </tr>
    `, a = n.map((l) => `
        <tr>
          ${l.map((c) => `
              <td
              class="${i.datepickerCell} ${i.datepickerCellSmall}"
              data-te-date="${R(c.date)}-${Y(
    c.date
  )}-${q(c.date)}"
              aria-label="${c.date}"
              aria-selected="${c.isSelected}"
              ${c.isSelected ? "data-te-datepicker-cell-selected" : ""}
              ${!c.currentMonth || c.disabled ? "data-te-datepicker-cell-disabled" : ""}
              ${c.isToday ? "data-te-datepicker-cell-current" : ""}
              >
                <div
                  class="${i.datepickerCellContent} ${i.datepickerCellContentSmall}"
                  style="${c.currentMonth ? "display: block" : "display: none"}"
                  >
                  ${c.dayNumber}
                  </div>
              </td>
            `).join("")}
        </tr>
      `).join("");
  return `
      <table class="${i.datepickerTable}">
        <thead>
          ${r}
        </thead>
        <tbody>
         ${a}
        </tbody>
      </table>
    `;
}
function Sp(s, t, e) {
  const i = [], n = Y(s), o = Y(tt(s, -1)), r = Y(tt(s, 1)), a = R(s), l = ap(a, n, e), c = Mn(s), h = Mn(tt(s, -1)), _ = 7;
  let f = 1, g = !1;
  for (let m = 1; m < _; m++) {
    const E = [];
    if (m === 1) {
      const C = h - l + 1;
      for (let v = C; v <= h; v++) {
        const T = Dt(a, o, v);
        E.push({
          date: T,
          currentMonth: g,
          isSelected: t && le(T, t),
          isToday: le(T, Se()),
          dayNumber: q(T)
        });
      }
      g = !0;
      const b = _ - E.length;
      for (let v = 0; v < b; v++) {
        const T = Dt(a, n, f);
        E.push({
          date: T,
          currentMonth: g,
          isSelected: t && le(T, t),
          isToday: le(T, Se()),
          dayNumber: q(T),
          disabled: ms(
            T,
            e.min,
            e.max,
            e.filter,
            e.disablePast,
            e.disableFuture
          )
        }), f++;
      }
    } else
      for (let C = 1; C < 8; C++) {
        f > c && (f = 1, g = !1);
        const b = Dt(
          a,
          g ? n : r,
          f
        );
        E.push({
          date: b,
          currentMonth: g,
          isSelected: t && le(b, t),
          isToday: le(b, Se()),
          dayNumber: q(b),
          disabled: ms(
            b,
            e.min,
            e.max,
            e.filter,
            e.disablePast,
            e.disableFuture
          )
        }), f++;
      }
    i.push(E);
  }
  return i;
}
function os(s, t, e, i, n, o) {
  const r = xp(i, n), a = Y(Se()), l = R(Se()), c = `
      ${r.map((h) => `
          <tr>
            ${h.map((_) => {
    const f = i.monthsShort.indexOf(_);
    return `
                <td class="${o.datepickerCell} ${o.datepickerCellLarge}"
                ${il(
      f,
      s,
      i.min,
      i.max,
      i.disablePast,
      i.disableFuture
    ) ? "data-te-datepicker-cell-disabled" : ""}
                
                data-te-month="${f}" data-te-year="${s}" aria-label="${_}, ${s}"
                ${f === e && s === t ? "data-te-datepicker-cell-selected" : ""}
                ${f === a && s === l ? "data-te-datepicker-cell-current" : ""}" data-te-month="${f}" data-te-year="${s}" aria-label="${_}, ${s}">
                  <div class="${o.datepickerCellContent} ${o.datepickerCellContentLarge}">${_}</div>
                </td>
              `;
  }).join("")}
          </tr>
        `).join("")}
    `;
  return `
      <table class="${o.datepickerTable}">
        <tbody>
         ${c}
        </tbody>
      </table>
    `;
}
function xp(s, t) {
  const e = [];
  let i = [];
  for (let n = 0; n < s.monthsShort.length; n++)
    if (i.push(s.monthsShort[n]), i.length === t) {
      const o = i;
      e.push(o), i = [];
    }
  return e;
}
function rs(s, t, e, i, n, o) {
  const r = Dp(s, i, n), a = R(Se()), l = `
    ${r.map((c) => `
        <tr>
          ${c.map((h) => `
              <td class="${o.datepickerCell} ${o.datepickerCellLarge}"  aria-label="${h}" data-te-year="${h}"
              ${Nn(
    h,
    e.min,
    e.max,
    e.disablePast,
    e.disableFuture
  ) ? "data-te-datepicker-cell-disabled" : ""}
              ${h === t ? "data-te-datepicker-cell-selected" : ""}
              ${h === a ? "data-te-datepicker-cell-current" : ""}
              >
                <div class="${o.datepickerCellContent} ${o.datepickerCellContentLarge}">${h}</div>
              </td>
            `).join("")}
        </tr>
      `).join("")}
  `;
  return `
      <table class="${o.datepickerTable}">
        <tbody>
        ${l}
        </tbody>
      </table>
    `;
}
function Dp(s, t, e) {
  const i = [], n = R(s), o = ss(s, t), r = n - o;
  let a = [];
  for (let l = 0; l < t; l++)
    if (a.push(r + l), a.length === e) {
      const c = a;
      i.push(c), a = [];
    }
  return i;
}
function Ip(s, t) {
  return `
    <button id="${s}" type="button" class="${t}" data-te-datepicker-toggle-button-ref data-te-datepicker-toggle-ref>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path fill-rule="evenodd" d="M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z" clip-rule="evenodd" />
      </svg>  
    </button>
  `;
}
const xe = 37, it = 38, De = 39, U = 40, Ie = 36, $e = 35, on = 33, rn = 34, nt = 13, as = 32, ws = 27, li = 9, $p = 8, Lp = 46, ut = 24, Ii = 4, $i = 4, an = "datepicker", ls = "te.datepicker", Os = `.${ls}`, Mp = ".data-api", Np = `close${Os}`, Rp = `open${Os}`, Pp = `dateChange${Os}`, Li = `click${Os}${Mp}`, sl = "data-te-datepicker-modal-container-ref", nl = "data-te-datepicker-dropdown-container-ref", Mi = "[data-te-datepicker-toggle-ref]", Bp = `[${sl}]`, Hp = `[${nl}]`, Vp = "[data-te-datepicker-view-change-button-ref]", Wp = "[data-te-datepicker-previous-button-ref]", Fp = "[data-te-datepicker-next-button-ref]", Yp = "[data-te-datepicker-ok-button-ref]", jp = "[data-te-datepicker-cancel-button-ref]", Kp = "[data-te-datepicker-clear-button-ref]", Up = "[data-te-datepicker-view-ref]", zp = "[data-te-datepicker-toggle-button-ref]", Xp = "[data-te-datepicker-date-text-ref]", Gp = "[data-te-dropdown-backdrop-ref]", qp = "animate-[fade-in_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none", Qp = "animate-[fade-out_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none", Zp = "animate-[fade-in_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none", Jp = "animate-[fade-out_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none", tf = "flex flex-col fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[328px] h-[512px] bg-white rounded-[0.6rem] shadow-lg z-[1066] xs:max-md:landscape:w-[475px] xs:max-md:landscape:h-[360px] xs:max-md:landscape:flex-row dark:bg-zinc-700", ef = "w-full h-full fixed top-0 right-0 left-0 bottom-0 bg-black/40 z-[1065]", sf = "relative h-full", nf = "xs:max-md:landscape:h-full h-[120px] px-6 bg-primary flex flex-col rounded-t-lg dark:bg-zinc-800", of = "h-8 flex flex-col justify-end", rf = "text-[10px] font-normal uppercase tracking-[1.7px] text-white", af = "xs:max-md:landscape:mt-24 h-[72px] flex flex-col justify-end", lf = "text-[34px] font-normal text-white", cf = "outline-none px-3", df = "px-3 pt-2.5 pb-0 flex justify-between text-black/[64]", hf = "flex items-center outline-none p-2.5 text-neutral-500 font-medium text-[0.9rem] rounded-xl shadow-none bg-transparent m-0 border-none hover:bg-neutral-200 focus:bg-neutral-200  dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10", uf = "mt-2.5", pf = "p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent mr-6 hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:mx-auto", ff = "p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:rotate-180 [&>svg]:mx-auto", _f = "h-14 flex absolute w-full bottom-0 justify-end items-center px-3", mf = "outline-none bg-white text-primary border-none cursor-pointer py-0 px-2.5 uppercase text-[0.8rem] leading-10 font-medium h-10 tracking-[.1rem] rounded-[10px] mb-2.5 hover:bg-neutral-200 focus:bg-neutral-200 dark:bg-transparent dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10", gf = "mr-auto", bf = "w-10 h-10 text-center text-[12px] font-normal dark:text-white", vf = "text-center data-[te-datepicker-cell-disabled]:text-neutral-300 data-[te-datepicker-cell-disabled]:cursor-default data-[te-datepicker-cell-disabled]:pointer-events-none data-[te-datepicker-cell-disabled]:hover:cursor-default hover:cursor-pointer group", Ef = "w-10 h-10 xs:max-md:landscape:w-8 xs:max-md:landscape:h-8", Tf = "w-[76px] h-[42px]", Cf = "mx-auto group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-neutral-300 group-[[data-te-datepicker-cell-selected]]:bg-primary group-[[data-te-datepicker-cell-selected]]:text-white group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-neutral-100 group-[[data-te-datepicker-cell-focused]]:data-[te-datepicker-cell-selected]:bg-primary group-[[data-te-datepicker-cell-current]]:border-solid group-[[data-te-datepicker-cell-current]]:border-black group-[[data-te-datepicker-cell-current]]:border dark:group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-white/10 dark:group-[[data-te-datepicker-cell-current]]:border-white dark:text-white dark:group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-white/10 dark:group-[[data-te-datepicker-cell-disabled]]:text-neutral-500", Af = "w-9 h-9 leading-9 rounded-[50%] text-[13px]", yf = "w-[72px] h-10 leading-10 py-[1px] px-0.5 rounded-[999px]", wf = "mx-auto w-[304px]", Of = "flex items-center justify-content-center [&>svg]:w-5 [&>svg]:h-5 absolute outline-none border-none bg-transparent right-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2 hover:text-primary focus:text-primary dark:hover:text-primary-400 dark:focus:text-primary-400 dark:text-neutral-200", kf = "inline-block pointer-events-none ml-[3px] [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-neutral-500 dark:[&>svg]:fill-white", Sf = "w-[328px] h-[380px] bg-white rounded-lg shadow-[0px_2px_15px_-3px_rgba(0,0,0,.07),_0px_10px_20px_-2px_rgba(0,0,0,.04)] z-[1066] dark:bg-zinc-700", xf = {
  title: "Select date",
  container: "body",
  disablePast: !1,
  disableFuture: !1,
  monthsFull: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  monthsShort: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  weekdaysFull: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  weekdaysNarrow: ["S", "M", "T", "W", "T", "F", "S"],
  okBtnText: "Ok",
  clearBtnText: "Clear",
  cancelBtnText: "Cancel",
  okBtnLabel: "Confirm selection",
  clearBtnLabel: "Clear selection",
  cancelBtnLabel: "Cancel selection",
  nextMonthLabel: "Next month",
  prevMonthLabel: "Previous month",
  nextYearLabel: "Next year",
  prevYearLabel: "Previous year",
  changeMonthIconTemplate: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
  </svg>
  `,
  nextMultiYearLabel: "Next 24 years",
  prevMultiYearLabel: "Previous 24 years",
  switchToMultiYearViewLabel: "Choose year and month",
  switchToMonthViewLabel: "Choose date",
  switchToDayViewLabel: "Choose date",
  startDate: null,
  startDay: 0,
  format: "dd/mm/yyyy",
  view: "days",
  viewChangeIconTemplate: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="0" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
  </svg>
  `,
  min: null,
  max: null,
  filter: null,
  inline: !1,
  toggleButton: !0,
  disableToggleButton: !1,
  disableInput: !1,
  animations: !0,
  confirmDateOnSelect: !1,
  removeOkBtn: !1,
  removeCancelBtn: !1,
  removeClearBtn: !1
}, Df = {
  title: "string",
  container: "string",
  disablePast: "boolean",
  disableFuture: "boolean",
  monthsFull: "array",
  monthsShort: "array",
  weekdaysFull: "array",
  weekdaysShort: "array",
  weekdaysNarrow: "array",
  okBtnText: "string",
  clearBtnText: "string",
  cancelBtnText: "string",
  okBtnLabel: "string",
  clearBtnLabel: "string",
  cancelBtnLabel: "string",
  nextMonthLabel: "string",
  prevMonthLabel: "string",
  nextYearLabel: "string",
  prevYearLabel: "string",
  nextMultiYearLabel: "string",
  prevMultiYearLabel: "string",
  changeMonthIconTemplate: "string",
  switchToMultiYearViewLabel: "string",
  switchToMonthViewLabel: "string",
  switchToDayViewLabel: "string",
  startDate: "(null|string|date)",
  startDay: "number",
  format: "string",
  view: "string",
  viewChangeIconTemplate: "string",
  min: "(null|string|date)",
  max: "(null|string|date)",
  filter: "(null|function)",
  inline: "boolean",
  toggleButton: "boolean",
  disableToggleButton: "boolean",
  disableInput: "boolean",
  animations: "boolean",
  confirmDateOnSelect: "boolean",
  removeOkBtn: "boolean",
  removeCancelBtn: "boolean",
  removeClearBtn: "boolean"
}, If = {
  fadeIn: qp,
  fadeOut: Qp,
  fadeInShort: Zp,
  fadeOutShort: Jp,
  modalContainer: tf,
  datepickerBackdrop: ef,
  datepickerMain: sf,
  datepickerHeader: nf,
  datepickerTitle: of,
  datepickerTitleText: rf,
  datepickerDate: af,
  datepickerDateText: lf,
  datepickerView: cf,
  datepickerDateControls: df,
  datepickerViewChangeButton: hf,
  datepickerViewChangeIcon: kf,
  datepickerArrowControls: uf,
  datepickerPreviousButton: pf,
  datepickerNextButton: ff,
  datepickerFooter: _f,
  datepickerFooterBtn: mf,
  datepickerClearBtn: gf,
  datepickerDayHeading: bf,
  datepickerCell: vf,
  datepickerCellSmall: Ef,
  datepickerCellLarge: Tf,
  datepickerCellContent: Cf,
  datepickerCellContentSmall: Af,
  datepickerCellContentLarge: yf,
  datepickerTable: wf,
  datepickerToggleButton: Of,
  datepickerDropdownContainer: Sf
}, $f = {
  fadeIn: "string",
  fadeOut: "string",
  fadeInShort: "string",
  fadeOutShort: "string",
  modalContainer: "string",
  datepickerBackdrop: "string",
  datepickerMain: "string",
  datepickerHeader: "string",
  datepickerTitle: "string",
  datepickerTitleText: "string",
  datepickerDate: "string",
  datepickerDateText: "string",
  datepickerView: "string",
  datepickerDateControls: "string",
  datepickerViewChangeButton: "string",
  datepickerArrowControls: "string",
  datepickerPreviousButton: "string",
  datepickerNextButton: "string",
  datepickerFooter: "string",
  datepickerFooterBtn: "string",
  datepickerClearBtn: "string",
  datepickerDayHeading: "string",
  datepickerCell: "string",
  datepickerCellSmall: "string",
  datepickerCellLarge: "string",
  datepickerCellContent: "string",
  datepickerCellContentSmall: "string",
  datepickerCellContentLarge: "string",
  datepickerTable: "string",
  datepickerToggleButton: "string",
  datepickerDropdownContainer: "string"
};
class Lg {
  constructor(t, e, i) {
    this._element = t, this._input = d.findOne("input", this._element), this._options = this._getConfig(e), this._classes = this._getClasses(i), this._activeDate = new Date(), this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this._headerDate = null, this._headerYear = null, this._headerMonth = null, this._view = this._options.view, this._popper = null, this._focusTrap = null, this._isOpen = !1, this._toggleButtonId = kt("datepicker-toggle-"), this._animations = !window.matchMedia("(prefers-reduced-motion: reduce)").matches && this._options.animations, this._scrollBar = new ai(), this._element && I.setData(t, ls, this), this._init(), this.toggleButton && this._options.disableToggle && (this.toggleButton.disabled = "true"), this._options.disableInput && (this._input.disabled = "true");
  }
  // Getters
  static get NAME() {
    return an;
  }
  get container() {
    return d.findOne(
      `[${sl}='${this._toggleButtonId}']`
    ) || d.findOne(
      `[${nl}='${this._toggleButtonId}']`
    );
  }
  get options() {
    return this._options;
  }
  get activeCell() {
    let t;
    return this._view === "days" && (t = this._getActiveDayCell()), this._view === "months" && (t = this._getActiveMonthCell()), this._view === "years" && (t = this._getActiveYearCell()), t;
  }
  get activeDay() {
    return q(this._activeDate);
  }
  get activeMonth() {
    return Y(this._activeDate);
  }
  get activeYear() {
    return R(this._activeDate);
  }
  get firstYearInView() {
    return this.activeYear - ss(this._activeDate, ut);
  }
  get lastYearInView() {
    return this.firstYearInView + ut - 1;
  }
  get viewChangeButton() {
    return d.findOne(Vp, this.container);
  }
  get previousButton() {
    return d.findOne(Wp, this.container);
  }
  get nextButton() {
    return d.findOne(Fp, this.container);
  }
  get okButton() {
    return d.findOne(Yp, this.container);
  }
  get cancelButton() {
    return d.findOne(jp, this.container);
  }
  get clearButton() {
    return d.findOne(Kp, this.container);
  }
  get datesContainer() {
    return d.findOne(Up, this.container);
  }
  get toggleButton() {
    return d.findOne(zp, this._element);
  }
  update(t = {}) {
    this._options = this._getConfig({ ...this._options, ...t });
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._element);
    if (t = {
      ...xf,
      ...e,
      ...t
    }, M(an, t, Df), t.max && typeof t.max == "string" && (t.max = new Date(t.max)), t.min && typeof t.min == "string" && (t.min = new Date(t.min)), t.startDay && t.startDay !== 0) {
      const i = this._getNewDaysOrderArray(t);
      t.weekdaysNarrow = i;
    }
    return t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...If,
      ...e,
      ...t
    }, M(an, t, $f), t;
  }
  _getContainer() {
    return d.findOne(this._options.container);
  }
  _getNewDaysOrderArray(t) {
    const e = t.startDay, i = t.weekdaysNarrow;
    return i.slice(e).concat(i.slice(0, e));
  }
  _init() {
    !this.toggleButton && this._options.toggleButton && (this._appendToggleButton(), (this._input.readOnly || this._input.disabled) && (this.toggleButton.style.pointerEvents = "none")), this._listenToUserInput(), this._listenToToggleClick(), this._listenToToggleKeydown();
  }
  _appendToggleButton() {
    const t = Ip(
      this._toggleButtonId,
      this._classes.datepickerToggleButton
    );
    this._element.insertAdjacentHTML("beforeend", t);
  }
  open() {
    if (this._input.readOnly || this._input.disabled)
      return;
    const t = u.trigger(this._element, Rp);
    if (this._isOpen || t.defaultPrevented)
      return;
    this._setInitialDate();
    const e = wp(this._classes.datepickerBackdrop), i = yp(
      this._activeDate,
      this._selectedDate,
      this._selectedYear,
      this._selectedMonth,
      this._options,
      $i,
      ut,
      Ii,
      this._toggleButtonId,
      this._classes
    );
    this._options.inline ? this._openDropdown(i) : (this._openModal(e, i), this._scrollBar.hide()), this._animations && (p.addClass(this.container, this._classes.fadeIn), p.addClass(e, this._classes.fadeInShort)), this._setFocusTrap(this.container), this._listenToDateSelection(), this._addControlsListeners(), this._updateControlsDisabledState(), this._listenToEscapeClick(), this._listenToKeyboardNavigation(), this._listenToDatesContainerFocus(), this._listenToDatesContainerBlur(), this._asyncFocusDatesContainer(), this._updateViewControlsAndAttributes(this._view), this._isOpen = !0, setTimeout(() => {
      this._listenToOutsideClick();
    }, 0);
  }
  _openDropdown(t) {
    this._popper = Be(this._input, t, {
      placement: "bottom-start"
    }), this._getContainer().appendChild(t);
  }
  _openModal(t, e) {
    const i = this._getContainer();
    i.appendChild(t), i.appendChild(e);
  }
  _setFocusTrap(t) {
    this._focusTrap = new ui(t, {
      event: "keydown",
      condition: (e) => e.key === "Tab"
    }), this._focusTrap.trap();
  }
  _listenToUserInput() {
    u.on(this._input, "input", (t) => {
      this._handleUserInput(t.target.value);
    });
  }
  _listenToToggleClick() {
    u.on(
      this._element,
      Li,
      Mi,
      (t) => {
        t.preventDefault(), this.open();
      }
    );
  }
  _listenToToggleKeydown() {
    u.on(
      this._element,
      "keydown",
      Mi,
      (t) => {
        t.keyCode === nt && !this._isOpen && this.open();
      }
    );
  }
  _listenToDateSelection() {
    u.on(this.datesContainer, "click", (t) => {
      this._handleDateSelection(t);
    });
  }
  _handleDateSelection(t) {
    const e = t.target.nodeName === "DIV" ? t.target.parentNode.dataset : t.target.dataset, i = t.target.nodeName === "DIV" ? t.target.parentNode : t.target;
    if (e.teDate && this._pickDay(e.teDate, i), e.teMonth && e.teYear) {
      const n = parseInt(e.teMonth, 10), o = parseInt(e.teYear, 10);
      this._pickMonth(n, o);
    }
    if (e.teYear && !e.teMonth) {
      const n = parseInt(e.teYear, 10);
      this._pickYear(n);
    }
    this._options.inline || this._updateHeaderDate(
      this._activeDate,
      this._options.monthsShort,
      this._options.weekdaysShort
    );
  }
  _updateHeaderDate(t, e, i) {
    const n = d.findOne(
      Xp,
      this.container
    ), o = Y(t), r = q(t), a = is(t);
    n.innerHTML = `${i[a]}, ${e[o]} ${r}`;
  }
  _addControlsListeners() {
    u.on(this.nextButton, "click", () => {
      this._view === "days" ? this.nextMonth() : this._view === "years" ? this.nextYears() : this.nextYear(), this._updateControlsDisabledState();
    }), u.on(this.previousButton, "click", () => {
      this._view === "days" ? this.previousMonth() : this._view === "years" ? this.previousYears() : this.previousYear(), this._updateControlsDisabledState();
    }), u.on(this.viewChangeButton, "click", () => {
      this._view === "days" ? this._changeView("years") : (this._view === "years" || this._view === "months") && this._changeView("days");
    }), this._options.inline || this._listenToFooterButtonsClick();
  }
  _listenToFooterButtonsClick() {
    u.on(this.okButton, "click", () => this.handleOk()), u.on(this.cancelButton, "click", () => this.handleCancel()), u.on(this.clearButton, "click", () => this.handleClear());
  }
  _listenToOutsideClick() {
    u.on(document, Li, (t) => {
      const e = t.target === this.container, i = this.container && this.container.contains(t.target);
      !e && !i && this.close();
    });
  }
  _listenToEscapeClick() {
    u.on(document, "keydown", (t) => {
      t.keyCode === ws && this._isOpen && this.close();
    });
  }
  _listenToKeyboardNavigation() {
    u.on(this.datesContainer, "keydown", (t) => {
      this._handleKeydown(t);
    });
  }
  _listenToDatesContainerFocus() {
    u.on(this.datesContainer, "focus", () => {
      this._focusActiveCell(this.activeCell);
    });
  }
  _listenToDatesContainerBlur() {
    u.on(this.datesContainer, "blur", () => {
      this._removeCurrentFocusStyles();
    });
  }
  _handleKeydown(t) {
    this._view === "days" && this._handleDaysViewKeydown(t), this._view === "months" && this._handleMonthsViewKeydown(t), this._view === "years" && this._handleYearsViewKeydown(t);
  }
  _handleDaysViewKeydown(t) {
    const e = this._activeDate, i = this.activeCell;
    switch (t.keyCode) {
      case xe:
        this._activeDate = ve(this._activeDate, F() ? 1 : -1);
        break;
      case De:
        this._activeDate = ve(this._activeDate, F() ? -1 : 1);
        break;
      case it:
        this._activeDate = ve(this._activeDate, -7);
        break;
      case U:
        this._activeDate = ve(this._activeDate, 7);
        break;
      case Ie:
        this._activeDate = ve(
          this._activeDate,
          1 - q(this._activeDate)
        );
        break;
      case $e:
        this._activeDate = ve(
          this._activeDate,
          Mn(this._activeDate) - q(this._activeDate)
        );
        break;
      case on:
        this._activeDate = tt(this._activeDate, -1);
        break;
      case rn:
        this._activeDate = tt(this._activeDate, 1);
        break;
      case nt:
      case as:
        this._selectDate(this._activeDate), this._handleDateSelection(t), t.preventDefault();
        return;
      default:
        return;
    }
    ei(
      e,
      this._activeDate,
      this._view,
      ut,
      this._options.min,
      this._options.max
    ) || this._changeView("days"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();
  }
  _asyncFocusDatesContainer() {
    setTimeout(() => {
      this.datesContainer.focus();
    }, 0);
  }
  _focusActiveCell(t) {
    t && t.setAttribute("data-te-datepicker-cell-focused", "");
  }
  _removeHighlightFromCell(t) {
    t && t.removeAttribute("data-te-datepicker-cell-focused");
  }
  _getActiveDayCell() {
    const t = d.find("td", this.datesContainer);
    return Array.from(t).find((i) => {
      const n = rr(i.dataset.teDate);
      return le(n, this._activeDate);
    });
  }
  _handleMonthsViewKeydown(t) {
    const e = this._activeDate, i = this.activeCell;
    switch (t.keyCode) {
      case xe:
        this._activeDate = tt(this._activeDate, F() ? 1 : -1);
        break;
      case De:
        this._activeDate = tt(this._activeDate, F() ? -1 : 1);
        break;
      case it:
        this._activeDate = tt(this._activeDate, -4);
        break;
      case U:
        this._activeDate = tt(this._activeDate, 4);
        break;
      case Ie:
        this._activeDate = tt(this._activeDate, -this.activeMonth);
        break;
      case $e:
        this._activeDate = tt(this._activeDate, 11 - this.activeMonth);
        break;
      case on:
        this._activeDate = Z(this._activeDate, -1);
        break;
      case rn:
        this._activeDate = Z(this._activeDate, 1);
        break;
      case nt:
      case as:
        this._selectMonth(this.activeMonth);
        return;
      default:
        return;
    }
    ei(
      e,
      this._activeDate,
      this._view,
      ut,
      this._options.min,
      this._options.max
    ) || this._changeView("months"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();
  }
  _getActiveMonthCell() {
    const t = d.find("td", this.datesContainer);
    return Array.from(t).find((i) => {
      const n = parseInt(i.dataset.teYear, 10), o = parseInt(i.dataset.teMonth, 10);
      return n === this.activeYear && o === this.activeMonth;
    });
  }
  _handleYearsViewKeydown(t) {
    const e = this._activeDate, i = this.activeCell, n = 4, o = 24;
    switch (t.keyCode) {
      case xe:
        this._activeDate = Z(this._activeDate, F() ? 1 : -1);
        break;
      case De:
        this._activeDate = Z(this._activeDate, F() ? -1 : 1);
        break;
      case it:
        this._activeDate = Z(this._activeDate, -n);
        break;
      case U:
        this._activeDate = Z(this._activeDate, n);
        break;
      case Ie:
        this._activeDate = Z(
          this._activeDate,
          -ss(this._activeDate, o)
        );
        break;
      case $e:
        this._activeDate = Z(
          this._activeDate,
          o - ss(this._activeDate, o) - 1
        );
        break;
      case on:
        this._activeDate = Z(this._activeDate, -o);
        break;
      case rn:
        this._activeDate = Z(this._activeDate, o);
        break;
      case nt:
      case as:
        this._selectYear(this.activeYear);
        return;
      default:
        return;
    }
    ei(
      e,
      this._activeDate,
      this._view,
      ut,
      this._options.min,
      this._options.max
    ) || this._changeView("years"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();
  }
  _getActiveYearCell() {
    const t = d.find("td", this.datesContainer);
    return Array.from(t).find((i) => parseInt(i.dataset.teYear, 10) === this.activeYear);
  }
  _setInitialDate() {
    this._input.value ? this._handleUserInput(this._input.value) : this._options.startDate ? this._activeDate = new Date(this._options.startDate) : this._activeDate = new Date();
  }
  close() {
    const t = u.trigger(this._element, Np);
    !this._isOpen || t.defaultPrevented || (this._removeDatepickerListeners(), this._animations && p.addClass(this.container, this._classes.fadeOut), this._options.inline ? this._closeDropdown() : this._closeModal(), this._isOpen = !1, this._view = this._options.view, this.toggleButton ? this.toggleButton.focus() : this._input.focus());
  }
  _closeDropdown() {
    const t = d.findOne(Hp);
    window.matchMedia("(prefers-reduced-motion: reduce)").matches && (t && document.body.removeChild(t), this._popper && this._popper.destroy()), t.addEventListener("animationend", () => {
      t && document.body.removeChild(t), this._popper && this._popper.destroy();
    }), this._removeFocusTrap();
  }
  _closeModal() {
    const t = d.findOne(Gp), e = d.findOne(Bp);
    !e || !t || (this._animations ? (p.addClass(t, this._classes.fadeOutShort), t.addEventListener("animationend", () => {
      this._removePicker(t, e), this._scrollBar.reset();
    })) : (this._removePicker(t, e), this._scrollBar.reset()));
  }
  _removePicker(t, e) {
    const i = this._getContainer();
    i.removeChild(t), i.removeChild(e);
  }
  _removeFocusTrap() {
    this._focusTrap && (this._focusTrap.disable(), this._focusTrap = null);
  }
  _removeDatepickerListeners() {
    u.off(this.nextButton, "click"), u.off(this.previousButton, "click"), u.off(this.viewChangeButton, "click"), u.off(this.okButton, "click"), u.off(this.cancelButton, "click"), u.off(this.clearButton, "click"), u.off(this.datesContainer, "click"), u.off(this.datesContainer, "keydown"), u.off(this.datesContainer, "focus"), u.off(this.datesContainer, "blur"), u.off(document, Li);
  }
  dispose() {
    this._isOpen && this.close(), this._removeInputAndToggleListeners();
    const t = d.findOne(
      `#${this._toggleButtonId}`
    );
    t && this._element.removeChild(t), I.removeData(this._element, ls), this._element = null, this._input = null, this._options = null, this._activeDate = null, this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this._headerDate = null, this._headerYear = null, this._headerMonth = null, this._view = null, this._popper = null, this._focusTrap = null;
  }
  _removeInputAndToggleListeners() {
    u.off(this._input, "input"), u.off(
      this._element,
      Li,
      Mi
    ), u.off(this._element, "keydown", Mi);
  }
  handleOk() {
    this._confirmSelection(this._headerDate), this.close();
  }
  _selectDate(t, e = this.activeCell) {
    const { min: i, max: n, filter: o, disablePast: r, disableFuture: a } = this._options;
    ms(t, i, n, o, r, a) || (this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._selectedDate = t, this._selectedYear = R(t), this._selectedMonth = Y(t), this._headerDate = t, (this._options.inline || this.options.confirmDateOnSelect) && (this._confirmSelection(t), this.close()));
  }
  _selectYear(t, e = this.activeCell) {
    this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._headerYear = t, this._asyncChangeView("months");
  }
  _selectMonth(t, e = this.activeCell) {
    this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._headerMonth = t, this._asyncChangeView("days");
  }
  _removeSelectedStyles(t) {
    t && t.removeAttribute("data-te-datepicker-cell-selected");
  }
  _addSelectedStyles(t) {
    t && t.setAttribute("data-te-datepicker-cell-selected", "");
  }
  _confirmSelection(t) {
    if (t) {
      const e = this.formatDate(t);
      this._input.value = e, u.trigger(this._element, Pp, { date: t }), u.trigger(this._input, "input");
    }
  }
  handleCancel() {
    this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this.close();
  }
  handleClear() {
    this._selectedDate = null, this._selectedMonth = null, this._selectedYear = null, this._headerDate = null, this._headerMonth = null, this._headerYear = null, this._removeCurrentSelectionStyles(), this._input.value = "", this._setInitialDate(), this._changeView("days"), this._updateHeaderDate(
      this._activeDate,
      this._options.monthsShort,
      this._options.weekdaysShort
    );
  }
  _removeCurrentSelectionStyles() {
    const t = d.findOne(
      "[data-te-datepicker-cell-selected]",
      this.container
    );
    t && t.removeAttribute("data-te-datepicker-cell-selected");
  }
  _removeCurrentFocusStyles() {
    const t = d.findOne(
      "[data-te-datepicker-cell-focused]",
      this.container
    );
    t && t.removeAttribute("data-te-datepicker-cell-focused");
  }
  formatDate(t) {
    const e = q(t), i = this._addLeadingZero(q(t)), n = this._options.weekdaysShort[is(t)], o = this._options.weekdaysFull[is(t)], r = Y(t) + 1, a = this._addLeadingZero(Y(t) + 1), l = this._options.monthsShort[Y(t)], c = this._options.monthsFull[Y(t)], h = R(t).toString().length === 2 ? R(t) : R(t).toString().slice(2, 4), _ = R(t), f = this._options.format.split(
      /(d{1,4}|m{1,4}|y{4}|yy|!.)/g
    );
    let g = "";
    return f.forEach((m) => {
      switch (m) {
        case "dddd":
          m = m.replace(m, o);
          break;
        case "ddd":
          m = m.replace(m, n);
          break;
        case "dd":
          m = m.replace(m, i);
          break;
        case "d":
          m = m.replace(m, e);
          break;
        case "mmmm":
          m = m.replace(m, c);
          break;
        case "mmm":
          m = m.replace(m, l);
          break;
        case "mm":
          m = m.replace(m, a);
          break;
        case "m":
          m = m.replace(m, r);
          break;
        case "yyyy":
          m = m.replace(m, _);
          break;
        case "yy":
          m = m.replace(m, h);
          break;
      }
      g += m;
    }), g;
  }
  _addLeadingZero(t) {
    return parseInt(t, 10) < 10 ? `0${t}` : t;
  }
  _pickDay(t, e) {
    const i = rr(t), { min: n, max: o, filter: r, disablePast: a, disableFuture: l } = this._options;
    ms(i, n, o, r, a, l) || (this._activeDate = i, this._selectDate(i, e));
  }
  _pickYear(t) {
    const { min: e, max: i, disablePast: n, disableFuture: o } = this._options;
    if (Nn(t, e, i, n, o))
      return;
    const r = Dt(t, this.activeMonth, this.activeDay);
    this._activeDate = r, this._selectedDate = r, this._selectYear(t);
  }
  _pickMonth(t, e) {
    const { min: i, max: n, disablePast: o, disableFuture: r } = this._options;
    if (il(t, e, i, n, o, r) || Nn(e, i, n, o, r))
      return;
    const a = Dt(e, t, this.activeDay);
    this._activeDate = a, this._selectMonth(t);
  }
  nextMonth() {
    const t = tt(this._activeDate, 1), e = ns(
      t,
      this._headerDate,
      this._options,
      this._classes
    );
    this._activeDate = t, this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.datesContainer.innerHTML = e;
  }
  previousMonth() {
    const t = tt(this._activeDate, -1);
    this._activeDate = t;
    const e = ns(
      t,
      this._headerDate,
      this._options,
      this._classes
    );
    this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.datesContainer.innerHTML = e;
  }
  nextYear() {
    const t = Z(this._activeDate, 1);
    this._activeDate = t, this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    );
    const e = os(
      this.activeYear,
      this._selectedYear,
      this._selectedMonth,
      this._options,
      $i,
      this._classes
    );
    this.datesContainer.innerHTML = e;
  }
  previousYear() {
    const t = Z(this._activeDate, -1);
    this._activeDate = t, this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    );
    const e = os(
      this.activeYear,
      this._selectedYear,
      this._selectedMonth,
      this._options,
      $i,
      this._classes
    );
    this.datesContainer.innerHTML = e;
  }
  nextYears() {
    const t = Z(this._activeDate, 24);
    this._activeDate = t;
    const e = rs(
      t,
      this._selectedYear,
      this._options,
      ut,
      Ii,
      this._classes
    );
    this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.datesContainer.innerHTML = e;
  }
  previousYears() {
    const t = Z(this._activeDate, -24);
    this._activeDate = t;
    const e = rs(
      t,
      this._selectedYear,
      this._options,
      ut,
      Ii,
      this._classes
    );
    this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.datesContainer.innerHTML = e;
  }
  _asyncChangeView(t) {
    setTimeout(() => {
      this._changeView(t);
    }, 0);
  }
  _changeView(t) {
    this._view = t, this.datesContainer.blur(), t === "days" && (this.datesContainer.innerHTML = ns(
      this._activeDate,
      this._headerDate,
      this._options,
      this._classes
    )), t === "months" && (this.datesContainer.innerHTML = os(
      this.activeYear,
      this._selectedYear,
      this._selectedMonth,
      this._options,
      $i,
      this._classes
    )), t === "years" && (this.datesContainer.innerHTML = rs(
      this._activeDate,
      this._selectedYear,
      this._options,
      ut,
      Ii,
      this._classes
    )), this.datesContainer.focus(), this._updateViewControlsAndAttributes(t), this._updateControlsDisabledState();
  }
  _updateViewControlsAndAttributes(t) {
    t === "days" && (this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.viewChangeButton.setAttribute(
      "aria-label",
      this._options.switchToMultiYearViewLabel
    ), this.previousButton.setAttribute(
      "aria-label",
      this._options.prevMonthLabel
    ), this.nextButton.setAttribute("aria-label", this._options.nextMonthLabel)), t === "months" && (this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.viewChangeButton.setAttribute(
      "aria-label",
      this._options.switchToDayViewLabel
    ), this.previousButton.setAttribute(
      "aria-label",
      this._options.prevYearLabel
    ), this.nextButton.setAttribute("aria-label", this._options.nextYearLabel)), t === "years" && (this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Ot(
      this._options,
      this._classes
    ), this.viewChangeButton.setAttribute(
      "aria-label",
      this._options.switchToMonthViewLabel
    ), this.previousButton.setAttribute(
      "aria-label",
      this._options.prevMultiYearLabel
    ), this.nextButton.setAttribute(
      "aria-label",
      this._options.nextMultiYearLabel
    ));
  }
  _updateControlsDisabledState() {
    up(
      this._options.disableFuture,
      this._activeDate,
      this._view,
      ut,
      this._options.min,
      this._options.max,
      this.lastYearInView,
      this.firstYearInView
    ) ? this.nextButton.disabled = !0 : this.nextButton.disabled = !1, pp(
      this._options.disablePast,
      this._activeDate,
      this._view,
      ut,
      this._options.min,
      this._options.max,
      this.lastYearInView,
      this.firstYearInView
    ) ? this.previousButton.disabled = !0 : this.previousButton.disabled = !1;
  }
  _handleUserInput(t) {
    const e = this._getDelimeters(this._options.format), i = this._parseDate(t, this._options.format, e);
    cp(i) ? (this._activeDate = i, this._selectedDate = i, this._selectedYear = R(i), this._selectedMonth = Y(i), this._headerDate = i) : (this._activeDate = new Date(), this._selectedDate = null, this._selectedMonth = null, this._selectedYear = null, this._headerDate = null, this._headerMonth = null, this._headerYear = null);
  }
  _getDelimeters(t) {
    return t.match(/[^(dmy)]{1,}/g);
  }
  _parseDate(t, e, i) {
    let n;
    i[0] !== i[1] ? n = i[0] + i[1] : n = i[0];
    const o = new RegExp(`[${n}]`), r = t.split(o), a = e.split(o), l = e.indexOf("mmm") !== -1, c = [];
    for (let E = 0; E < a.length; E++)
      a[E].indexOf("yy") !== -1 && (c[0] = { value: r[E], format: a[E] }), a[E].indexOf("m") !== -1 && (c[1] = { value: r[E], format: a[E] }), a[E].indexOf("d") !== -1 && a[E].length <= 2 && (c[2] = { value: r[E], format: a[E] });
    let h;
    e.indexOf("mmmm") !== -1 ? h = this._options.monthsFull : h = this._options.monthsShort;
    const _ = Number(c[0].value), f = l ? this.getMonthNumberByMonthName(c[1].value, h) : Number(c[1].value) - 1, g = Number(c[2].value);
    return Dt(_, f, g);
  }
  getMonthNumberByMonthName(t, e) {
    return e.findIndex((i) => i === t);
  }
  static getInstance(t) {
    return I.getData(t, ls);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const Lf = ({
  format24: s,
  okLabel: t,
  cancelLabel: e,
  headID: i,
  footerID: n,
  bodyID: o,
  pickerID: r,
  clearLabel: a,
  inline: l,
  showClearBtn: c,
  amLabel: h,
  pmLabel: _
}, f) => {
  const g = `<div id='${r}' class='${f.timepickerWrapper}' data-te-timepicker-wrapper>
      <div class="${f.timepickerContainer}">
        <div class="${f.timepickerElements}">
        <div id='${i}' class='${f.timepickerHead}' style='padding-right:${s ? 50 : 10}px'>
        <div class='${f.timepickerHeadContent}'>
            <div class="${f.timepickerCurrentWrapper}">
              <span class="${f.timepickerCurrentButtonWrapper}">
                <button type='button' class='${f.timepickerCurrentButton}' tabindex="0" data-te-timepicker-active data-te-timepicker-current data-te-timepicker-hour data-te-ripple-init>21</button>
              </span>
              <button type='button' class='${f.timepickerDot}' disabled>:</button>
            <span class="${f.timepickerCurrentButtonWrapper}">
              <button type='button' class='${f.timepickerCurrentButton}' tabindex="0" data-te-timepicker-current data-te-timepicker-minute data-te-ripple-init>21</button>
            </span>
            </div>
            ${s ? "" : `<div class="${f.timepickerModeWrapper}">
                  <button type='button' class="${f.timepickerModeAm}" tabindex="0" data-te-timepicker-am data-te-timepicker-hour-mode data-te-ripple-init>${h}</button>
                  <button class="${f.timepickerModePm}" tabindex="0" data-te-timepicker-pm data-te-timepicker-hour-mode data-te-ripple-init>${_}</button>
                </div>`}
        </div>
      </div>
      ${l ? "" : `<div id='${o}' class='${f.timepickerClockWrapper}' data-te-timepicker-clock-wrapper>
            <div class='${f.timepickerClock}' data-te-timepicker-clock>
              <span class='${f.timepickerMiddleDot}' data-te-timepicker-middle-dot></span>
              <div class='${f.timepickerHandPointer}' data-te-timepicker-hand-pointer>
                <div class='${f.timepickerPointerCircle}' data-te-timepicker-circle></div>
              </div>
              ${s ? '<div class="' + f.timepickerClockInner + '" data-te-timepicker-clock-inner></div>' : ""}
            </div>
          </div>`}
    </div>
    <div id='${n}' class='${f.timepickerFooterWrapper}'>
      <div class="${f.timepickerFooter}">
        ${c ? `<button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-clear tabindex="0" data-te-ripple-init>${a}</button>` : ""}
        <button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-cancel tabindex="0" data-te-ripple-init>${e}</button>
        <button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-submit tabindex="0" data-te-ripple-init>${t}</button>
      </div>
    </div>
  </div>
</div>`, m = `<div id='${r}' class='${f.timepickerInlineWrapper}' data-te-timepicker-wrapper>
        <div class="${f.timepickerInlineContainer}">
          <div class="${f.timepickerInlineElements}">
          <div id='${i}' class='${f.timepickerInlineHead}'
          style='padding-right:10px'>
          <div class='${f.timepickerInlineHeadContent}'>
              <div class="${f.timepickerCurrentWrapper}">
                <span class="${f.timepickerInlineHourWrapper}" data-te-timepicker-inline-hour-icons>
                  <span class="${f.timepickerInlineIconUp}" data-te-timepicker-icon-up data-te-timepicker-icon-inline-hour>
                    <span class="${f.timepickerInlineIconSvg}">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
                      </svg>   
                    </span>
                  </span>
                  <button type='button' class='${f.timepickerInlineCurrentButton}' data-te-timepicker-hour data-te-timepicker-current data-te-timepicker-current-inline tabindex="0" data-te-ripple-init>21</button>
                  <span class="${f.timepickerInlineIconDown}" data-te-timepicker-icon-inline-hour data-te-timepicker-icon-down>
                    <span class="${f.timepickerInlineIconSvg}">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                      </svg>  
                    </span>
                  </span>
                </span>
                <button type='button' class='${f.timepickerInlineDot}' data-te-timepicker-current-inline disabled>:</button>
              <span class="${f.timepickerCurrentMinuteWrapper}">
                <span class="${f.timepickerInlineIconUp}" data-te-timepicker-icon-up data-te-timepicker-icon-inline-minute>
                  <span class="${f.timepickerInlineIconSvg}">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
                    </svg>
                  </span>
                </span>
                <button type='button' class='${f.timepickerInlineCurrentButton}' data-te-timepicker-minute data-te-timepicker-current data-te-timepicker-current-inline tabindex="0" data-te-ripple-init>21</button>
                <span class="${f.timepickerInlineIconDown}" data-te-timepicker-icon-inline-minute data-te-timepicker-icon-down>
                  <span class="${f.timepickerInlineIconSvg}">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                    </svg> 
                  </span>
                </span>
              </span>
              </div>
              ${s ? "" : `<div class="${f.timepickerInlineModeWrapper}">
                      <button type='button' class="${f.timepickerInlineModeAm}" data-te-timepicker-am data-te-timepicker-hour-mode tabindex="0" data-te-ripple-init>${h}</button>
                      <button class="${f.timepickerInlineModePm}" data-te-timepicker-hour-mode data-te-timepicker-pm tabindex="0" data-te-ripple-init>${_}</button>
                      <button type='button' class='${f.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex="0" data-te-ripple-init>${t}</button>
                    </div>`}
              ${s ? `<button class='${f.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex="0" data-te-ripple-init>${t}</button>` : ""}
          </div>
        </div>
      </div>
    </div>
</div>`;
  return l ? m : g;
}, Mf = (s, t, e) => {
  const { iconSVG: i } = s;
  return `
  <button id="${t}" tabindex="0" type="button" class="${e.timepickerToggleButton}" data-te-toggle="timepicker" data-te-timepicker-toggle-button data-te-timepicker-icon>
    ${i}
  </button>
`;
}, ks = "data-te-timepicker-disabled", Ni = "data-te-timepicker-active", he = (s) => {
  if (s === "")
    return;
  let t, e, i, n;
  return ol(s) ? (t = s.getHours(), n = t, e = s.getMinutes(), t %= 12, n === 0 && t === 0 && (i = "AM"), t = t || 12, i === void 0 && (i = Number(n) >= 12 ? "PM" : "AM"), e = e < 10 ? `0${e}` : e) : ([t, e, i] = N(s, !1), n = t, t %= 12, n === 0 && t === 0 && (i = "AM"), t = t || 12, i === void 0 && (i = Number(n) >= 12 ? "PM" : "AM")), {
    hours: t,
    minutes: e,
    amOrPm: i
  };
}, ol = (s) => s && Object.prototype.toString.call(s) === "[object Date]" && !Number.isNaN(s), hr = (s) => {
  if (s === "")
    return;
  let t, e;
  return ol(s) ? (t = s.getHours(), e = s.getMinutes()) : [t, e] = N(s, !1), e = Number(e) < 10 ? `0${Number(e)}` : e, {
    hours: t,
    minutes: e
  };
}, Nf = (s, t, e) => u.on(document, s, t, ({ target: i }) => {
  if (i.hasAttribute(Ni))
    return;
  document.querySelectorAll(t).forEach((o) => {
    o.hasAttribute(Ni) && (p.removeClass(o, e.opacity), o.removeAttribute(Ni));
  }), p.addClass(i, e.opacity), i.setAttribute(Ni, "");
}), ur = ({ clientX: s, clientY: t, touches: e }, i, n = !1) => {
  const { left: o, top: r } = i.getBoundingClientRect();
  let a = {};
  return !n || !e ? a = {
    x: s - o,
    y: t - r
  } : n && Object.keys(e).length > 0 && (a = {
    x: e[0].clientX - o,
    y: e[0].clientY - r
  }), a;
}, Ri = () => navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
  navigator.userAgent
), N = (s, t = !0) => t ? s.value.replace(/:/gi, " ").split(" ") : s.replace(/:/gi, " ").split(" "), rl = (s, t) => {
  const [e, i, n] = N(s, !1), [o, r, a] = N(t, !1);
  return n === "PM" && a === "AM" || n === a && e > o || i > r;
}, al = () => {
  const s = new Date(), t = s.getHours(), e = s.getMinutes();
  return `${t}:${e < 10 ? `0${e}` : e}`;
}, jt = (s, t, e) => {
  if (!t)
    return s;
  let i = al();
  return e && (i = `${he(i).hours}:${he(i).minutes} ${he(i).amOrPm}`), (s !== "" && rl(i, s) || s === "") && (s = i), s;
}, Kt = (s, t, e) => {
  if (!t)
    return s;
  let i = al();
  return e && (i = `${he(i).hours}:${he(i).minutes} ${he(i).amOrPm}`), (s !== "" && !rl(i, s) || s === "") && (s = i), s;
}, Rf = ({ format12: s, maxTime: t, minTime: e, disablePast: i, disableFuture: n }, o, r) => {
  const a = N(o)[1];
  e = jt(e, i, s), t = Kt(t, n, s);
  const [l, c, h] = N(t, !1), [_, f, g] = N(e, !1);
  if (h !== void 0 || g !== void 0)
    return [r, a];
  if (!(l !== "" && _ === "" && Number(r) > Number(l)) && !(l === "" && _ !== "" && c === void 0 && f !== "" && Number(r) < Number(_)))
    return [r, a];
}, pr = (s, t, e, i) => {
  s.forEach((n) => {
    t = t === "12" && i ? "0" : t, (n.textContent === "00" || Number(n.textContent === "12" && i ? "0" : n.textContent) > t) && (p.addClass(n, e.tipsDisabled), n.setAttribute(ks, ""));
  });
}, fr = (s, t, e, i) => {
  s.forEach((n) => {
    t = t === "12" && i ? "0" : t, n.textContent !== "00" && Number(n.textContent === "12" && i ? "0" : n.textContent) < Number(t) && (p.addClass(n, e.tipsDisabled), n.setAttribute(ks, ""));
  });
}, ll = (s, t, e, i) => {
  if (t === "12" || t === "24")
    return;
  const n = e ? 12 : 24;
  return i === "max" ? (Number(s) === n ? 0 : Number(s)) > Number(t) : (Number(s) === n ? 0 : Number(s)) < Number(t);
}, Pf = (s, t, e, i, n, o) => {
  s.forEach((r) => {
    (ll(i, e, o, "max") || Number(r.textContent) > t && Number(i) === Number(e)) && (p.addClass(r, n.tipsDisabled), r.setAttribute(ks, ""));
  });
}, Bf = (s, t, e, i, n, o) => {
  s.forEach((r) => {
    (ll(i, e, o, "min") || Number(r.textContent) < t && Number(i) === Number(e)) && (p.addClass(r, n.tipsDisabled), r.setAttribute(ks, ""));
  });
}, Hf = (s) => s.startsWith("0") ? Number(s.slice(1)) : Number(s), ii = "timepicker", $ = `data-te-${ii}`, _r = "[data-te-toggle]", cs = `te.${ii}`, It = `.${cs}`, $t = ".data-api", mr = `click${It}${$t}`, Pi = `keydown${It}${$t}`, gr = `mousedown${It}${$t}`, br = `mouseup${It}${$t}`, vr = `mousemove${It}${$t}`, Er = `mouseleave${It}${$t}`, Tr = `mouseover${It}${$t}`, Cr = `touchmove${It}${$t}`, Ar = `touchend${It}${$t}`, yr = `touchstart${It}${$t}`, Vf = `[${$}-am]`, Wf = `[${$}-pm]`, Ff = `[${$}-format24]`, Bi = `[${$}-current]`, Hi = `[${$}-hour-mode]`, Yf = `[${$}-toggle-button]`, ln = `${$}-cancel`, wr = `${$}-clear`, cn = `${$}-submit`, jf = `${$}-icon`, dn = `${$}-icon-up`, hn = `${$}-icon-down`, Kf = `${$}-icon-inline-hour`, Uf = `${$}-icon-inline-minute`, Or = `${$}-inline-hour-icons`, zf = `${$}-current-inline`, Xf = "readonly", kr = `${$}-invalid-feedback`, un = `${$}-is-invalid`, Ht = `${$}-disabled`, H = `${$}-active`, Gf = `${$}-input`, re = `${$}-clock`, Ke = `${$}-clock-inner`, pn = `${$}-wrapper`, Sr = `${$}-clock-wrapper`, Vi = `${$}-hour`, fn = `${$}-minute`, Wi = `${$}-tips-element`, K = `${$}-tips-hours`, z = `${$}-tips-minutes`, st = `${$}-tips-inner`, Fi = `${$}-tips-inner-element`, xr = `${$}-middle-dot`, _n = `${$}-hand-pointer`, mn = `${$}-circle`, Dr = `${$}-modal`, qf = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>`, Qf = {
  appendValidationInfo: !0,
  bodyID: "",
  cancelLabel: "Cancel",
  clearLabel: "Clear",
  closeModalOnBackdropClick: !0,
  closeModalOnMinutesClick: !1,
  container: "body",
  defaultTime: "",
  disabled: !1,
  disablePast: !1,
  disableFuture: !1,
  enableValidation: !0,
  focusInputAfterApprove: !1,
  footerID: "",
  format12: !0,
  format24: !1,
  headID: "",
  increment: !1,
  inline: !1,
  invalidLabel: "Invalid Time Format",
  maxTime: "",
  minTime: "",
  modalID: "",
  okLabel: "Ok",
  overflowHidden: !0,
  pickerID: "",
  readOnly: !1,
  showClearBtn: !0,
  switchHoursToMinutesOnClick: !0,
  iconSVG: qf,
  withIcon: !0,
  pmLabel: "PM",
  amLabel: "AM",
  animations: !0
}, Zf = {
  appendValidationInfo: "boolean",
  bodyID: "string",
  cancelLabel: "string",
  clearLabel: "string",
  closeModalOnBackdropClick: "boolean",
  closeModalOnMinutesClick: "boolean",
  container: "string",
  disabled: "boolean",
  disablePast: "boolean",
  disableFuture: "boolean",
  enableValidation: "boolean",
  footerID: "string",
  format12: "boolean",
  format24: "boolean",
  headID: "string",
  increment: "boolean",
  inline: "boolean",
  invalidLabel: "string",
  modalID: "string",
  okLabel: "string",
  overflowHidden: "boolean",
  pickerID: "string",
  readOnly: "boolean",
  showClearBtn: "boolean",
  switchHoursToMinutesOnClick: "boolean",
  defaultTime: "(string|date|number)",
  iconSVG: "string",
  withIcon: "boolean",
  pmLabel: "string",
  amLabel: "string",
  animations: "boolean"
}, Jf = {
  tips: "absolute rounded-[100%] w-[32px] h-[32px] text-center cursor-pointer text-[1.1rem] rounded-[100%] bg-transparent flex justify-center items-center font-light focus:outline-none selection:bg-transparent",
  tipsActive: "text-white bg-[#3b71ca] font-normal",
  tipsDisabled: "text-[#b3afaf] pointer-events-none bg-transparent",
  transform: "transition-[transform,height] ease-in-out duration-[400ms]",
  modal: "z-[1065]",
  clockAnimation: "animate-[show-up-clock_350ms_linear]",
  opacity: "!opacity-100",
  timepickerWrapper: "touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col fixed",
  timepickerContainer: "flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)] min-[320px]:max-[825px]:landscape:rounded-lg",
  timepickerElements: "flex flex-col min-w-[310px] min-h-[325px] bg-white rounded-t-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape:min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around",
  timepickerHead: "bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg pr-[24px] pl-[50px] py-[10px] min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center",
  timepickerHeadContent: "min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly",
  timepickerCurrentWrapper: "[direction:ltr] rtl:[direction:rtl]",
  timepickerCurrentButtonWrapper: "relative h-full",
  timepickerCurrentButton: "text-[3.75rem] font-light leading-[1.2] tracking-[-0.00833em] text-white opacity-[.54] border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none ",
  timepickerDot: "font-light leading-[1.2] tracking-[-0.00833em] text-[3.75rem] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal",
  timepickerModeWrapper: "flex flex-col justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row",
  timepickerModeAm: "p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none",
  timepickerModePm: "p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none",
  timepickerClockWrapper: "min-w-[310px] max-w-[325px] min-h-[305px] overflow-x-hidden h-full flex justify-center flex-col items-center dark:bg-zinc-500",
  timepickerClock: "relative rounded-[100%] w-[260px] h-[260px] cursor-default my-0 mx-auto bg-[#00000012] dark:bg-zinc-600/50",
  timepickerMiddleDot: "top-1/2 left-1/2 w-[6px] h-[6px] -translate-y-1/2 -translate-x-1/2 rounded-[50%] bg-[#3b71ca] absolute",
  timepickerHandPointer: "bg-[#3b71ca] bottom-1/2 h-2/5 left-[calc(50%-1px)] rtl:!left-auto origin-[center_bottom_0] rtl:!origin-[50%_50%_0] w-[2px] absolute",
  timepickerPointerCircle: "-top-[21px] -left-[15px] w-[4px] border-[14px] border-solid border-[#3b71ca] h-[4px] box-content rounded-[100%] absolute",
  timepickerClockInner: "absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 w-[160px] h-[160px] rounded-[100%]",
  timepickerFooterWrapper: "rounded-b-lg flex justify-between items-center w-full h-[56px] px-[12px] bg-white dark:bg-zinc-500",
  timepickerFooter: "w-full flex justify-between",
  timepickerFooterButton: "text-[0.8rem] min-w-[64px] box-border font-medium leading-[40px] rounded-[10px] tracking-[0.1rem] uppercase text-[#3b71ca] dark:text-white border-none bg-transparent transition-[background-color,box-shadow,border] duration-[250ms] ease-[cubic-bezier(0.4,0,0.2,1)] delay-[0ms] outline-none py-0 px-[10px] h-[40px] mb-[10px] hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none",
  timepickerInlineWrapper: "touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col rounded-lg",
  timepickerInlineContainer: "flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)]",
  timepickerInlineElements: "flex flex-col min-h-[auto] min-w-[310px] bg-white rounded-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:rounded-bl-lg min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape::min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around",
  timepickerInlineHead: "bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center p-0 rounded-b-lg",
  timepickerInlineHeadContent: "min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly items-center",
  timepickerInlineHourWrapper: "relative h-full !opacity-100",
  timepickerCurrentMinuteWrapper: "relative h-full",
  timepickerInlineIconUp: "absolute fill-white -top-[35px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center",
  timepickerInlineIconSvg: "h-4 w-4",
  timepickerInlineCurrentButton: "font-light leading-[1.2] tracking-[-0.00833em] text-white border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal !opacity-100 cursor-pointer focus:bg-[#00000026] hover:outline-none focus:outline-none text-[2.5rem] hover:bg-[unset]",
  timepickerInlineIconDown: "absolute fill-white -bottom-[47px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center",
  timepickerInlineDot: "font-light leading-[1.2] tracking-[-0.00833em] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal text-[2.5rem]",
  timepickerInlineModeWrapper: "flex justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row",
  timepickerInlineModeAm: "hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer mr-2 ml-6",
  timepickerInlineModePm: "hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer",
  timepickerInlineSubmitButton: "hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none text-[0.8rem] box-border font-medium leading-[40px] tracking-[.1rem] uppercase border-none bg-transparent [transition:background-color_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,box-shadow_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,border_250ms_cubic-bezier(0.4,0,0.2,1)_0ms] outline-none rounded-[100%] h-[48px] min-w-[48px] inline-block ml-[30px] text-white py-1 px-2 mb-0",
  timepickerToggleButton: "h-4 w-4 ml-auto absolute outline-none border-none bg-transparent right-1.5 top-1/2 -translate-x-1/2 -translate-y-1/2 transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] cursor-pointer hover:text-[#3b71ca] focus:text-[#3b71ca] dark:hover:text-[#3b71ca] dark:focus:text-[#3b71ca] dark:text-white"
}, t_ = {
  tips: "string",
  tipsActive: "string",
  tipsDisabled: "string",
  transform: "string",
  modal: "string",
  clockAnimation: "string",
  opacity: "string",
  timepickerWrapper: "string",
  timepickerContainer: "string",
  timepickerElements: "string",
  timepickerHead: "string",
  timepickerHeadContent: "string",
  timepickerCurrentWrapper: "string",
  timepickerCurrentButtonWrapper: "string",
  timepickerCurrentButton: "string",
  timepickerDot: "string",
  timepickerModeWrapper: "string",
  timepickerModeAm: "string",
  timepickerModePm: "string",
  timepickerClockWrapper: "string",
  timepickerClock: "string",
  timepickerMiddleDot: "string",
  timepickerHandPointer: "string",
  timepickerPointerCircle: "string",
  timepickerClockInner: "string",
  timepickerFooterWrapper: "string",
  timepickerFooterButton: "string",
  timepickerInlineWrapper: "string",
  timepickerInlineContainer: "string",
  timepickerInlineElements: "string",
  timepickerInlineHead: "string",
  timepickerInlineHeadContent: "string",
  timepickerInlineHourWrapper: "string",
  timepickerCurrentMinuteWrapper: "string",
  timepickerInlineIconUp: "string",
  timepickerInlineIconSvg: "string",
  timepickerInlineCurrentButton: "string",
  timepickerInlineIconDown: "string",
  timepickerInlineDot: "string",
  timepickerInlineModeWrapper: "string",
  timepickerInlineModeAm: "string",
  timepickerInlineModePm: "string",
  timepickerInlineSubmitButton: "string",
  timepickerToggleButton: "string"
};
class Mg {
  constructor(t, e = {}, i) {
    Tt(this, "_toggleAmPm", (t) => {
      t === "PM" ? (this._isPmEnabled = !0, this._isAmEnabled = !1) : t === "AM" && (this._isPmEnabled = !1, this._isAmEnabled = !0);
    });
    Tt(this, "_toggleBackgroundColorCircle", (t) => {
      if (this._modal.querySelector(`${t}[${H}]`) !== null) {
        p.addStyle(this._circle, {
          backgroundColor: "#1976d2"
        });
        return;
      }
      p.addStyle(this._circle, {
        backgroundColor: "transparent"
      });
    });
    Tt(this, "_toggleClassActive", (t, { textContent: e }, i) => {
      const n = [...t].find(
        (o) => Number(o) === Number(e)
      );
      return i.forEach((o) => {
        if (!o.hasAttribute(Ht)) {
          if (o.textContent === n) {
            p.addClass(o, this._classes.tipsActive), o.setAttribute(H, "");
            return;
          }
          p.removeClass(o, this._classes.tipsActive), o.removeAttribute(H);
        }
      });
    });
    Tt(this, "_makeMinutesDegrees", (t, e) => {
      const { increment: i } = this._options;
      return t < 0 ? (e = Math.round(360 + t / 6) % 60, t = 360 + Math.round(t / 6) * 6) : (e = Math.round(t / 6) % 60, t = Math.round(t / 6) * 6), i && (t = Math.round(t / 30) * 30, e = Math.round(t / 6) * 6 / 6, e === 60 && (e = "00")), t >= 360 && (t = 0), {
        degrees: t,
        minute: e,
        addDegrees: i ? 30 : 6
      };
    });
    Tt(this, "_makeHourDegrees", (t, e, i) => {
      if (t)
        return this._hasTargetInnerClass(t) ? e < 0 ? (i = Math.round(360 + e / 30) % 24, e = 360 + e) : (i = Math.round(e / 30) + 12, i === 12 && (i = "00")) : e < 0 ? (i = Math.round(360 + e / 30) % 12, e = 360 + e) : (i = Math.round(e / 30) % 12, (i === 0 || i > 12) && (i = 12)), e >= 360 && (e = 0), {
          degrees: e,
          hour: i,
          addDegrees: 30
        };
    });
    Tt(this, "_makeInnerHoursDegrees", (t, e) => (t < 0 ? (e = Math.round(360 + t / 30) % 24, t = 360 + t) : (e = Math.round(t / 30) + 12, e === 12 && (e = "00")), {
      degrees: t,
      hour: e,
      addDegrees: 30
    }));
    Tt(this, "_getAppendClock", (t = [], e = `[${re}]`, i) => {
      let { minTime: n, maxTime: o } = this._options;
      const { inline: r, format12: a, disablePast: l, disableFuture: c } = this._options;
      n = jt(n, l, a), o = Kt(o, c, a);
      const [h, _, f] = N(
        o,
        !1
      ), [g, m, E] = N(
        n,
        !1
      );
      !r && a && this._isInvalidTimeFormat && !this._AM.hasAttribute(H) && (p.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, ""));
      const C = d.findOne(e), b = 360 / t.length;
      function v(y) {
        return y * (Math.PI / 180);
      }
      if (C === null)
        return;
      const T = (C.offsetWidth - 32) / 2, A = (C.offsetHeight - 32) / 2, w = T - 4;
      setTimeout(() => {
        let y;
        a && (y = d.findOne(
          `${Hi}[${H}]`
        ).textContent), this._handleDisablingTipsMinTime(
          y,
          E,
          m,
          g
        ), this._handleDisablingTipsMaxTime(
          y,
          f,
          _,
          h
        );
      }, 0), [...t].forEach((y, O) => {
        const x = v(O * b), k = L("span"), D = L("span");
        D.innerHTML = y, p.addClass(k, this._classes.tips), k.setAttribute(i, "");
        const S = k.offsetWidth, P = k.offsetHeight;
        return p.addStyle(k, {
          left: `${T + Math.sin(x) * w - S}px`,
          bottom: `${A + Math.cos(x) * w - P}px`
        }), t.includes("05") && k.setAttribute(z, ""), t.includes("13") ? D.setAttribute(Fi, "") : D.setAttribute(Wi, ""), k.appendChild(D), C.appendChild(k);
      });
    });
    this._element = t, this._element && I.setData(t, cs, this), this._document = document, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._currentTime = null, this._toggleButtonId = kt("timepicker-toggle-"), this.hoursArray = [
      "12",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11"
    ], this.innerHours = [
      "00",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "20",
      "21",
      "22",
      "23"
    ], this.minutesArray = [
      "00",
      "05",
      "10",
      "15",
      "20",
      "25",
      "30",
      "35",
      "40",
      "45",
      "50",
      "55"
    ], this.input = d.findOne("input", this._element), this.dataWithIcon = t.dataset.withIcon, this.dataToggle = t.dataset.toggle, this.customIcon = d.findOne(
      Yf,
      this._element
    ), this._checkToggleButton(), this.inputFormatShow = d.findOne(
      Ff,
      this._element
    ), this.inputFormat = this.inputFormatShow === null ? "" : Object.values(this.inputFormatShow.dataset)[0], this.elementToggle = d.findOne(
      _r,
      this._element
    ), this.toggleElement = Object.values(
      t.querySelector(_r).dataset
    )[0], this._hour = null, this._minutes = null, this._AM = null, this._PM = null, this._wrapper = null, this._modal = null, this._hand = null, this._circle = null, this._focusTrap = null, this._popper = null, this._interval = null, this._inputValue = this._options.defaultTime !== "" ? this._options.defaultTime : this.input.value, this._options.format24 && (this._options.format12 = !1, this._currentTime = hr(this._inputValue)), this._options.format12 && (this._options.format24 = !1, this._currentTime = he(this._inputValue)), this._options.readOnly && this.input.setAttribute(Xf, !0), this.inputFormat === "true" && this.inputFormat !== "" && (this._options.format12 = !1, this._options.format24 = !0, this._currentTime = hr(this._inputValue)), this._animations = !window.matchMedia("(prefers-reduced-motion: reduce)").matches && this._options.animations, this.init(), this._isHours = !0, this._isMinutes = !1, this._isInvalidTimeFormat = !1, this._isMouseMove = !1, this._isInner = !1, this._isAmEnabled = !1, this._isPmEnabled = !1, this._options.format12 && !this._options.defaultTime && (this._isPmEnabled = !0), this._objWithDataOnChange = { degrees: null }, this._scrollBar = new ai();
  }
  // Getters
  static get NAME() {
    return ii;
  }
  // Public
  init() {
    const { format12: t, format24: e, enableValidation: i } = this._options;
    let n, o, r;
    if (this.input.setAttribute(Gf, ""), this._currentTime !== void 0) {
      const { hours: a, minutes: l, amOrPm: c } = this._currentTime;
      n = Number(a) < 10 ? 0 : "", o = `${n}${Number(a)}:${l}`, r = c, t ? this.input.value = `${o} ${r}` : e && (this.input.value = `${o}`);
    } else
      n = "", o = "", r = "", this.input.value = "";
    this.input.value.length > 0 && this.input.value !== "" && (this.input.setAttribute(H, ""), u.trigger(this.input, "input")), !(this._options === null && this._element === null) && (i && this._getValidate("keydown change blur focus"), this._handleOpen(), this._listenToToggleKeydown());
  }
  dispose() {
    this._removeModal(), this._element !== null && I.removeData(this._element, cs), setTimeout(() => {
      this._element = null, this._options = null, this.input = null, this._focusTrap = null;
    }, 350), u.off(
      this._document,
      "click",
      `[data-te-toggle='${this.toggleElement}']`
    ), u.off(
      this._element,
      "keydown",
      `[data-te-toggle='${this.toggleElement}']`
    );
  }
  update(t = {}) {
    this._options = this._getConfig({ ...this._options, ...t });
  }
  // private
  _checkToggleButton() {
    this.customIcon === null && (this.dataWithIcon !== void 0 && (this._options.withIcon = null, this.dataWithIcon === "true" && this._appendToggleButton(this._options)), this._options.withIcon && this._appendToggleButton(this._options));
  }
  _appendToggleButton() {
    const t = Mf(
      this._options,
      this._toggleButtonId,
      this._classes
    );
    this.input.insertAdjacentHTML("afterend", t);
  }
  _getDomElements() {
    this._hour = d.findOne(`[${Vi}]`), this._minutes = d.findOne(`[${fn}]`), this._AM = d.findOne(Vf), this._PM = d.findOne(Wf), this._wrapper = d.findOne(`[${pn}]`), this._modal = d.findOne(`[${Dr}]`), this._hand = d.findOne(`[${_n}]`), this._circle = d.findOne(`[${mn}]`), this._clock = d.findOne(`[${re}]`), this._clockInner = d.findOne(
      `[${Ke}]`
    );
  }
  _handlerMaxMinHoursOptions(t, e, i, n, o, r) {
    if (!e && !i)
      return !0;
    const { format24: a, format12: l, disablePast: c, disableFuture: h } = this._options, { _isAmEnabled: _, _isPmEnabled: f } = this, g = r.keyCode, m = r.target.hasAttribute(Ke) || r.target.hasAttribute(st) || r.target.hasAttribute(Fi);
    i = jt(i, c, l), e = Kt(e, h, l), typeof e != "number" && (e = N(e, !1)[0]);
    const E = e !== "" ? e * 30 : "", C = i !== "" ? i * 30 : "";
    t < 0 && (t = 360 + t), t = t === 360 ? 0 : t;
    const b = () => {
      const O = document.querySelectorAll(
        `[${Wi}]`
      ), x = document.querySelectorAll(
        `[${Fi}]`
      ), k = Hf(this._hour.innerText);
      let D, S, P;
      return g === it ? S = 1 : g === U && (S = -1), k === 12 && g === it ? P = 1 : k === 0 && g === it ? P = 13 : k === 0 && g === U ? P = 23 : k === 13 && g === U ? P = 0 : k === 1 && g === U ? P = 12 : P = k + S, O.forEach((B) => {
        Number(B.textContent) === P && (D = B);
      }), x.forEach((B) => {
        Number(B.textContent) === P && (D = B);
      }), !D.parentElement.hasAttribute(Ht);
    }, v = () => {
      const O = i !== "" && i > 12 ? (i - 12) * 30 : "", x = e !== "" && e > 12 ? (e - 12) * 30 : "";
      if (!(O && t < O || x && t > x || e && e < 12))
        return !0;
    };
    if (a && r.type !== "keydown" && m)
      return v();
    if (r.type === "keydown")
      return b();
    const T = !o || o === "PM" && f || i !== "" && o === "AM" && _, A = !n || n === "PM" && f || e !== "" && n === "AM" && _, w = () => {
      const O = C === 360 && l ? 0 : C;
      if (i) {
        if (o === "PM" && _ || T && t < O)
          return;
      } else
        return !0;
      return !0;
    }, y = () => {
      const O = E === 360 && l ? 0 : E;
      if (e) {
        if (n === "AM" && f || A && t > O)
          return;
      } else
        return !0;
      return !0;
    };
    return w() && y();
  }
  _handleKeyboard() {
    u.on(this._document, Pi, "", (t) => {
      let e, i, n;
      const {
        increment: o,
        maxTime: r,
        minTime: a,
        format12: l,
        disablePast: c,
        disableFuture: h
      } = this._options;
      let _ = N(a, !1)[0], f = N(r, !1)[0];
      const g = N(a, !1)[2], m = N(r, !1)[2];
      _ = jt(_, c, l), f = Kt(f, h, l), typeof f != "number" && (f = N(f, !1)[0]);
      const E = d.findOne(`[${z}]`) === null, C = d.findOne(`[${st}]`) !== null, b = Number(this._hand.style.transform.replace(/[^\d-]/g, "")), v = d.find(
        `[${z}]`,
        this._modal
      ), T = d.find(
        `[${K}]`,
        this._modal
      ), A = d.find(
        `[${st}]`,
        this._modal
      );
      let w = this._makeHourDegrees(t.target, b, e).hour;
      const { degrees: y, addDegrees: O } = this._makeHourDegrees(
        t.target,
        b,
        e
      );
      let { minute: x, degrees: k } = this._makeMinutesDegrees(b, i);
      const D = this._makeMinutesDegrees(
        b,
        i
      ).addDegrees;
      let { hour: S } = this._makeInnerHoursDegrees(
        b,
        n
      );
      if (t.keyCode === ws) {
        const P = d.findOne(
          `[${ln}]`,
          this._modal
        );
        u.trigger(P, "click");
      } else if (E) {
        if (C && (t.keyCode === De && (this._isInner = !1, p.addStyle(this._hand, {
          height: "calc(40% + 1px)"
        }), this._hour.textContent = this._setHourOrMinute(
          w > 12 ? 1 : w
        ), this._toggleClassActive(this.hoursArray, this._hour, T), this._toggleClassActive(this.innerHours, this._hour, A)), t.keyCode === xe && (this._isInner = !0, p.addStyle(this._hand, {
          height: "21.5%"
        }), this._hour.textContent = this._setHourOrMinute(
          S >= 24 || S === "00" ? 0 : S
        ), this._toggleClassActive(this.innerHours, this._hour, A), this._toggleClassActive(
          this.hoursArray,
          this._hour - 1,
          T
        ))), t.keyCode === it) {
          if (!this._handlerMaxMinHoursOptions(
            y + 30,
            f,
            _,
            m,
            g,
            t
          ))
            return;
          p.addStyle(this._hand, {
            transform: `rotateZ(${y + O}deg)`
          }), this._isInner ? (S += 1, S === 24 ? S = 0 : (S === 25 || S === "001") && (S = 13), this._hour.textContent = this._setHourOrMinute(S), this._toggleClassActive(this.innerHours, this._hour, A)) : (w += 1, this._hour.textContent = this._setHourOrMinute(
            w > 12 ? 1 : w
          ), this._toggleClassActive(this.hoursArray, this._hour, T));
        }
        if (t.keyCode === U) {
          if (!this._handlerMaxMinHoursOptions(
            y - 30,
            f,
            _,
            m,
            g,
            t
          ))
            return;
          p.addStyle(this._hand, {
            transform: `rotateZ(${y - O}deg)`
          }), this._isInner ? (S -= 1, S === 12 ? S = 0 : S === -1 && (S = 23), this._hour.textContent = this._setHourOrMinute(S), this._toggleClassActive(this.innerHours, this._hour, A)) : (w -= 1, this._hour.textContent = this._setHourOrMinute(
            w === 0 ? 12 : w
          ), this._toggleClassActive(this.hoursArray, this._hour, T));
        }
      } else
        t.keyCode === it && (k += D, p.addStyle(this._hand, {
          transform: `rotateZ(${k}deg)`
        }), x += 1, o && (x += 4, x === "0014" && (x = 5)), this._minutes.textContent = this._setHourOrMinute(
          x > 59 ? 0 : x
        ), this._toggleClassActive(
          this.minutesArray,
          this._minutes,
          v
        ), this._toggleBackgroundColorCircle(
          `[${z}]`
        )), t.keyCode === U && (k -= D, p.addStyle(this._hand, {
          transform: `rotateZ(${k}deg)`
        }), o ? x -= 5 : x -= 1, x === -1 ? x = 59 : x === -5 && (x = 55), this._minutes.textContent = this._setHourOrMinute(x), this._toggleClassActive(
          this.minutesArray,
          this._minutes,
          v
        ), this._toggleBackgroundColorCircle(
          `[${z}]`
        ));
    });
  }
  _setActiveClassToTipsOnOpen(t, ...e) {
    if (!this._isInvalidTimeFormat)
      if (this._options.format24) {
        const i = d.find(
          `[${K}]`,
          this._modal
        ), n = d.find(
          `[${st}]`,
          this._modal
        );
        this._addActiveClassToTip(i, t), this._addActiveClassToTip(n, t);
      } else {
        [...e].filter((n) => (n === "PM" ? (p.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, "")) : n === "AM" ? (p.addClass(this._AM, this._classes.opacity), this._AM.setAttribute(H, "")) : (p.removeClass(this._AM, this._classes.opacity), p.removeClass(this._PM, this._classes.opacity), this._AM.removeAttribute(H), this._PM.removeAttribute(H)), n));
        const i = d.find(
          `[${K}]`,
          this._modal
        );
        this._addActiveClassToTip(i, t);
      }
  }
  _setTipsAndTimesDependOnInputValue(t, e) {
    const { inline: i, format12: n } = this._options;
    if (this._isInvalidTimeFormat)
      this._hour.textContent = "12", this._minutes.textContent = "00", i || p.addStyle(this._hand, {
        transform: "rotateZ(0deg)"
      }), n && (p.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, ""));
    else {
      const o = t > 12 ? t * 30 - 360 : t * 30;
      this._hour.textContent = t, this._minutes.textContent = e, i || (p.addStyle(this._hand, {
        transform: `rotateZ(${o}deg)`
      }), p.addStyle(this._circle, {
        backgroundColor: "#1976d2"
      }), (Number(t) > 12 || t === "00") && p.addStyle(this._hand, {
        height: "21.5%"
      }));
    }
  }
  _listenToToggleKeydown() {
    u.on(
      this._element,
      "keydown",
      `[data-te-toggle='${this.toggleElement}']`,
      (t) => {
        t.keyCode === nt && (t.preventDefault(), u.trigger(this.elementToggle, "click"));
      }
    );
  }
  _handleOpen() {
    const t = this._getContainer();
    Jt.on(
      this._element,
      "click",
      `[data-te-toggle='${this.toggleElement}']`,
      (e) => {
        if (this._options === null)
          return;
        const i = p.getDataAttribute(this.input, "toggle") !== null ? 200 : 0;
        setTimeout(() => {
          p.addStyle(this.elementToggle, {
            pointerEvents: "none"
          }), this.elementToggle.blur();
          let n;
          N(this.input)[0] === "" ? n = ["12", "00", "PM"] : n = N(this.input);
          const { modalID: o, inline: r, format12: a } = this._options, [l, c, h] = n, _ = L("div");
          if ((Number(l) > 12 || l === "00") && (this._isInner = !0), this.input.blur(), e.target.blur(), _.innerHTML = Lf(this._options, this._classes), p.addClass(_, this._classes.modal), _.setAttribute(Dr, ""), _.setAttribute("role", "dialog"), _.setAttribute("tabIndex", "-1"), _.setAttribute("id", o), r ? (this._popper = Be(this.input, _, {
            placement: "bottom-start"
          }), t.appendChild(_)) : (t.appendChild(_), this._scrollBar.hide()), this._getDomElements(), this._animations ? this._toggleBackdropAnimation() : p.addClass(this._wrapper, this._classes.opacity), this._setActiveClassToTipsOnOpen(l, c, h), this._appendTimes(), this._setActiveClassToTipsOnOpen(l, c, h), this._setTipsAndTimesDependOnInputValue(l, c), this.input.value === "") {
            const f = d.find(
              `[${K}]`,
              this._modal
            );
            a && (p.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, "")), this._hour.textContent = "12", this._minutes.textContent = "00", this._addActiveClassToTip(
              f,
              Number(this._hour.textContent)
            );
          }
          if (this._handleSwitchTimeMode(), this._handleOkButton(), this._handleClose(), r)
            this._handleHoverInlineBtn(), this._handleDocumentClickInline(), this._handleInlineClicks();
          else {
            this._handleSwitchHourMinute(), this._handleClockClick(), this._handleKeyboard();
            const f = document.querySelector(
              `${Bi}[${H}]`
            );
            p.addClass(f, this._classes.opacity), p.addStyle(this._hour, {
              pointerEvents: "none"
            }), p.addStyle(this._minutes, {
              pointerEvents: ""
            });
          }
          this._focusTrap = new ui(this._wrapper, {
            event: "keydown",
            condition: ({ key: f }) => f === "Tab"
          }), this._focusTrap.trap();
        }, i);
      }
    );
  }
  _handleInlineClicks() {
    let t, e;
    const i = (f) => {
      let g = f;
      return g > 59 ? g = 0 : g < 0 && (g = 59), g;
    }, n = (f) => {
      let g = f;
      return this._options.format24 ? (g > 24 ? g = 1 : g < 0 && (g = 23), g > 23 && (g = 0)) : (g > 12 ? g = 1 : g < 1 && (g = 12), g > 12 && (g = 1)), g;
    }, o = (f) => {
      const g = n(f);
      this._hour.textContent = this._setHourOrMinute(g);
    }, r = (f) => {
      const g = i(f);
      this._minutes.textContent = this._setHourOrMinute(g);
    }, a = () => {
      t += 1, o(t);
    }, l = () => {
      e += 1, r(e);
    }, c = () => {
      t -= 1, o(t);
    }, h = () => {
      e -= 1, r(e);
    }, _ = (f) => {
      clearInterval(this._interval), this._interval = setInterval(f, 100);
    };
    Jt.on(
      this._modal,
      "click mousedown mouseup touchstart touchend contextmenu",
      `[${dn}], [${hn}]`,
      (f) => {
        t = Number(this._hour.textContent), e = Number(this._minutes.textContent);
        const { target: g, type: m } = f, E = m === "mousedown" || m === "touchstart";
        g.closest(`[${dn}]`) ? g.closest(`[${dn}]`).parentNode.hasAttribute(Or) ? E ? _(a) : m === "mouseup" || m === "touchend" || m === "contextmenu" ? clearInterval(this._interval) : a() : E ? _(l) : m === "mouseup" || m === "touchend" || m === "contextmenu" ? clearInterval(this._interval) : l() : g.closest(`[${hn}]`) && (g.closest(`[${hn}]`).parentNode.hasAttribute(Or) ? E ? _(c) : m === "mouseup" || m === "touchend" ? clearInterval(this._interval) : c() : E ? _(h) : m === "mouseup" || m === "touchend" ? clearInterval(this._interval) : h());
      }
    ), u.on(window, Pi, (f) => {
      const g = f.code, m = document.activeElement.hasAttribute(Vi), E = document.activeElement.hasAttribute(
        fn
      ), C = document.activeElement === document.body;
      switch (t = Number(this._hour.textContent), e = Number(this._minutes.textContent), g) {
        case "ArrowUp":
          f.preventDefault(), C || m ? (this._hour.focus(), a()) : E && l();
          break;
        case "ArrowDown":
          f.preventDefault(), C || m ? (this._hour.focus(), c()) : E && h();
          break;
      }
    });
  }
  _handleClose() {
    u.on(
      this._modal,
      "click",
      `[${pn}], [${ln}], [${wr}]`,
      ({ target: t }) => {
        const { closeModalOnBackdropClick: e } = this._options, i = () => {
          var n;
          p.addStyle(this.elementToggle, {
            pointerEvents: "auto"
          }), this._animations && this._toggleBackdropAnimation(!0), this._removeModal(), (n = this._focusTrap) == null || n.disable(), this._focusTrap = null, this.elementToggle ? this.elementToggle.focus() : this.input && this.input.focus();
        };
        if (t.hasAttribute(wr)) {
          this._toggleAmPm("PM"), this.input.value = "", this.input.removeAttribute(H);
          let n;
          N(this.input)[0] === "" ? n = ["12", "00", "PM"] : n = N(this.input);
          const [o, r, a] = n;
          this._setTipsAndTimesDependOnInputValue("12", "00"), this._setActiveClassToTipsOnOpen(o, r, a), this._hour.click();
        } else
          (t.hasAttribute(ln) || t.hasAttribute(cn) || t.hasAttribute(pn) && e) && i();
      }
    );
  }
  showValueInput() {
    return this.input.value;
  }
  _handleOkButton() {
    Jt.on(
      this._modal,
      "click",
      `[${cn}]`,
      () => {
        let { maxTime: t, minTime: e } = this._options;
        const {
          format12: i,
          format24: n,
          readOnly: o,
          focusInputAfterApprove: r,
          disablePast: a,
          disableFuture: l
        } = this._options, c = this._document.querySelector(
          `${Hi}[${H}]`
        ), h = `${this._hour.textContent}:${this._minutes.textContent}`, _ = Number(this._hour.textContent), f = _ === 12 && i ? 0 : _, g = Number(this._minutes.textContent);
        e = jt(e, a, i), t = Kt(t, l, i);
        let [m, E, C] = N(
          t,
          !1
        ), [b, v, T] = N(
          e,
          !1
        );
        b = b === "12" && i ? "00" : b, m = m === "12" && i ? "00" : m;
        const A = f < Number(b), w = f > Number(m);
        let y = !0;
        c && (y = C === c.textContent);
        let O = !0;
        c && (O = T === c.textContent);
        const x = g > E && f === Number(m), k = g < v && f === Number(b);
        if (this.input.setAttribute(H, ""), p.addStyle(this.elementToggle, {
          pointerEvents: "auto"
        }), t !== "") {
          if (y && (w || x))
            return;
          if (C === "AM" && c.textContent === "PM")
            return;
        }
        e !== "" && (O && (A || k) || T === "PM" && c.textContent === "AM") || Rf(
          this._options,
          this.input,
          this._hour.textContent
        ) !== void 0 && (this._isInvalidTimeFormat && this.input.removeAttribute(un), !o && r && this.input.focus(), p.addStyle(this.elementToggle, {
          pointerEvents: "auto"
        }), n ? this.input.value = h : c === null ? this.input.value = `${h} PM` : this.input.value = `${h} ${c.textContent}`, this._animations && this._toggleBackdropAnimation(!0), this._removeModal(), u.trigger(this.input, "input.te.timepicker"), u.trigger(this.input, "input"));
      }
    );
  }
  _handleHoverInlineBtn() {
    Jt.on(
      this._modal,
      "mouseover mouseleave",
      `[${zf}]`,
      ({ type: t, target: e }) => {
        const i = d.find(
          `[${Kf}]`,
          this._modal
        ), n = d.find(
          `[${Uf}]`,
          this._modal
        ), o = (l, c) => l.forEach((h) => {
          if (c) {
            p.addClass(h, this._classes.opacity), h.setAttribute(H, "");
            return;
          }
          p.removeClass(h, this._classes.opacity), h.removeAttribute(H);
        }), a = e.hasAttribute(Vi) ? i : n;
        o(a, t === "mouseover");
      }
    );
  }
  _handleDocumentClickInline() {
    u.on(document, mr, ({ target: t }) => {
      if (this._modal && !this._modal.contains(t) && !t.hasAttribute(jf)) {
        if (clearInterval(this._interval), p.addStyle(this.elementToggle, {
          pointerEvents: "auto"
        }), this._removeModal(), !this._animations)
          return;
        this._toggleBackdropAnimation(!0);
      }
    });
  }
  _handleSwitchHourMinute() {
    Nf(
      "click",
      Bi,
      this._classes
    ), u.on(
      this._modal,
      "click",
      Bi,
      () => {
        const { format24: t } = this._options, e = d.find(
          Bi,
          this._modal
        ), i = d.find(
          `[${z}]`,
          this._modal
        ), n = d.find(
          `[${K}]`,
          this._modal
        ), o = d.find(
          `[${st}]`,
          this._modal
        ), r = Number(this._hour.textContent), a = Number(this._minutes.textContent), l = (c, h) => {
          n.forEach((f) => f.remove()), i.forEach((f) => f.remove()), p.addClass(this._hand, this._classes.transform), setTimeout(() => {
            p.removeClass(this._hand, this._classes.transform);
          }, 401), this._getAppendClock(c, `[${re}]`, h);
          const _ = () => {
            const f = d.find(
              `[${K}]`,
              this._modal
            ), g = d.find(
              `[${z}]`,
              this._modal
            );
            this._addActiveClassToTip(f, r), this._addActiveClassToTip(g, a);
          };
          if (!t)
            setTimeout(() => {
              _();
            }, 401);
          else {
            const f = d.find(
              `[${st}]`,
              this._modal
            );
            setTimeout(() => {
              this._addActiveClassToTip(f, r), _();
            }, 401);
          }
        };
        e.forEach((c) => {
          c.hasAttribute(H) && (c.hasAttribute(fn) ? (p.addClass(this._hand, this._classes.transform), p.addStyle(this._hand, {
            transform: `rotateZ(${this._minutes.textContent * 6}deg)`,
            height: "calc(40% + 1px)"
          }), t && o.length > 0 && o.forEach((h) => h.remove()), l(
            this.minutesArray,
            z
          ), this._hour.style.pointerEvents = "", this._minutes.style.pointerEvents = "none") : c.hasAttribute(Vi) && (p.addStyle(this._hand, {
            transform: `rotateZ(${this._hour.textContent * 30}deg)`
          }), Number(this._hour.textContent) > 12 ? (p.addStyle(this._hand, {
            transform: `rotateZ(${this._hour.textContent * 30 - 360}deg)`,
            height: "21.5%"
          }), Number(this._hour.textContent) > 12 && p.addStyle(this._hand, {
            height: "21.5%"
          })) : p.addStyle(this._hand, {
            height: "calc(40% + 1px)"
          }), t && this._getAppendClock(
            this.innerHours,
            `[${Ke}]`,
            st
          ), o.length > 0 && o.forEach((h) => h.remove()), l(
            this.hoursArray,
            K
          ), p.addStyle(this._hour, {
            pointerEvents: "none"
          }), p.addStyle(this._minutes, {
            pointerEvents: ""
          })));
        });
      }
    );
  }
  _handleDisablingTipsMaxTime(t, e, i, n) {
    if (!this._options.maxTime && !this._options.disableFuture)
      return;
    const o = d.find(
      `[${K}]`
    ), r = d.find(
      `[${st}]`
    ), a = d.find(
      `[${z}]`
    );
    if (!e || e === t) {
      pr(
        r,
        n,
        this._classes,
        this._options.format12
      ), pr(
        o,
        n,
        this._classes,
        this._options.format12
      ), Pf(
        a,
        i,
        n,
        this._hour.textContent,
        this._classes,
        this._options.format12
      );
      return;
    }
    e === "AM" && t === "PM" && (o.forEach((l) => {
      p.addClass(l, this._classes.tipsDisabled), l.setAttribute(Ht, "");
    }), a.forEach((l) => {
      p.addClass(l, this._classes.tipsDisabled), l.setAttribute(Ht, "");
    }));
  }
  _handleDisablingTipsMinTime(t, e, i, n) {
    if (!this._options.minTime && !this._options.disablePast)
      return;
    const o = d.find(
      `[${K}]`
    ), r = d.find(
      `[${st}]`
    ), a = d.find(
      `[${z}]`
    );
    !e || e === t ? (fr(
      o,
      n,
      this._classes,
      this._options.format12
    ), fr(
      r,
      n,
      this._classes,
      this._options.format12
    ), Bf(
      a,
      i,
      n,
      this._hour.textContent,
      this._classes,
      this._options.format12
    )) : e === "PM" && t === "AM" && (o.forEach((l) => {
      p.addClass(l, this._classes.tipsDisabled), l.setAttribute(Ht, "");
    }), a.forEach((l) => {
      p.addClass(l, this._classes.tipsDisabled), l.setAttribute(Ht, "");
    }));
  }
  _handleSwitchTimeMode() {
    u.on(
      document,
      "click",
      Hi,
      ({ target: t }) => {
        let { maxTime: e, minTime: i } = this._options;
        const { disablePast: n, disableFuture: o, format12: r } = this._options;
        i = jt(i, n, r), e = Kt(e, o, r);
        const [a, l, c] = N(
          e,
          !1
        ), [h, _, f] = N(
          i,
          !1
        ), g = d.find(
          `[${K}]`
        ), m = d.find(
          `[${z}]`
        );
        (() => {
          g.forEach((C) => {
            p.removeClass(C, this._classes.tipsDisabled), C.removeAttribute(Ht);
          }), m.forEach((C) => {
            p.removeClass(C, this._classes.tipsDisabled), C.removeAttribute(Ht);
          });
        })(), this._handleDisablingTipsMinTime(
          t.textContent,
          f,
          _,
          h
        ), this._handleDisablingTipsMaxTime(
          t.textContent,
          c,
          l,
          a
        ), this._toggleAmPm(t.textContent), t.hasAttribute(H) || (d.find(
          Hi
        ).forEach((b) => {
          b.hasAttribute(H) && (p.removeClass(b, this._classes.opacity), b.removeAttribute(H));
        }), p.addClass(t, this._classes.opacity), t.setAttribute(H, ""));
      }
    );
  }
  _handleClockClick() {
    let { maxTime: t, minTime: e } = this._options;
    const { disablePast: i, disableFuture: n, format12: o } = this._options;
    e = jt(e, i, o), t = Kt(t, n, o);
    const r = N(t, !1)[2], a = N(e, !1)[2], l = N(t, !1)[0], c = N(e, !1)[0], h = d.findOne(
      `[${Sr}]`
    );
    Jt.on(
      document,
      `${gr} ${br} ${vr} ${Er} ${Tr} ${yr} ${Cr} ${Ar}`,
      "",
      (_) => {
        Ri() || _.preventDefault();
        const { type: f, target: g } = _, { closeModalOnMinutesClick: m, switchHoursToMinutesOnClick: E } = this._options, C = d.findOne(
          `[${z}]`,
          this._modal
        ) !== null, b = d.findOne(
          `[${K}]`,
          this._modal
        ) !== null, v = d.findOne(
          `[${st}]`,
          this._modal
        ) !== null, T = d.find(
          `[${z}]`,
          this._modal
        ), A = ur(_, h), w = h.offsetWidth / 2;
        let y = Math.atan2(A.y - w, A.x - w);
        if (Ri()) {
          const D = ur(_, h, !0);
          y = Math.atan2(D.y - w, D.x - w);
        }
        let O = null, x = null, k = null;
        if (f === "mousedown" || f === "mousemove" || f === "touchmove" || f === "touchstart")
          (f === "mousedown" || f === "touchstart" || f === "touchmove") && (this._hasTargetInnerClass(g) || g.hasAttribute(Sr) || g.hasAttribute(re) || g.hasAttribute(z) || g.hasAttribute(K) || g.hasAttribute(mn) || g.hasAttribute(_n) || g.hasAttribute(xr) || g.hasAttribute(Wi)) && (this._isMouseMove = !0, Ri() && _.touches && (O = _.touches[0].clientX, x = _.touches[0].clientY, k = document.elementFromPoint(O, x)));
        else if (f === "mouseup" || f === "touchend") {
          if (this._isMouseMove = !1, this._hasTargetInnerClass(g) || g.hasAttribute(re) || g.hasAttribute(K) || g.hasAttribute(mn) || g.hasAttribute(_n) || g.hasAttribute(xr) || g.hasAttribute(Wi)) {
            if ((b || v) && E) {
              const D = Number(this._hour.textContent) > l || Number(this._hour.textContent) < c;
              if (this._options.format24 && l !== "" && c !== "" && D)
                return;
              if (this._options.format24 && c !== "" && Number(this._hour.textContent) < c)
                return;
            }
            u.trigger(this._minutes, "click");
          }
          if (C && m) {
            const D = d.findOne(
              `[${cn}]`,
              this._modal
            );
            u.trigger(D, "click");
          }
        }
        if (C) {
          let D;
          const S = Math.trunc(y * 180 / Math.PI) + 90, { degrees: P, minute: B } = this._makeMinutesDegrees(S, D);
          if (this._handlerMaxMinMinutesOptions(P, B) === void 0)
            return;
          const { degrees: Q, minute: lt } = this._handlerMaxMinMinutesOptions(P, B);
          if (this._isMouseMove) {
            if (p.addStyle(this._hand, {
              transform: `rotateZ(${Q}deg)`
            }), lt === void 0)
              return;
            const Nt = () => lt >= 10 || lt === "00" ? lt : `0${lt}`;
            this._minutes.textContent = Nt(), this._toggleClassActive(
              this.minutesArray,
              this._minutes,
              T
            ), this._toggleBackgroundColorCircle(
              `[${z}]`
            ), this._objWithDataOnChange.degreesMinutes = Q, this._objWithDataOnChange.minutes = lt;
          }
        }
        if (b || v) {
          let D, S = Math.trunc(y * 180 / Math.PI) + 90;
          if (S = Math.round(S / 30) * 30, p.addStyle(this._circle, {
            backgroundColor: "#1976d2"
          }), this._makeHourDegrees(g, S, D) === void 0)
            return;
          const P = () => {
            if (Ri() && S && k) {
              const { degrees: B, hour: Q } = this._makeHourDegrees(k, S, D);
              return this._handleMoveHand(
                k,
                Q,
                B
              );
            } else {
              const { degrees: B, hour: Q } = this._makeHourDegrees(g, S, D);
              return this._handleMoveHand(g, Q, B);
            }
          };
          this._objWithDataOnChange.degreesHours = S, this._handlerMaxMinHoursOptions(
            S,
            l,
            c,
            r,
            a,
            _
          ) && P();
        }
        _.stopPropagation();
      }
    );
  }
  _hasTargetInnerClass(t) {
    return t.hasAttribute(Ke) || t.hasAttribute(st) || t.hasAttribute(Fi);
  }
  _handleMoveHand(t, e, i) {
    const n = d.find(
      `[${K}]`,
      this._modal
    ), o = d.find(
      `[${st}]`,
      this._modal
    );
    this._isMouseMove && (this._hasTargetInnerClass(t) ? p.addStyle(this._hand, {
      height: "21.5%"
    }) : p.addStyle(this._hand, {
      height: "calc(40% + 1px)"
    }), p.addStyle(this._hand, {
      transform: `rotateZ(${i}deg)`
    }), this._hour.textContent = e >= 10 || e === "00" ? e : `0${e}`, this._toggleClassActive(this.hoursArray, this._hour, n), this._toggleClassActive(this.innerHours, this._hour, o), this._objWithDataOnChange.hour = e >= 10 || e === "00" ? e : `0${e}`);
  }
  _handlerMaxMinMinutesOptions(t, e) {
    let { maxTime: i, minTime: n } = this._options;
    const { format12: o, increment: r, disablePast: a, disableFuture: l } = this._options;
    n = jt(n, a, o), i = Kt(i, l, o);
    const c = N(i, !1)[1], h = N(n, !1)[1], _ = N(i, !1)[0], f = N(n, !1)[0], g = f === "12" && o ? "0" : f, m = _ === "12" && o ? "0" : _, E = N(i, !1)[2], C = N(n, !1)[2], b = c !== "" ? c * 6 : "", v = h !== "" ? h * 6 : "", T = Number(this._hour.textContent), A = T === 12 && o ? 0 : T;
    if (!E && !C) {
      if (i !== "" && n !== "") {
        if (Number(m) === A && t > b || Number(g) === A && t < v)
          return t;
      } else if (n !== "" && A <= Number(g)) {
        if (t <= v - 6)
          return t;
      } else if (i !== "" && A >= Number(m) && t >= b + 6)
        return t;
    } else {
      if (n !== "") {
        if (C === "PM" && this._isAmEnabled)
          return;
        if (C === "PM" && this._isPmEnabled) {
          if (A < Number(g))
            return;
          if (A <= Number(g) && t <= v - 6)
            return t;
        } else if (C === "AM" && this._isAmEnabled) {
          if (A < Number(g))
            return;
          if (A <= Number(g) && t <= v - 6)
            return t;
        }
      }
      if (i !== "") {
        if (E === "AM" && this._isPmEnabled)
          return;
        if (E === "PM" && this._isPmEnabled) {
          if (A >= Number(m) && t >= b + 6)
            return t;
        } else if (E === "AM" && this._isAmEnabled && A >= Number(m) && t >= b + 6)
          return t;
      }
    }
    return r && (t = Math.round(t / 30) * 30), t < 0 ? t = 360 + t : t >= 360 && (t = 0), {
      degrees: t,
      minute: e
    };
  }
  _removeModal() {
    this._animations ? setTimeout(() => {
      this._removeModalElements(), this._scrollBar.reset();
    }, 300) : (this._removeModalElements(), this._scrollBar.reset()), Jt.off(
      this._document,
      `${mr} ${Pi} ${gr} ${br} ${vr} ${Er} ${Tr} ${yr} ${Cr} ${Ar}`
    ), u.off(window, Pi);
  }
  _removeModalElements() {
    this._modal && this._modal.remove();
  }
  _toggleBackdropAnimation(t = !1) {
    t ? this._wrapper.classList.add("animate-[fade-out_350ms_ease-in-out]") : (this._wrapper.classList.add("animate-[fade-in_350ms_ease-in-out]"), this._options.inline || p.addClass(this._clock, this._classes.clockAnimation)), setTimeout(() => {
      this._wrapper.classList.remove(
        "animate-[fade-out_350ms_ease-in-out]",
        "animate-[fade-in_350ms_ease-in-out]"
      );
    }, 351);
  }
  _addActiveClassToTip(t, e) {
    t.forEach((i) => {
      Number(i.textContent) === Number(e) && (p.addClass(i, this._classes.tipsActive), i.setAttribute(H, ""));
    });
  }
  _setHourOrMinute(t) {
    return t < 10 ? `0${t}` : t;
  }
  _appendTimes() {
    const { format24: t } = this._options;
    if (t) {
      this._getAppendClock(
        this.hoursArray,
        `[${re}]`,
        K
      ), this._getAppendClock(
        this.innerHours,
        `[${Ke}]`,
        st
      );
      return;
    }
    this._getAppendClock(
      this.hoursArray,
      `[${re}]`,
      K
    );
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._element);
    return t = {
      ...Qf,
      ...e,
      ...t
    }, M(ii, t, Zf), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Jf,
      ...e,
      ...t
    }, M(ii, t, t_), t;
  }
  _getContainer() {
    return d.findOne(this._options.container);
  }
  _getValidate(t) {
    const { invalidLabel: e, format24: i, format12: n, appendValidationInfo: o } = this._options;
    let r;
    o && (r = L("div"), r.setAttribute(kr, ""), r.innerHTML = e), Jt.on(this.input, t, ({ target: a }) => {
      if (this._options === null || this.input.value === "")
        return;
      const l = /^(0?[1-9]|1[012])(:[0-5]\d) [APap][mM]$/, c = /^([01]\d|2[0-3])(:[0-5]\d)$/, h = l.test(a.value);
      if (c.test(a.value) !== !0 && i || h !== !0 && n) {
        o && (this.input.setAttribute(un, ""), this.input.parentNode.insertBefore(
          r,
          this.input.nextSibling
        )), p.addStyle(a, { marginBottom: 0 }), p.addStyle(r, { bottom: "-23px" }), this._isInvalidTimeFormat = !0;
        return;
      }
      this.input.removeAttribute(un), this._isInvalidTimeFormat = !1;
      const f = d.findOne(
        `[${kr}]`
      );
      f !== null && f.remove();
    });
  }
  // Static
  static getInstance(t) {
    return I.getData(t, cs);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
/*!
 * perfect-scrollbar v1.5.3
 * Copyright 2021 Hyunje Jun, MDBootstrap and Contributors
 * Licensed under MIT
 */
function St(s) {
  return getComputedStyle(s);
}
function et(s, t) {
  for (var e in t) {
    var i = t[e];
    typeof i == "number" && (i = i + "px"), s.style[e] = i;
  }
  return s;
}
function Yi(s) {
  var t = document.createElement("div");
  return t.className = s, t;
}
var Ir = typeof Element < "u" && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector);
function zt(s, t) {
  if (!Ir)
    throw new Error("No element matching method supported");
  return Ir.call(s, t);
}
function ke(s) {
  s.remove ? s.remove() : s.parentNode && s.parentNode.removeChild(s);
}
function $r(s, t) {
  return Array.prototype.filter.call(
    s.children,
    function(e) {
      return zt(e, t);
    }
  );
}
var j = {
  main: "ps",
  rtl: "ps__rtl",
  element: {
    thumb: function(s) {
      return "ps__thumb-" + s;
    },
    rail: function(s) {
      return "ps__rail-" + s;
    },
    consuming: "ps__child--consume"
  },
  state: {
    focus: "ps--focus",
    clicking: "ps--clicking",
    active: function(s) {
      return "ps--active-" + s;
    },
    scrolling: function(s) {
      return "ps--scrolling-" + s;
    }
  }
}, cl = { x: null, y: null };
function dl(s, t) {
  var e = s.element.classList, i = j.state.scrolling(t);
  e.contains(i) ? clearTimeout(cl[t]) : e.add(i);
}
function hl(s, t) {
  cl[t] = setTimeout(
    function() {
      return s.isAlive && s.element.classList.remove(j.state.scrolling(t));
    },
    s.settings.scrollingThreshold
  );
}
function e_(s, t) {
  dl(s, t), hl(s, t);
}
var fi = function(t) {
  this.element = t, this.handlers = {};
}, ul = { isEmpty: { configurable: !0 } };
fi.prototype.bind = function(t, e) {
  typeof this.handlers[t] > "u" && (this.handlers[t] = []), this.handlers[t].push(e), this.element.addEventListener(t, e, !1);
};
fi.prototype.unbind = function(t, e) {
  var i = this;
  this.handlers[t] = this.handlers[t].filter(function(n) {
    return e && n !== e ? !0 : (i.element.removeEventListener(t, n, !1), !1);
  });
};
fi.prototype.unbindAll = function() {
  for (var t in this.handlers)
    this.unbind(t);
};
ul.isEmpty.get = function() {
  var s = this;
  return Object.keys(this.handlers).every(
    function(t) {
      return s.handlers[t].length === 0;
    }
  );
};
Object.defineProperties(fi.prototype, ul);
var Ve = function() {
  this.eventElements = [];
};
Ve.prototype.eventElement = function(t) {
  var e = this.eventElements.filter(function(i) {
    return i.element === t;
  })[0];
  return e || (e = new fi(t), this.eventElements.push(e)), e;
};
Ve.prototype.bind = function(t, e, i) {
  this.eventElement(t).bind(e, i);
};
Ve.prototype.unbind = function(t, e, i) {
  var n = this.eventElement(t);
  n.unbind(e, i), n.isEmpty && this.eventElements.splice(this.eventElements.indexOf(n), 1);
};
Ve.prototype.unbindAll = function() {
  this.eventElements.forEach(function(t) {
    return t.unbindAll();
  }), this.eventElements = [];
};
Ve.prototype.once = function(t, e, i) {
  var n = this.eventElement(t), o = function(r) {
    n.unbind(e, o), i(r);
  };
  n.bind(e, o);
};
function ji(s) {
  if (typeof window.CustomEvent == "function")
    return new CustomEvent(s);
  var t = document.createEvent("CustomEvent");
  return t.initCustomEvent(s, !1, !1, void 0), t;
}
function gs(s, t, e, i, n) {
  i === void 0 && (i = !0), n === void 0 && (n = !1);
  var o;
  if (t === "top")
    o = [
      "contentHeight",
      "containerHeight",
      "scrollTop",
      "y",
      "up",
      "down"
    ];
  else if (t === "left")
    o = [
      "contentWidth",
      "containerWidth",
      "scrollLeft",
      "x",
      "left",
      "right"
    ];
  else
    throw new Error("A proper axis should be provided");
  i_(s, e, o, i, n);
}
function i_(s, t, e, i, n) {
  var o = e[0], r = e[1], a = e[2], l = e[3], c = e[4], h = e[5];
  i === void 0 && (i = !0), n === void 0 && (n = !1);
  var _ = s.element;
  s.reach[l] = null, _[a] < 1 && (s.reach[l] = "start"), _[a] > s[o] - s[r] - 1 && (s.reach[l] = "end"), t && (_.dispatchEvent(ji("ps-scroll-" + l)), t < 0 ? _.dispatchEvent(ji("ps-scroll-" + c)) : t > 0 && _.dispatchEvent(ji("ps-scroll-" + h)), i && e_(s, l)), s.reach[l] && (t || n) && _.dispatchEvent(ji("ps-" + l + "-reach-" + s.reach[l]));
}
function W(s) {
  return parseInt(s, 10) || 0;
}
function s_(s) {
  return zt(s, "input,[contenteditable]") || zt(s, "select,[contenteditable]") || zt(s, "textarea,[contenteditable]") || zt(s, "button,[contenteditable]");
}
function n_(s) {
  var t = St(s);
  return W(t.width) + W(t.paddingLeft) + W(t.paddingRight) + W(t.borderLeftWidth) + W(t.borderRightWidth);
}
var ye = {
  isWebKit: typeof document < "u" && "WebkitAppearance" in document.documentElement.style,
  supportsTouch: typeof window < "u" && ("ontouchstart" in window || "maxTouchPoints" in window.navigator && window.navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch),
  supportsIePointer: typeof navigator < "u" && navigator.msMaxTouchPoints,
  isChrome: typeof navigator < "u" && /Chrome/i.test(navigator && navigator.userAgent)
};
function Lt(s) {
  var t = s.element, e = Math.floor(t.scrollTop), i = t.getBoundingClientRect();
  s.containerWidth = Math.round(i.width), s.containerHeight = Math.round(i.height), s.contentWidth = t.scrollWidth, s.contentHeight = t.scrollHeight, t.contains(s.scrollbarXRail) || ($r(t, j.element.rail("x")).forEach(
    function(n) {
      return ke(n);
    }
  ), t.appendChild(s.scrollbarXRail)), t.contains(s.scrollbarYRail) || ($r(t, j.element.rail("y")).forEach(
    function(n) {
      return ke(n);
    }
  ), t.appendChild(s.scrollbarYRail)), !s.settings.suppressScrollX && s.containerWidth + s.settings.scrollXMarginOffset < s.contentWidth ? (s.scrollbarXActive = !0, s.railXWidth = s.containerWidth - s.railXMarginWidth, s.railXRatio = s.containerWidth / s.railXWidth, s.scrollbarXWidth = Lr(
    s,
    W(s.railXWidth * s.containerWidth / s.contentWidth)
  ), s.scrollbarXLeft = W(
    (s.negativeScrollAdjustment + t.scrollLeft) * (s.railXWidth - s.scrollbarXWidth) / (s.contentWidth - s.containerWidth)
  )) : s.scrollbarXActive = !1, !s.settings.suppressScrollY && s.containerHeight + s.settings.scrollYMarginOffset < s.contentHeight ? (s.scrollbarYActive = !0, s.railYHeight = s.containerHeight - s.railYMarginHeight, s.railYRatio = s.containerHeight / s.railYHeight, s.scrollbarYHeight = Lr(
    s,
    W(s.railYHeight * s.containerHeight / s.contentHeight)
  ), s.scrollbarYTop = W(
    e * (s.railYHeight - s.scrollbarYHeight) / (s.contentHeight - s.containerHeight)
  )) : s.scrollbarYActive = !1, s.scrollbarXLeft >= s.railXWidth - s.scrollbarXWidth && (s.scrollbarXLeft = s.railXWidth - s.scrollbarXWidth), s.scrollbarYTop >= s.railYHeight - s.scrollbarYHeight && (s.scrollbarYTop = s.railYHeight - s.scrollbarYHeight), o_(t, s), s.scrollbarXActive ? t.classList.add(j.state.active("x")) : (t.classList.remove(j.state.active("x")), s.scrollbarXWidth = 0, s.scrollbarXLeft = 0, t.scrollLeft = s.isRtl === !0 ? s.contentWidth : 0), s.scrollbarYActive ? t.classList.add(j.state.active("y")) : (t.classList.remove(j.state.active("y")), s.scrollbarYHeight = 0, s.scrollbarYTop = 0, t.scrollTop = 0);
}
function Lr(s, t) {
  return s.settings.minScrollbarLength && (t = Math.max(t, s.settings.minScrollbarLength)), s.settings.maxScrollbarLength && (t = Math.min(t, s.settings.maxScrollbarLength)), t;
}
function o_(s, t) {
  var e = { width: t.railXWidth }, i = Math.floor(s.scrollTop);
  t.isRtl ? e.left = t.negativeScrollAdjustment + s.scrollLeft + t.containerWidth - t.contentWidth : e.left = s.scrollLeft, t.isScrollbarXUsingBottom ? e.bottom = t.scrollbarXBottom - i : e.top = t.scrollbarXTop + i, et(t.scrollbarXRail, e);
  var n = { top: i, height: t.railYHeight };
  t.isScrollbarYUsingRight ? t.isRtl ? n.right = t.contentWidth - (t.negativeScrollAdjustment + s.scrollLeft) - t.scrollbarYRight - t.scrollbarYOuterWidth - 9 : n.right = t.scrollbarYRight - s.scrollLeft : t.isRtl ? n.left = t.negativeScrollAdjustment + s.scrollLeft + t.containerWidth * 2 - t.contentWidth - t.scrollbarYLeft - t.scrollbarYOuterWidth : n.left = t.scrollbarYLeft + s.scrollLeft, et(t.scrollbarYRail, n), et(t.scrollbarX, {
    left: t.scrollbarXLeft,
    width: t.scrollbarXWidth - t.railBorderXWidth
  }), et(t.scrollbarY, {
    top: t.scrollbarYTop,
    height: t.scrollbarYHeight - t.railBorderYWidth
  });
}
function r_(s) {
  s.element, s.event.bind(s.scrollbarY, "mousedown", function(t) {
    return t.stopPropagation();
  }), s.event.bind(s.scrollbarYRail, "mousedown", function(t) {
    var e = t.pageY - window.pageYOffset - s.scrollbarYRail.getBoundingClientRect().top, i = e > s.scrollbarYTop ? 1 : -1;
    s.element.scrollTop += i * s.containerHeight, Lt(s), t.stopPropagation();
  }), s.event.bind(s.scrollbarX, "mousedown", function(t) {
    return t.stopPropagation();
  }), s.event.bind(s.scrollbarXRail, "mousedown", function(t) {
    var e = t.pageX - window.pageXOffset - s.scrollbarXRail.getBoundingClientRect().left, i = e > s.scrollbarXLeft ? 1 : -1;
    s.element.scrollLeft += i * s.containerWidth, Lt(s), t.stopPropagation();
  });
}
function a_(s) {
  Mr(s, [
    "containerWidth",
    "contentWidth",
    "pageX",
    "railXWidth",
    "scrollbarX",
    "scrollbarXWidth",
    "scrollLeft",
    "x",
    "scrollbarXRail"
  ]), Mr(s, [
    "containerHeight",
    "contentHeight",
    "pageY",
    "railYHeight",
    "scrollbarY",
    "scrollbarYHeight",
    "scrollTop",
    "y",
    "scrollbarYRail"
  ]);
}
function Mr(s, t) {
  var e = t[0], i = t[1], n = t[2], o = t[3], r = t[4], a = t[5], l = t[6], c = t[7], h = t[8], _ = s.element, f = null, g = null, m = null;
  function E(v) {
    v.touches && v.touches[0] && (v[n] = v.touches[0].pageY), _[l] = f + m * (v[n] - g), dl(s, c), Lt(s), v.stopPropagation(), v.type.startsWith("touch") && v.changedTouches.length > 1 && v.preventDefault();
  }
  function C() {
    hl(s, c), s[h].classList.remove(j.state.clicking), s.event.unbind(s.ownerDocument, "mousemove", E);
  }
  function b(v, T) {
    f = _[l], T && v.touches && (v[n] = v.touches[0].pageY), g = v[n], m = (s[i] - s[e]) / (s[o] - s[a]), T ? s.event.bind(s.ownerDocument, "touchmove", E) : (s.event.bind(s.ownerDocument, "mousemove", E), s.event.once(s.ownerDocument, "mouseup", C), v.preventDefault()), s[h].classList.add(j.state.clicking), v.stopPropagation();
  }
  s.event.bind(s[r], "mousedown", function(v) {
    b(v);
  }), s.event.bind(s[r], "touchstart", function(v) {
    b(v, !0);
  });
}
function l_(s) {
  var t = s.element, e = function() {
    return zt(t, ":hover");
  }, i = function() {
    return zt(s.scrollbarX, ":focus") || zt(s.scrollbarY, ":focus");
  };
  function n(o, r) {
    var a = Math.floor(t.scrollTop);
    if (o === 0) {
      if (!s.scrollbarYActive)
        return !1;
      if (a === 0 && r > 0 || a >= s.contentHeight - s.containerHeight && r < 0)
        return !s.settings.wheelPropagation;
    }
    var l = t.scrollLeft;
    if (r === 0) {
      if (!s.scrollbarXActive)
        return !1;
      if (l === 0 && o < 0 || l >= s.contentWidth - s.containerWidth && o > 0)
        return !s.settings.wheelPropagation;
    }
    return !0;
  }
  s.event.bind(s.ownerDocument, "keydown", function(o) {
    if (!(o.isDefaultPrevented && o.isDefaultPrevented() || o.defaultPrevented) && !(!e() && !i())) {
      var r = document.activeElement ? document.activeElement : s.ownerDocument.activeElement;
      if (r) {
        if (r.tagName === "IFRAME")
          r = r.contentDocument.activeElement;
        else
          for (; r.shadowRoot; )
            r = r.shadowRoot.activeElement;
        if (s_(r))
          return;
      }
      var a = 0, l = 0;
      switch (o.which) {
        case 37:
          o.metaKey ? a = -s.contentWidth : o.altKey ? a = -s.containerWidth : a = -30;
          break;
        case 38:
          o.metaKey ? l = s.contentHeight : o.altKey ? l = s.containerHeight : l = 30;
          break;
        case 39:
          o.metaKey ? a = s.contentWidth : o.altKey ? a = s.containerWidth : a = 30;
          break;
        case 40:
          o.metaKey ? l = -s.contentHeight : o.altKey ? l = -s.containerHeight : l = -30;
          break;
        case 32:
          o.shiftKey ? l = s.containerHeight : l = -s.containerHeight;
          break;
        case 33:
          l = s.containerHeight;
          break;
        case 34:
          l = -s.containerHeight;
          break;
        case 36:
          l = s.contentHeight;
          break;
        case 35:
          l = -s.contentHeight;
          break;
        default:
          return;
      }
      s.settings.suppressScrollX && a !== 0 || s.settings.suppressScrollY && l !== 0 || (t.scrollTop -= l, t.scrollLeft += a, Lt(s), n(a, l) && o.preventDefault());
    }
  });
}
function c_(s) {
  var t = s.element;
  function e(r, a) {
    var l = Math.floor(t.scrollTop), c = t.scrollTop === 0, h = l + t.offsetHeight === t.scrollHeight, _ = t.scrollLeft === 0, f = t.scrollLeft + t.offsetWidth === t.scrollWidth, g;
    return Math.abs(a) > Math.abs(r) ? g = c || h : g = _ || f, g ? !s.settings.wheelPropagation : !0;
  }
  function i(r) {
    var a = r.deltaX, l = -1 * r.deltaY;
    return (typeof a > "u" || typeof l > "u") && (a = -1 * r.wheelDeltaX / 6, l = r.wheelDeltaY / 6), r.deltaMode && r.deltaMode === 1 && (a *= 10, l *= 10), a !== a && l !== l && (a = 0, l = r.wheelDelta), r.shiftKey ? [-l, -a] : [a, l];
  }
  function n(r, a, l) {
    if (!ye.isWebKit && t.querySelector("select:focus"))
      return !0;
    if (!t.contains(r))
      return !1;
    for (var c = r; c && c !== t; ) {
      if (c.classList.contains(j.element.consuming))
        return !0;
      var h = St(c);
      if (l && h.overflowY.match(/(scroll|auto)/)) {
        var _ = c.scrollHeight - c.clientHeight;
        if (_ > 0 && (c.scrollTop > 0 && l < 0 || c.scrollTop < _ && l > 0))
          return !0;
      }
      if (a && h.overflowX.match(/(scroll|auto)/)) {
        var f = c.scrollWidth - c.clientWidth;
        if (f > 0 && (c.scrollLeft > 0 && a < 0 || c.scrollLeft < f && a > 0))
          return !0;
      }
      c = c.parentNode;
    }
    return !1;
  }
  function o(r) {
    var a = i(r), l = a[0], c = a[1];
    if (!n(r.target, l, c)) {
      var h = !1;
      s.settings.useBothWheelAxes ? s.scrollbarYActive && !s.scrollbarXActive ? (c ? t.scrollTop -= c * s.settings.wheelSpeed : t.scrollTop += l * s.settings.wheelSpeed, h = !0) : s.scrollbarXActive && !s.scrollbarYActive && (l ? t.scrollLeft += l * s.settings.wheelSpeed : t.scrollLeft -= c * s.settings.wheelSpeed, h = !0) : (t.scrollTop -= c * s.settings.wheelSpeed, t.scrollLeft += l * s.settings.wheelSpeed), Lt(s), h = h || e(l, c), h && !r.ctrlKey && (r.stopPropagation(), r.preventDefault());
    }
  }
  typeof window.onwheel < "u" ? s.event.bind(t, "wheel", o) : typeof window.onmousewheel < "u" && s.event.bind(t, "mousewheel", o);
}
function d_(s) {
  if (!ye.supportsTouch && !ye.supportsIePointer)
    return;
  var t = s.element;
  function e(m, E) {
    var C = Math.floor(t.scrollTop), b = t.scrollLeft, v = Math.abs(m), T = Math.abs(E);
    if (T > v) {
      if (E < 0 && C === s.contentHeight - s.containerHeight || E > 0 && C === 0)
        return window.scrollY === 0 && E > 0 && ye.isChrome;
    } else if (v > T && (m < 0 && b === s.contentWidth - s.containerWidth || m > 0 && b === 0))
      return !0;
    return !0;
  }
  function i(m, E) {
    t.scrollTop -= E, t.scrollLeft -= m, Lt(s);
  }
  var n = {}, o = 0, r = {}, a = null;
  function l(m) {
    return m.targetTouches ? m.targetTouches[0] : m;
  }
  function c(m) {
    return m.pointerType && m.pointerType === "pen" && m.buttons === 0 ? !1 : !!(m.targetTouches && m.targetTouches.length === 1 || m.pointerType && m.pointerType !== "mouse" && m.pointerType !== m.MSPOINTER_TYPE_MOUSE);
  }
  function h(m) {
    if (c(m)) {
      var E = l(m);
      n.pageX = E.pageX, n.pageY = E.pageY, o = new Date().getTime(), a !== null && clearInterval(a);
    }
  }
  function _(m, E, C) {
    if (!t.contains(m))
      return !1;
    for (var b = m; b && b !== t; ) {
      if (b.classList.contains(j.element.consuming))
        return !0;
      var v = St(b);
      if (C && v.overflowY.match(/(scroll|auto)/)) {
        var T = b.scrollHeight - b.clientHeight;
        if (T > 0 && (b.scrollTop > 0 && C < 0 || b.scrollTop < T && C > 0))
          return !0;
      }
      if (E && v.overflowX.match(/(scroll|auto)/)) {
        var A = b.scrollWidth - b.clientWidth;
        if (A > 0 && (b.scrollLeft > 0 && E < 0 || b.scrollLeft < A && E > 0))
          return !0;
      }
      b = b.parentNode;
    }
    return !1;
  }
  function f(m) {
    if (c(m)) {
      var E = l(m), C = { pageX: E.pageX, pageY: E.pageY }, b = C.pageX - n.pageX, v = C.pageY - n.pageY;
      if (_(m.target, b, v))
        return;
      i(b, v), n = C;
      var T = new Date().getTime(), A = T - o;
      A > 0 && (r.x = b / A, r.y = v / A, o = T), e(b, v) && m.preventDefault();
    }
  }
  function g() {
    s.settings.swipeEasing && (clearInterval(a), a = setInterval(function() {
      if (s.isInitialized) {
        clearInterval(a);
        return;
      }
      if (!r.x && !r.y) {
        clearInterval(a);
        return;
      }
      if (Math.abs(r.x) < 0.01 && Math.abs(r.y) < 0.01) {
        clearInterval(a);
        return;
      }
      if (!s.element) {
        clearInterval(a);
        return;
      }
      i(r.x * 30, r.y * 30), r.x *= 0.8, r.y *= 0.8;
    }, 10));
  }
  ye.supportsTouch ? (s.event.bind(t, "touchstart", h), s.event.bind(t, "touchmove", f), s.event.bind(t, "touchend", g)) : ye.supportsIePointer && (window.PointerEvent ? (s.event.bind(t, "pointerdown", h), s.event.bind(t, "pointermove", f), s.event.bind(t, "pointerup", g)) : window.MSPointerEvent && (s.event.bind(t, "MSPointerDown", h), s.event.bind(t, "MSPointerMove", f), s.event.bind(t, "MSPointerUp", g)));
}
var h_ = function() {
  return {
    handlers: ["click-rail", "drag-thumb", "keyboard", "wheel", "touch"],
    maxScrollbarLength: null,
    minScrollbarLength: null,
    scrollingThreshold: 1e3,
    scrollXMarginOffset: 0,
    scrollYMarginOffset: 0,
    suppressScrollX: !1,
    suppressScrollY: !1,
    swipeEasing: !0,
    useBothWheelAxes: !1,
    wheelPropagation: !0,
    wheelSpeed: 1
  };
}, u_ = {
  "click-rail": r_,
  "drag-thumb": a_,
  keyboard: l_,
  wheel: c_,
  touch: d_
}, _i = function(t, e) {
  var i = this;
  if (e === void 0 && (e = {}), typeof t == "string" && (t = document.querySelector(t)), !t || !t.nodeName)
    throw new Error("no element is specified to initialize PerfectScrollbar");
  this.element = t, t.classList.add(j.main), this.settings = h_();
  for (var n in e)
    this.settings[n] = e[n];
  this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;
  var o = function() {
    return t.classList.add(j.state.focus);
  }, r = function() {
    return t.classList.remove(j.state.focus);
  };
  this.isRtl = St(t).direction === "rtl", this.isRtl === !0 && t.classList.add(j.rtl), this.isNegativeScroll = function() {
    var c = t.scrollLeft, h = null;
    return t.scrollLeft = -1, h = t.scrollLeft < 0, t.scrollLeft = c, h;
  }(), this.negativeScrollAdjustment = this.isNegativeScroll ? t.scrollWidth - t.clientWidth : 0, this.event = new Ve(), this.ownerDocument = t.ownerDocument || document, this.scrollbarXRail = Yi(j.element.rail("x")), t.appendChild(this.scrollbarXRail), this.scrollbarX = Yi(j.element.thumb("x")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute("tabindex", 0), this.event.bind(this.scrollbarX, "focus", o), this.event.bind(this.scrollbarX, "blur", r), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;
  var a = St(this.scrollbarXRail);
  this.scrollbarXBottom = parseInt(a.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = W(a.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = W(a.borderLeftWidth) + W(a.borderRightWidth), et(this.scrollbarXRail, { display: "block" }), this.railXMarginWidth = W(a.marginLeft) + W(a.marginRight), et(this.scrollbarXRail, { display: "" }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = Yi(j.element.rail("y")), t.appendChild(this.scrollbarYRail), this.scrollbarY = Yi(j.element.thumb("y")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute("tabindex", 0), this.event.bind(this.scrollbarY, "focus", o), this.event.bind(this.scrollbarY, "blur", r), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;
  var l = St(this.scrollbarYRail);
  this.scrollbarYRight = parseInt(l.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = W(l.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? n_(this.scrollbarY) : null, this.railBorderYWidth = W(l.borderTopWidth) + W(l.borderBottomWidth), et(this.scrollbarYRail, { display: "block" }), this.railYMarginHeight = W(l.marginTop) + W(l.marginBottom), et(this.scrollbarYRail, { display: "" }), this.railYHeight = null, this.railYRatio = null, this.reach = {
    x: t.scrollLeft <= 0 ? "start" : t.scrollLeft >= this.contentWidth - this.containerWidth ? "end" : null,
    y: t.scrollTop <= 0 ? "start" : t.scrollTop >= this.contentHeight - this.containerHeight ? "end" : null
  }, this.isAlive = !0, this.settings.handlers.forEach(function(c) {
    return u_[c](i);
  }), this.lastScrollTop = Math.floor(t.scrollTop), this.lastScrollLeft = t.scrollLeft, this.event.bind(this.element, "scroll", function(c) {
    return i.onScroll(c);
  }), Lt(this);
};
_i.prototype.update = function() {
  this.isAlive && (this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, et(this.scrollbarXRail, { display: "block" }), et(this.scrollbarYRail, { display: "block" }), this.railXMarginWidth = W(St(this.scrollbarXRail).marginLeft) + W(St(this.scrollbarXRail).marginRight), this.railYMarginHeight = W(St(this.scrollbarYRail).marginTop) + W(St(this.scrollbarYRail).marginBottom), et(this.scrollbarXRail, { display: "none" }), et(this.scrollbarYRail, { display: "none" }), Lt(this), gs(this, "top", 0, !1, !0), gs(this, "left", 0, !1, !0), et(this.scrollbarXRail, { display: "" }), et(this.scrollbarYRail, { display: "" }));
};
_i.prototype.onScroll = function(t) {
  this.isAlive && (Lt(this), gs(this, "top", this.element.scrollTop - this.lastScrollTop), gs(
    this,
    "left",
    this.element.scrollLeft - this.lastScrollLeft
  ), this.lastScrollTop = Math.floor(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);
};
_i.prototype.destroy = function() {
  this.isAlive && (this.event.unbindAll(), ke(this.scrollbarX), ke(this.scrollbarY), ke(this.scrollbarXRail), ke(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);
};
_i.prototype.removePsClasses = function() {
  this.element.className = this.element.className.split(" ").filter(function(t) {
    return !t.match(/^ps([-_].+|)$/);
  }).join(" ");
};
const p_ = {
  threshold: 10,
  direction: "all"
};
class f_ {
  constructor(t, e) {
    this._element = t, this._startPosition = null, this._options = {
      ...p_,
      ...e
    };
  }
  handleTouchStart(t) {
    this._startPosition = this._getCoordinates(t);
  }
  handleTouchMove(t) {
    if (!this._startPosition)
      return;
    const e = this._getCoordinates(t), i = {
      x: e.x - this._startPosition.x,
      y: e.y - this._startPosition.y
    }, n = this._getDirection(i);
    if (this._options.direction === "all") {
      if (n.y.value < this._options.threshold && n.x.value < this._options.threshold)
        return;
      const r = n.y.value > n.x.value ? n.y.direction : n.x.direction;
      u.trigger(this._element, `swipe${r}`), u.trigger(this._element, "swipe", { direction: r }), this._startPosition = null;
      return;
    }
    const o = this._options.direction === "left" || this._options === "right" ? "x" : "y";
    n[o].direction === this._options.direction && n[o].value > this._options.threshold && (u.trigger(this._element, `swipe${n[o].direction}`), this._startPosition = null);
  }
  handleTouchEnd() {
    this._startPosition = null;
  }
  _getCoordinates(t) {
    const [e] = t.touches;
    return {
      x: e.clientX,
      y: e.clientY
    };
  }
  _getDirection(t) {
    return {
      x: {
        direction: t.x < 0 ? "left" : "right",
        value: Math.abs(t.x)
      },
      y: {
        direction: t.y < 0 ? "up" : "down",
        value: Math.abs(t.y)
      }
    };
  }
}
class __ {
  constructor(t, e = "swipe", i = {}) {
    this._element = t, this._event = e, this.swipe = new f_(t, i), this._touchStartHandler = this._handleTouchStart.bind(this), this._touchMoveHandler = this._handleTouchMove.bind(this), this._touchEndHandler = this._handleTouchEnd.bind(this);
  }
  dispose() {
    this._element.removeEventListener("touchstart", this._touchStartHandler), this._element.removeEventListener("touchmove", this._touchMoveHandler), window.removeEventListener("touchend", this._touchEndHandler);
  }
  init() {
    this._element.addEventListener(
      "touchstart",
      (t) => this._handleTouchStart(t)
    ), this._element.addEventListener(
      "touchmove",
      (t) => this._handleTouchMove(t)
    ), window.addEventListener("touchend", (t) => this._handleTouchEnd(t));
  }
  _handleTouchStart(t) {
    this[this._event].handleTouchStart(t);
  }
  _handleTouchMove(t) {
    this[this._event].handleTouchMove(t);
  }
  _handleTouchEnd(t) {
    this[this._event].handleTouchEnd(t);
  }
}
const m_ = "group/ps overflow-hidden [overflow-anchor:none] [overflow-style:none] touch-none", g_ = "group/x absolute bottom-0 !top-auto h-[15px] hidden opacity-0 [transition:background-color_.2s_linear,_opacity_.2s_linear] motion-reduce:transition-none group-[&.ps--active-x]/ps:block group-[&.ps--active-x]/ps:bg-transparent group-hover/ps:opacity-60 group-focus/ps:opacity-60 group-[&.ps--scrolling-x]/ps:opacity-60 hover:!opacity-90 hover:bg-[#eee] focus:!opacity-90 focus:bg-[#eee] [&.ps--clicking]:!opacity-90 [&.ps--clicking]:bg-[#eee] outline-none", b_ = "absolute bottom-[2px] rounded-md h-1.5 opacity-0 group-hover/ps:opacity-100 group-focus/ps:opacity-100 group-active/ps:opacity-100 bg-[#aaa] [transition:background-color_.2s_linear,_height_.2s_ease-in-out] group-hover/x:bg-[#999] group-hover/x:h-[11px] group-focus/x:bg-[#999] group-focus/x:h-[11px] group-[&.ps--clicking]/x:bg-[#999] group-[&.ps--clicking]/x:h-[11px] outline-none", v_ = "group/y absolute right-0 !left-auto w-[15px] hidden opacity-0 [transition:background-color_.2s_linear,_opacity_.2s_linear] motion-reduce:transition-none group-[&.ps--active-y]/ps:block group-[&.ps--active-y]/ps:bg-transparent group-hover/ps:opacity-60 group-focus/ps:opacity-60 group-[&.ps--scrolling-y]/ps:opacity-60 hover:!opacity-90 hover:bg-[#eee] focus:!opacity-90 focus:bg-[#eee] [&.ps--clicking]:!opacity-90 [&.ps--clicking]:bg-[#eee] outline-none", E_ = "absolute right-[2px] rounded-md w-1.5 opacity-0 group-hover/ps:opacity-100 group-focus/ps:opacity-100 group-active/ps:opacity-100 bg-[#aaa] [transition:background-color_.2s_linear,_width_.2s_ease-in-out] group-hover/y:bg-[#999] group-hover/y:w-[11px] group-focus/y:bg-[#999] group-focus/y:w-[11px] group-[&.ps--clicking]/y:bg-[#999] group-[&.ps--clicking]/y:w-[11px] outline-none", T_ = (s = document) => {
  [
    { ps: "ps__rail-x", te: g_ },
    { ps: "ps__rail-y", te: v_ },
    { ps: "ps__thumb-x", te: b_ },
    { ps: "ps__thumb-y", te: E_ }
  ].forEach((e) => {
    p.addClass(
      d.findOne(`.${e.ps}`, s),
      e.te
    ), p.removeClass(
      d.findOne(`.${e.ps}`, s),
      e.ps
    );
  }), p.addClass(s, m_), p.removeClass(s, "ps");
}, Nr = "sidenav", Ki = "te.sidenav", C_ = "data-te-sidenav-rotate-icon-ref", gn = "[data-te-sidenav-toggle-ref]", A_ = "[data-te-collapse-init]", y_ = '[data-te-sidenav-slim="true"]', w_ = '[data-te-sidenav-slim="false"]', O_ = "[data-te-sidenav-menu-ref]", Ee = "[data-te-sidenav-collapse-ref]", Ue = "[data-te-sidenav-link-ref]", k_ = F() ? 100 : -100, S_ = F() ? -100 : 100, x_ = {
  sidenavAccordion: "(boolean)",
  sidenavBackdrop: "(boolean)",
  sidenavBackdropClass: "(null|string)",
  sidenavCloseOnEsc: "(boolean)",
  sidenavColor: "(string)",
  sidenavContent: "(null|string)",
  sidenavExpandable: "(boolean)",
  sidenavExpandOnHover: "(boolean)",
  sidenavFocusTrap: "(boolean)",
  sidenavHidden: "(boolean)",
  sidenavMode: "(string)",
  sidenavModeBreakpointOver: "(null|string|number)",
  sidenavModeBreakpointSide: "(null|string|number)",
  sidenavModeBreakpointPush: "(null|string|number)",
  sidenavBreakpointSm: "(number)",
  sidenavBreakpointMd: "(number)",
  sidenavBreakpointLg: "(number)",
  sidenavBreakpointXl: "(number)",
  sidenavBreakpoint2xl: "(number)",
  sidenavScrollContainer: "(null|string)",
  sidenavSlim: "(boolean)",
  sidenavSlimCollapsed: "(boolean)",
  sidenavSlimWidth: "(number)",
  sidenavPosition: "(string)",
  sidenavRight: "(boolean)",
  sidenavTransitionDuration: "(number)",
  sidenavWidth: "(number)"
}, D_ = {
  sidenavAccordion: !1,
  sidenavBackdrop: !0,
  sidenavBackdropClass: null,
  sidenavCloseOnEsc: !0,
  sidenavColor: "primary",
  sidenavContent: null,
  sidenavExpandable: !0,
  sidenavExpandOnHover: !1,
  sidenavFocusTrap: !0,
  sidenavHidden: !0,
  sidenavMode: "over",
  sidenavModeBreakpointOver: null,
  sidenavModeBreakpointSide: null,
  sidenavModeBreakpointPush: null,
  sidenavBreakpointSm: 640,
  sidenavBreakpointMd: 768,
  sidenavBreakpointLg: 1024,
  sidenavBreakpointXl: 1280,
  sidenavBreakpoint2xl: 1536,
  sidenavScrollContainer: null,
  sidenavSlim: !1,
  sidenavSlimCollapsed: !1,
  sidenavSlimWidth: 77,
  sidenavPosition: "fixed",
  sidenavRight: !1,
  sidenavTransitionDuration: 300,
  sidenavWidth: 240
};
class qe {
  constructor(t, e = {}) {
    Tt(this, "_addBackdropOnInit", () => {
      this._options.sidenavHidden || (this._backdrop.show(), u.off(this._element, "transitionend", this._addBackdropOnInit));
    });
    this._element = t, this._options = e, this._ID = kt(""), this._content = null, this._initialContentStyle = null, this._slimCollapsed = !1, this._activeNode = null, this._tempSlim = !1, this._backdrop = this._initializeBackDrop(), this._focusTrap = null, this._perfectScrollbar = null, this._touch = null, this._setModeFromBreakpoints(), this.escHandler = (i) => {
      i.keyCode === ws && this.toggler && xt(this.toggler) && (this._update(!1), u.off(window, "keydown", this.escHandler));
    }, this.hashHandler = () => {
      this._setActiveElements();
    }, t && (I.setData(t, Ki, this), this._setup()), this.options.sidenavBackdrop && !this.options.sidenavHidden && this.options.sidenavMode === "over" && u.on(this._element, "transitionend", this._addBackdropOnInit), this._didInit = !1, this._init();
  }
  // Getters
  static get NAME() {
    return Nr;
  }
  get container() {
    if (this.options.sidenavPosition === "fixed")
      return d.findOne("body");
    const t = (e) => !e.parentNode || e.parentNode === document ? e : e.parentNode.style.position === "relative" || e.parentNode.classList.contains("relative") ? e.parentNode : t(e.parentNode);
    return t(this._element);
  }
  get isVisible() {
    let t = 0, e = window.innerWidth;
    if (this.options.sidenavPosition !== "fixed") {
      const n = this.container.getBoundingClientRect();
      t = n.x, e = n.x + n.width;
    }
    const { x: i } = this._element.getBoundingClientRect();
    return this.options.sidenavRight ? Math.abs(i - e) > 10 : Math.abs(i - t) < 10;
  }
  get links() {
    return d.find(Ue, this._element);
  }
  get navigation() {
    return d.find(O_, this._element);
  }
  get options() {
    const t = {
      ...D_,
      ...p.getDataAttributes(this._element),
      ...this._options
    };
    return M(Nr, t, x_), t;
  }
  get sidenavStyle() {
    return {
      width: `${this.width}px`,
      height: this.options.sidenavPosition === "fixed" ? "100vh" : "100%",
      position: this.options.sidenavPosition,
      transition: `all ${this.transitionDuration} linear`
    };
  }
  get toggler() {
    return d.find(gn).find(
      (e) => {
        const i = p.getDataAttribute(e, "target");
        return d.findOne(i) === this._element;
      }
    );
  }
  get transitionDuration() {
    return `${this.options.sidenavTransitionDuration / 1e3}s`;
  }
  get translation() {
    return this.options.sidenavRight ? S_ : k_;
  }
  get width() {
    return this._slimCollapsed ? this.options.sidenavSlimWidth : this.options.sidenavWidth;
  }
  get isBackdropVisible() {
    return Boolean(this._backdrop._element);
  }
  // Public
  changeMode(t) {
    this._setMode(t);
  }
  dispose() {
    u.off(window, "keydown", this.escHandler), this.options.sidenavBackdrop && this._backdrop.dispose(), u.off(window, "hashchange", this.hashHandler), this._touch.dispose(), I.removeData(this._element, Ki), this._element = null;
  }
  hide() {
    this._emitEvents(!1), this._update(!1), this._options.sidenavBackdrop && this.isBackdropVisible && this._backdrop.hide();
  }
  show() {
    this._emitEvents(!0), this._update(!0), this._options.sidenavBackdrop && this._options.sidenavMode === "over" && this._backdrop.show();
  }
  toggle() {
    this._emitEvents(!this.isVisible), this._update(!this.isVisible);
  }
  toggleSlim() {
    this._setSlim(!this._slimCollapsed);
  }
  update(t) {
    this._options = t, this._setup();
  }
  getBreakpoint(t) {
    return this._transformBreakpointValuesToObject()[t];
  }
  // Private
  _init() {
    this._didInit || (u.on(
      document,
      "click",
      gn,
      qe.toggleSidenav()
    ), this._didInit = !0);
  }
  _transformBreakpointValuesToObject() {
    return {
      sm: this.options.sidenavBreakpointSm,
      md: this.options.sidenavBreakpointMd,
      lg: this.options.sidenavBreakpointLg,
      xl: this.options.sidenavBreakpointXl,
      "2xl": this.options.sidenavBreakpoint2xl
    };
  }
  _setModeFromBreakpoints() {
    const t = window.innerWidth, e = this._transformBreakpointValuesToObject();
    if (t === void 0 || !e)
      return;
    const i = typeof this.options.sidenavModeBreakpointOver == "number" ? t - this.options.sidenavModeBreakpointOver : t - e[this.options.sidenavModeBreakpointOver], n = typeof this.options.sidenavModeBreakpointSide == "number" ? t - this.options.sidenavModeBreakpointSide : t - e[this.options.sidenavModeBreakpointSide], o = typeof this.options.sidenavModeBreakpointPush == "number" ? t - this.options.sidenavModeBreakpointPush : t - e[this.options.sidenavModeBreakpointPush], r = (l, c) => l - c < 0 ? -1 : c - l < 0 ? 1 : 0, a = [i, n, o].filter((l) => l != null && l >= 0).sort(r)[0];
    i > 0 && i === a ? (this._options.sidenavMode = "over", this._options.sidenavHidden = !0) : n > 0 && n === a ? this._options.sidenavMode = "side" : o > 0 && o === a && (this._options.sidenavMode = "push");
  }
  _collapseItems() {
    this.navigation.forEach((t) => {
      d.find(Ee, t).forEach((i) => {
        Ut.getInstance(i).hide();
      });
    });
  }
  _getOffsetValue(t, { index: e, property: i, offsets: n }) {
    const o = this._getPxValue(
      this._initialContentStyle[e][n[i].property]
    ), r = t ? n[i].value : 0;
    return o + r;
  }
  _getProperty(...t) {
    return t.map((e, i) => i === 0 ? e : e[0].toUpperCase().concat(e.slice(1))).join("");
  }
  _getPxValue(t) {
    return t ? parseFloat(t) : 0;
  }
  _handleSwipe(t, e) {
    e && this._slimCollapsed && this.options.sidenavSlim && this.options.sidenavExpandable ? this.toggleSlim() : e || (this._slimCollapsed || !this.options.sidenavSlim || !this.options.sidenavExpandable ? this.toggler && xt(this.toggler) && this.toggle() : this.toggleSlim());
  }
  _isActive(t, e) {
    return e ? e === t : t.attributes.href ? new URL(t, window.location.href).href === window.location.href : !1;
  }
  _isAllToBeCollapsed() {
    return d.find(
      A_,
      this._element
    ).filter(
      (i) => i.getAttribute("aria-expanded") === "true"
    ).length === 0;
  }
  _isAllCollapsed() {
    return d.find(Ee, this._element).filter(
      (t) => xt(t)
    ).length === 0;
  }
  _initializeBackDrop() {
    if (!this.options.sidenavBackdrop)
      return;
    const t = this.options.sidenavBackdropClass ? this.options.sidenavBackdropClass.split(" ") : this.options.sidenavPosition ? [
      "opacity-50",
      "transition-all",
      "duration-300",
      "ease-in-out",
      this.options.sidenavPosition,
      "top-0",
      "left-0",
      "z-50",
      "bg-black/10",
      "dark:bg-black-60",
      "w-full",
      "h-full",
      this._element.id
    ] : null;
    return new eo({
      isVisible: this.options.sidenavBackdrop,
      isAnimated: !0,
      rootElement: this._element.parentNode,
      backdropClasses: t,
      clickCallback: () => this.hide()
    });
  }
  _updateBackdrop(t) {
    if (this.options.sidenavMode === "over") {
      t ? this._backdrop.show() : this.isBackdropVisible && this._backdrop.hide();
      return;
    }
    this.isBackdropVisible && this._backdrop.hide();
  }
  _setup() {
    this._setupTouch(), this.options.sidenavFocusTrap && this._setupFocusTrap(), this._setupCollapse(), this.options.sidenavSlim && this._setupSlim(), this._setupInitialStyling(), this._setupScrolling(), this.options.sidenavContent && this._setupContent(), this._setupActiveState(), this._setupRippleEffect(), this.options.sidenavHidden || this._updateOffsets(!0, !0), this.options.sidenavMode === "over" && this._setTabindex(!0);
  }
  _setupActiveState() {
    this._setActiveElements(), this.links.forEach((t) => {
      u.on(t, "click", () => this._setActiveElements(t)), u.on(t, "keydown", (e) => {
        e.keyCode === nt && this._setActiveElements(t);
      });
    }), u.on(window, "hashchange", this.hashHandler);
  }
  _setupCollapse() {
    this.navigation.forEach((t, e) => {
      d.find(Ee, t).forEach(
        (n, o) => this._setupCollapseList({ list: n, index: o, menu: t, menuIndex: e })
      );
    });
  }
  _generateCollpaseID(t, e) {
    return `sidenav-collapse-${this._ID}-${e}-${t}`;
  }
  _setupCollapseList({ list: t, index: e, menu: i, menuIndex: n }) {
    const o = this._generateCollpaseID(e, n);
    t.setAttribute("id", o), t.setAttribute("data-te-collapse-item", "");
    const [r] = d.prev(t, Ue);
    p.setDataAttribute(r, "collapse-init", ""), r.setAttribute("href", `#${o}`), r.setAttribute("role", "button");
    const a = Ut.getInstance(t) || new Ut(t, {
      toggle: !1,
      parent: this.options.sidenavAccordion ? i : t
    });
    (t.dataset.teSidenavStateShow === "" || t.dataset.teCollapseShow === "") && this._rotateArrow(r, !1), u.on(r, "click", (l) => {
      this._toggleCategory(l, a, t), this._tempSlim && this._isAllToBeCollapsed() && (this._setSlim(!0), this._tempSlim = !1), this.options.sidenavMode === "over" && this._focusTrap && this._focusTrap.update();
    }), u.on(
      t,
      "show.te.collapse",
      () => this._rotateArrow(r, !1)
    ), u.on(
      t,
      "hide.te.collapse",
      () => this._rotateArrow(r, !0)
    ), u.on(t, "shown.te.collapse", () => {
      this.options.sidenavMode === "over" && this._focusTrap && this._focusTrap.update();
    }), u.on(t, "hidden.te.collapse", () => {
      this._tempSlim && this._isAllCollapsed() && (this._setSlim(!0), this._tempSlim = !1), this.options.sidenavMode === "over" && this._focusTrap && this._focusTrap.update();
    });
  }
  _setupContent() {
    this._content = d.find(this.options.sidenavContent), this._content.forEach((t) => {
      const e = [
        "!p",
        "!m",
        "!px",
        "!pl",
        "!pr",
        "!mx",
        "!ml",
        "!mr",
        "!-p",
        "!-m",
        "!-px",
        "!-pl",
        "!-pr",
        "!-mx",
        "!-ml",
        "!-mr"
      ];
      [...t.classList].filter(
        (n) => e.findIndex((o) => n.includes(o)) >= 0
      ).forEach((n) => t.classList.remove(n));
    }), this._initialContentStyle = this._content.map((t) => {
      const { paddingLeft: e, paddingRight: i, marginLeft: n, marginRight: o, transition: r } = window.getComputedStyle(t);
      return { paddingLeft: e, paddingRight: i, marginLeft: n, marginRight: o, transition: r };
    });
  }
  _setupFocusTrap() {
    this._focusTrap = new ui(
      this._element,
      {
        event: "keydown",
        condition: (t) => t.keyCode === li,
        onlyVisible: !0
      },
      this.toggler
    );
  }
  _setupInitialStyling() {
    this._setColor(), p.style(this._element, this.sidenavStyle);
  }
  _setupScrolling() {
    let t = this._element;
    if (this.options.sidenavScrollContainer) {
      t = d.findOne(
        this.options.sidenavScrollContainer,
        this._element
      );
      const i = Hl(t.parentNode.children).filter(
        (n) => n !== t
      ).reduce((n, o) => n + o.clientHeight, 0);
      p.style(t, {
        maxHeight: `calc(100% - ${i}px)`,
        position: "relative"
      });
    }
    this._perfectScrollbar = new _i(t, {
      suppressScrollX: !0,
      handlers: ["click-rail", "drag-thumb", "wheel", "touch"]
    }), T_(t);
  }
  _setupSlim() {
    this._slimCollapsed = this.options.sidenavSlimCollapsed, this._toggleSlimDisplay(this._slimCollapsed), this.options.sidenavExpandOnHover && (this._element.addEventListener("mouseenter", () => {
      this._slimCollapsed && this._setSlim(!1);
    }), this._element.addEventListener("mouseleave", () => {
      this._slimCollapsed || this._setSlim(!0);
    }));
  }
  _setupRippleEffect() {
    this.links.forEach((t) => {
      let e = _s.getInstance(t), i = this.options.sidenavColor;
      if (e && e._options.sidenavColor !== this.options.sidenavColor)
        e.dispose();
      else if (e)
        return;
      (localStorage.theme === "dark" || !("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches) && (i = "white"), e = new _s(t, { rippleColor: i });
    });
  }
  _setupTouch() {
    this._touch = new __(this._element, "swipe", { threshold: 20 }), this._touch.init(), u.on(
      this._element,
      "swipeleft",
      (t) => this._handleSwipe(t, this.options.sidenavRight)
    ), u.on(
      this._element,
      "swiperight",
      (t) => this._handleSwipe(t, !this.options.sidenavRight)
    );
  }
  _setActive(t, e) {
    t.setAttribute("data-te-sidebar-state-active", ""), this._activeNode && t.removeAttribute("data-te-sidebar-state-active"), this._activeNode = t;
    const [i] = d.parents(
      this._activeNode,
      Ee
    );
    if (!i) {
      this._setActiveCategory();
      return;
    }
    const [n] = d.prev(i, Ue);
    this._setActiveCategory(n), !e && !this._slimCollapsed && Ut.getInstance(i).show();
  }
  _setActiveCategory(t) {
    this.navigation.forEach((e) => {
      d.find(Ee, e).forEach((n) => {
        const [o] = d.prev(n, Ue);
        o !== t ? o.removeAttribute("data-te-sidenav-state-active") : o.setAttribute("data-te-sidenav-state-active", "");
      });
    });
  }
  _setActiveElements(t) {
    this.navigation.forEach((e) => {
      d.find(Ue, e).filter((n) => d.next(n, Ee).length === 0).forEach((n) => {
        this._isActive(n, t) && n !== this._activeNode && this._setActive(n, t);
      });
    }), t && this._updateFocus(this.isVisible);
  }
  _setColor() {
    const t = [
      "primary",
      "secondary",
      "success",
      "info",
      "warning",
      "danger",
      "light",
      "dark"
    ], { sidenavColor: e } = this.options, i = t.includes(e) ? e : "primary";
    t.forEach((n) => {
      this._element.classList.remove(`sidenav-${n}`);
    }), p.addClass(this._element, `sidenav-${i}`);
  }
  _setContentOffsets(t, e, i) {
    this._content.forEach((n, o) => {
      const r = this._getOffsetValue(t, {
        index: o,
        property: "padding",
        offsets: e
      }), a = this._getOffsetValue(t, {
        index: o,
        property: "margin",
        offsets: e
      }), l = {};
      if (i || (l.transition = `all ${this.transitionDuration} linear`), l[e.padding.property] = `${r}px`, l[e.margin.property] = `${a}px`, p.style(n, l), !!t) {
        if (i) {
          p.style(n, {
            transition: this._initialContentStyle[o].transition
          });
          return;
        }
        u.on(n, "transitionend", () => {
          p.style(n, {
            transition: this._initialContentStyle[o].transition
          });
        });
      }
    });
  }
  _setMode(t) {
    this.options.sidenavMode !== t && (this._options.sidenavMode = t, this._update(this.isVisible));
  }
  _setSlim(t) {
    const e = t ? ["collapse", "collapsed"] : ["expand", "expanded"];
    this._triggerEvents(...e), t && this._collapseItems(), this._slimCollapsed = t, this._toggleSlimDisplay(t), p.style(this._element, { width: `${this.width}px` }), this._updateOffsets(this.isVisible);
  }
  _setTabindex(t) {
    this.links.forEach((e) => {
      e.tabIndex = t ? 0 : -1;
    });
  }
  _emitEvents(t) {
    const e = t ? ["show", "shown"] : ["hide", "hidden"];
    this._triggerEvents(...e);
  }
  _rotateArrow(t, e) {
    const [i] = d.children(t, `[${C_}]`);
    i && (e ? p.removeClass(i, "rotate-180") : p.addClass(i, "rotate-180"));
  }
  _toggleCategory(t, e) {
    t.preventDefault(), e.toggle(), this._slimCollapsed && this.options.sidenavExpandable && (this._tempSlim = !0, this._setSlim(!1));
  }
  _toggleSlimDisplay(t) {
    const e = d.find(
      y_,
      this._element
    ), i = d.find(
      w_,
      this._element
    ), n = () => {
      e.forEach((o) => {
        p.style(o, {
          display: this._slimCollapsed ? "unset" : "none"
        });
      }), i.forEach((o) => {
        p.style(o, {
          display: this._slimCollapsed ? "none" : "unset"
        });
      });
    };
    t ? setTimeout(
      () => n(),
      this.options.sidenavTransitionDuration
    ) : n();
  }
  async _triggerEvents(t, e) {
    u.trigger(this._element, `${t}.te.sidenav`), e && await setTimeout(() => {
      u.trigger(this._element, `${e}.te.sidenav`);
    }, this.options.sidenavTransitionDuration + 5);
  }
  _update(t) {
    this.toggler && this._updateTogglerAria(t), this._updateDisplay(t), this.options.sidenavBackdrop && this._updateBackdrop(t), this._updateOffsets(t), t && this.options.sidenavCloseOnEsc && this.options.sidenavMode !== "side" && u.on(window, "keydown", this.escHandler), this.options.sidenavFocusTrap && this._updateFocus(t);
  }
  _updateDisplay(t) {
    const e = t ? 0 : this.translation;
    p.style(this._element, {
      transform: `translateX(${e}%)`
    });
  }
  _updateFocus(t) {
    if (this._setTabindex(t), this.options.sidenavMode === "over" && this.options.sidenavFocusTrap) {
      if (t) {
        this._focusTrap.trap();
        return;
      }
      this._focusTrap.disable();
    }
    this._focusTrap.disable();
  }
  _updateOffsets(t, e = !1) {
    const [i, n] = this.options.sidenavRight ? ["right", "left"] : ["left", "right"], o = {
      property: this._getProperty("padding", i),
      value: this.options.sidenavMode === "over" ? 0 : this.width
    }, r = {
      property: this._getProperty("margin", n),
      value: this.options.sidenavMode === "push" ? -1 * this.width : 0
    };
    u.trigger(this._element, "update.te.sidenav", {
      margin: r,
      padding: o
    }), this._content && (this._content.className = "", this._setContentOffsets(t, { padding: o, margin: r }, e));
  }
  _updateTogglerAria(t) {
    this.toggler.setAttribute("aria-expanded", t);
  }
  // Static
  static toggleSidenav() {
    return function(t) {
      const e = d.closest(t.target, gn), i = p.getDataAttributes(e).target;
      d.find(i).forEach((n) => {
        (qe.getInstance(n) || new qe(n)).toggle();
      });
    };
  }
  static jQueryInterface(t, e) {
    return this.each(function() {
      let i = I.getData(this, Ki);
      const n = typeof t == "object" && t;
      if (!(!i && /dispose/.test(t)) && (i || (i = new qe(this, n)), typeof t == "string")) {
        if (typeof i[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        i[t](e);
      }
    });
  }
  static getInstance(t) {
    return I.getData(t, Ki);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const Rn = "stepper", ds = "te.stepper", Ss = `.${ds}`, mi = `data-te-${Rn}`, Qe = "horizontal", yt = "vertical", I_ = {
  stepperType: "string",
  stepperLinear: "boolean",
  stepperNoEditable: "boolean",
  stepperActive: "string",
  stepperCompleted: "string",
  stepperInvalid: "string",
  stepperDisabled: "string",
  stepperVerticalBreakpoint: "number",
  stepperMobileBreakpoint: "number",
  stepperMobileBarBreakpoint: "number"
}, $_ = {
  stepperType: Qe,
  stepperLinear: !1,
  stepperNoEditable: !1,
  stepperActive: "",
  stepperCompleted: "",
  stepperInvalid: "",
  stepperDisabled: "",
  stepperVerticalBreakpoint: 0,
  stepperMobileBreakpoint: 0,
  stepperMobileBarBreakpoint: 4
}, Rr = `mousedown${Ss}`, Pr = `keydown${Ss}`, L_ = `keyup${Ss}`, Br = `resize${Ss}`, Vt = `[${mi}-step-ref]`, X = `[${mi}-head-ref]`, Hr = `[${mi}-head-text-ref]`, Ui = `[${mi}-head-icon-ref]`, J = `[${mi}-content-ref]`;
class Ng {
  constructor(t, e) {
    this._element = t, this._options = this._getConfig(e), this._elementHeight = 0, this._steps = d.find(`${Vt}`, this._element), this._currentView = "", this._activeStepIndex = 0, this._verticalStepperStyles = [], this._element && (I.setData(t, ds, this), this._init());
  }
  // Getters
  static get NAME() {
    return Rn;
  }
  get activeStep() {
    return this._steps[this._activeStepIndex];
  }
  get activeStepIndex() {
    return this._activeStepIndex;
  }
  // Public
  dispose() {
    this._steps.forEach((t) => {
      u.off(t, Rr), u.off(t, Pr);
    }), u.off(window, Br), I.removeData(this._element, ds), this._element = null;
  }
  changeStep(t) {
    this._toggleStep(t);
  }
  nextStep() {
    this._toggleStep(this._activeStepIndex + 1);
  }
  previousStep() {
    this._toggleStep(this._activeStepIndex - 1);
  }
  // Private
  _init() {
    const t = d.find(`${Vt}`, this._element)[this._activeStepIndex].setAttribute("data-te", "active-step"), e = d.find(
      `${Hr}`,
      this._element
    ), i = d.find(
      `${Ui}`,
      this._element
    );
    switch (t ? (this._activeStepIndex = this._steps.indexOf(t), this._toggleStepClass(
      this._activeStepIndex,
      "add",
      this._options.stepperActive
    ), e[this._activeStepIndex].classList.add("font-medium"), i[this._activeStepIndex].classList.add("!bg-primary-100"), i[this._activeStepIndex].classList.add("!text-primary-700")) : (e[this._activeStepIndex].classList.add("font-medium"), i[this._activeStepIndex].classList.add("!bg-primary-100"), i[this._activeStepIndex].classList.add("!text-primary-700"), this._toggleStepClass(
      this._activeStepIndex,
      "add",
      this._options.stepperActive
    )), this._bindMouseDown(), this._bindKeysNavigation(), this._options.stepperType) {
      case yt:
        this._toggleVertical();
        break;
      default:
        this._toggleHorizontal();
        break;
    }
    (this._options.stepperVerticalBreakpoint || this._options.stepperMobileBreakpoint) && this._toggleStepperView(), this._bindResize();
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._element);
    return t = {
      ...$_,
      ...e,
      ...t
    }, M(Rn, t, I_), t;
  }
  _bindMouseDown() {
    this._steps.forEach((t) => {
      const e = d.findOne(`${X}`, t);
      u.on(e, Rr, (i) => {
        const n = d.parents(i.target, `${Vt}`)[0], o = this._steps.indexOf(n);
        i.preventDefault(), this._toggleStep(o);
      });
    });
  }
  _bindResize() {
    u.on(window, Br, () => {
      this._currentView === yt && this._setSingleStepHeight(this.activeStep), this._currentView === Qe && this._setHeight(this.activeStep), (this._options.stepperVerticalBreakpoint || this._options.stepperMobileBreakpoint) && this._toggleStepperView();
    });
  }
  _toggleStepperView() {
    const t = this._options.stepperVerticalBreakpoint < window.innerWidth, e = this._options.stepperVerticalBreakpoint > window.innerWidth, i = this._options.stepperMobileBreakpoint > window.innerWidth;
    t && this._currentView !== Qe && this._toggleHorizontal(), e && !i && this._currentView !== yt && (this._steps.forEach((n) => {
      const o = d.findOne(`${J}`, n);
      this._resetStepperHeight(), this._showElement(o);
    }), this._toggleVertical());
  }
  _toggleStep(t) {
    this._activeStepIndex !== t && (this._options.stepperNoEditable && this._toggleDisabled(), this._showElement(
      d.findOne(`${J}`, this._steps[t])
    ), this._toggleActive(t), t > this._activeStepIndex && this._toggleCompleted(this._activeStepIndex), this._currentView === Qe ? this._animateHorizontalStep(t) : (this._animateVerticalStep(t), this._setSingleStepHeight(this._steps[t])), this._toggleStepTabIndex(
      d.findOne(`${X}`, this.activeStep),
      d.findOne(`${X}`, this._steps[t])
    ), this._activeStepIndex = t, this._steps[this._activeStepIndex].setAttribute("data-te", "active-step"), this._steps.forEach((e, i) => {
      e[this._activeStepIndex] !== i && e.removeAttribute("data-te");
    }));
  }
  _resetStepperHeight() {
    this._element.style.height = "";
  }
  _setStepsHeight() {
    this._steps.forEach((t) => {
      const e = d.findOne(`${J}`, t), i = window.getComputedStyle(e);
      this._verticalStepperStyles.push({
        paddingTop: parseFloat(i.paddingTop),
        paddingBottom: parseFloat(i.paddingBottom)
      });
      const n = e.scrollHeight;
      e.style.height = `${n}px`;
    });
  }
  _setSingleStepHeight(t) {
    const e = d.findOne(`${J}`, t), i = this.activeStep === t, n = this._steps.indexOf(t);
    let o;
    i ? (e.style.height = "", o = e.scrollHeight) : o = e.scrollHeight + this._verticalStepperStyles[n].paddingTop + this._verticalStepperStyles[n].paddingBottom, e.style.height = `${o}px`;
  }
  _toggleVertical() {
    this._currentView = yt, this._setStepsHeight(), this._hideInactiveSteps();
  }
  _toggleHorizontal() {
    this._currentView = Qe, this._setHeight(this.activeStep), this._hideInactiveSteps();
  }
  _toggleStepperClass() {
    d.findOne(
      "[data-te-stepper-type]",
      this._element
    ) !== null && this._steps.forEach((e) => {
      d.findOne(`${J}`, e).classList.remove("!my-0"), d.findOne(`${J}`, e).classList.remove("!py-0"), d.findOne(`${J}`, e).classList.remove("!h-0");
    });
  }
  _toggleStepClass(t, e, i) {
    i && this._steps[t].classList[e](i);
  }
  _bindKeysNavigation() {
    this._toggleStepTabIndex(
      !1,
      d.findOne(`${X}`, this.activeStep)
    ), this._steps.forEach((t) => {
      const e = d.findOne(`${X}`, t);
      u.on(e, Pr, (i) => {
        const n = d.parents(
          i.currentTarget,
          `${Vt}`
        )[0], o = d.next(n, `${Vt}`)[0], r = d.prev(n, `${Vt}`)[0], a = d.findOne(
          `${X}`,
          n
        ), l = d.findOne(
          `${X}`,
          this.activeStep
        );
        let c = null, h = null;
        if (o && (c = d.findOne(`${X}`, o)), r && (h = d.findOne(`${X}`, r)), i.keyCode === xe && this._currentView !== yt && (h ? (this._toggleStepTabIndex(a, h), this._toggleOutlineStyles(a, h), h.focus()) : c && (this._toggleStepTabIndex(a, c), this._toggleOutlineStyles(a, c), c.focus())), i.keyCode === De && this._currentView !== yt && (c ? (this._toggleStepTabIndex(a, c), this._toggleOutlineStyles(a, c), c.focus()) : h && (this._toggleStepTabIndex(a, h), this._toggleOutlineStyles(a, h), h.focus())), i.keyCode === U && this._currentView === yt && (i.preventDefault(), c && (this._toggleStepTabIndex(a, c), this._toggleOutlineStyles(a, c), c.focus())), i.keyCode === it && this._currentView === yt && (i.preventDefault(), h && (this._toggleStepTabIndex(a, h), this._toggleOutlineStyles(a, h), h.focus())), i.keyCode === Ie) {
          const _ = d.findOne(
            `${X}`,
            this._steps[0]
          );
          this._toggleStepTabIndex(a, _), this._toggleOutlineStyles(a, _), _.focus();
        }
        if (i.keyCode === $e) {
          const _ = this._steps[this._steps.length - 1], f = d.findOne(`${X}`, _);
          this._toggleStepTabIndex(a, f), this._toggleOutlineStyles(a, f), f.focus();
        }
        (i.keyCode === nt || i.keyCode === as) && (i.preventDefault(), this.changeStep(this._steps.indexOf(n))), i.keyCode === li && (this._toggleStepTabIndex(a, l), this._toggleOutlineStyles(a, !1), l.focus());
      }), u.on(e, L_, (i) => {
        const n = d.parents(
          i.currentTarget,
          `${Vt}`
        )[0], o = d.findOne(
          `${X}`,
          n
        ), r = d.findOne(
          `${X}`,
          this.activeStep
        );
        i.keyCode === li && (this._toggleStepTabIndex(o, r), this._toggleOutlineStyles(!1, r), r.focus());
      });
    });
  }
  _toggleStepTabIndex(t, e) {
    t && t.setAttribute("tabIndex", -1), e && e.setAttribute("tabIndex", 0);
  }
  _toggleOutlineStyles(t, e) {
    t && (t.style.outline = ""), e && (e.style.outline = "revert");
  }
  _toggleDisabled() {
    const t = d.find(`${X}`, this._element), e = d.find(
      `${Ui}`,
      this._element
    );
    t[this._activeStepIndex].classList.add("color-[#858585]"), t[this._activeStepIndex].classList.add("cursor-default"), e[this._activeStepIndex].classList.add("!bg-[#858585]"), this._toggleStepClass(
      this._activeStepIndex,
      "add",
      this._options.stepperDisabled
    );
  }
  _toggleActive(t) {
    const e = d.find(
      `${Hr}`,
      this._element
    ), i = d.find(
      `${Ui}`,
      this._element
    );
    e[t].classList.add("font-medium"), i[t].classList.add("!bg-primary-100"), i[t].classList.add("!text-primary-700"), i[t].classList.remove("!bg-success-100"), i[t].classList.remove("!text-success-700"), e[this._activeStepIndex].classList.remove("font-medium"), i[this._activeStepIndex].classList.remove("!bg-primary-100"), i[this._activeStepIndex].classList.remove(
      "!text-primary-700"
    ), this._toggleStepClass(t, "add", this._options.stepperActive), this._toggleStepClass(
      this._activeStepIndex,
      "remove",
      this._options.stepperActive
    );
  }
  _toggleCompleted(t) {
    const e = d.find(
      `${Ui}`,
      this._element
    );
    e[t].classList.add("!bg-success-100"), e[t].classList.add("!text-success-700"), e[t].classList.remove("!bg-danger-100"), e[t].classList.remove("!text-danger-700"), this._toggleStepClass(t, "add", this._options.stepperCompleted), this._toggleStepClass(t, "remove", this._options.stepperInvalid);
  }
  _hideInactiveSteps() {
    this._steps.forEach((t) => {
      t.getAttribute("data-te") || this._hideElement(d.findOne(`${J}`, t));
    });
  }
  _setHeight(t) {
    const e = d.findOne(`${J}`, t), i = getComputedStyle(e), n = d.findOne(`${X}`, t), o = getComputedStyle(n), r = e.offsetHeight + parseFloat(i.marginTop) + parseFloat(i.marginBottom), a = n.offsetHeight + parseFloat(o.marginTop) + parseFloat(o.marginBottom);
    this._element.style.height = `${a + r}px`;
  }
  _hideElement(t) {
    !d.parents(
      t,
      `${Vt}`
    )[0].getAttribute("data-te") && this._currentView !== yt || (t.classList.add("!my-0"), t.classList.add("!py-0"), t.classList.add("!h-0"));
  }
  _showElement(t) {
    this._currentView === yt ? (t.classList.remove("!my-0"), t.classList.remove("!py-0"), t.classList.remove("!h-0")) : t.style.display = "block";
  }
  _animateHorizontalStep(t) {
    const e = t > this._activeStepIndex, i = d.findOne(
      `${J}`,
      this._steps[t]
    ), n = d.findOne(
      `${J}`,
      this.activeStep
    );
    let o, r;
    this._steps.forEach((h, _) => {
      const f = d.findOne(`${J}`, h);
      _ !== t && _ !== this._activeStepIndex && this._hideElement(f);
    });
    const a = "translate-x-[150%]", l = "-translate-x-[150%]", c = "translate-0";
    e ? (r = l, o = c, i.classList.remove("translate-x-[150%]"), i.classList.remove("-translate-x-[150%]")) : (r = a, o = c, i.classList.remove("-translate-x-[150%]"), i.classList.remove("translate-x-[150%]")), n.classList.add(r), i.classList.add(o), this._setHeight(this._steps[t]);
  }
  _animateVerticalStep(t) {
    const e = d.findOne(
      `${J}`,
      this._steps[t]
    ), i = d.findOne(
      `${J}`,
      this.activeStep
    );
    this._hideElement(i), this._showElement(e);
  }
  static getInstance(t) {
    return I.getData(t, ds);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const Vr = "data-te-input-state-active", zi = "data-te-input-selected", Wr = "data-te-input-multiple-active", Fr = "[data-te-form-check-input]";
class Yr {
  constructor(t, e, i, n, o, r, a, l, c, h, _) {
    this.id = t, this.nativeOption = e, this.multiple = i, this.value = n, this.label = o, this.selected = r, this.disabled = a, this.hidden = l, this.secondaryText = c, this.groupId = h, this.icon = _, this.node = null, this.active = !1;
  }
  select() {
    this.multiple ? this._selectMultiple() : this._selectSingle();
  }
  _selectSingle() {
    this.selected || (this.node.setAttribute(zi, ""), this.node.setAttribute("aria-selected", !0), this.selected = !0, this.nativeOption && (this.nativeOption.selected = !0));
  }
  _selectMultiple() {
    if (!this.selected) {
      const t = d.findOne(
        Fr,
        this.node
      );
      t.checked = !0, this.node.setAttribute(zi, ""), this.node.setAttribute("aria-selected", !0), this.selected = !0, this.nativeOption && (this.nativeOption.selected = !0);
    }
  }
  deselect() {
    this.multiple ? this._deselectMultiple() : this._deselectSingle();
  }
  _deselectSingle() {
    this.selected && (this.node.removeAttribute(zi), this.node.setAttribute("aria-selected", !1), this.selected = !1, this.nativeOption && (this.nativeOption.selected = !1));
  }
  _deselectMultiple() {
    if (this.selected) {
      const t = d.findOne(
        Fr,
        this.node
      );
      t.checked = !1, this.node.removeAttribute(zi), this.node.setAttribute("aria-selected", !1), this.selected = !1, this.nativeOption && (this.nativeOption.selected = !1);
    }
  }
  setNode(t) {
    this.node = t;
  }
  setActiveStyles() {
    if (!this.active) {
      if (this.multiple) {
        this.node.setAttribute(Wr, "");
        return;
      }
      this.active = !0, this.node.setAttribute(Vr, "");
    }
  }
  removeActiveStyles() {
    this.active && (this.active = !1, this.node.removeAttribute(Vr)), this.multiple && this.node.removeAttribute(Wr);
  }
}
class M_ {
  constructor(t = !1) {
    this._multiple = t, this._selections = [];
  }
  select(t) {
    this._multiple ? this._selections.push(t) : this._selections = [t];
  }
  deselect(t) {
    if (this._multiple) {
      const e = this._selections.findIndex(
        (i) => t === i
      );
      this._selections.splice(e, 1);
    } else
      this._selections = [];
  }
  clear() {
    this._selections = [];
  }
  get selection() {
    return this._selections[0];
  }
  get selections() {
    return this._selections;
  }
  get label() {
    return this._selections[0] && this.selection.label;
  }
  get labels() {
    return this._selections.map((t) => t.label).join(", ");
  }
  get value() {
    return this.selections[0] && this.selection.value;
  }
  get values() {
    return this._selections.map((t) => t.value);
  }
}
function Pn(s) {
  return s.filter((t) => !t.disabled).every((t) => t.selected);
}
const N_ = "data-te-select-form-outline-ref", R_ = "data-te-select-wrapper-ref", P_ = "data-te-select-input-ref", B_ = "data-te-select-clear-btn-ref", H_ = "data-te-select-dropdown-container-ref", V_ = "data-te-select-dropdown-ref", W_ = "data-te-select-options-wrapper-ref", F_ = "data-te-select-options-list-ref", Y_ = "data-te-select-input-filter-ref", pl = "data-te-select-option-ref", j_ = "data-te-select-option-all-ref", K_ = "data-te-select-option-text-ref", U_ = "data-te-form-check-input", z_ = "data-te-select-option-group-ref", X_ = "data-te-select-option-group-label-ref", fl = "data-te-select-selected", G_ = `
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
</svg>
`, q_ = (s) => {
  s.code === "Tab" || s.code === "Esc" || s.preventDefault();
};
function Xi(s, t, e, i, n) {
  t.selectSize === "default" && p.addClass(s, e), t.selectSize === "sm" && p.addClass(s, i), t.selectSize === "lg" && p.addClass(s, n);
}
function Q_(s, t, e, i) {
  const n = document.createElement("div");
  n.setAttribute("id", s), n.setAttribute(R_, "");
  const o = L("div");
  o.setAttribute(N_, ""), p.addClass(o, i.formOutline);
  const r = L("input"), a = t.selectFilter ? "combobox" : "listbox", l = t.multiple ? "true" : "false", c = t.disabled ? "true" : "false";
  r.setAttribute(P_, ""), p.addClass(r, i.selectInput), Xi(
    r,
    t,
    i.selectInputSizeDefault,
    i.selectInputSizeSm,
    i.selectInputSizeLg
  ), t.selectFormWhite && p.addClass(r, i.selectInputWhite), r.setAttribute("type", "text"), r.setAttribute("role", a), r.setAttribute("aria-multiselectable", l), r.setAttribute("aria-disabled", c), r.setAttribute("aria-haspopup", "true"), r.setAttribute("aria-expanded", !1), t.tabIndex && r.setAttribute("tabIndex", t.tabIndex), t.disabled && r.setAttribute("disabled", ""), t.selectPlaceholder !== "" && r.setAttribute("placeholder", t.selectPlaceholder), t.selectValidation ? (p.addStyle(r, {
    "pointer-events": "none",
    "caret-color": "transparent"
  }), p.addStyle(o, { cursor: "pointer" })) : r.setAttribute("readonly", "true"), t.selectValidation && (r.setAttribute("required", "true"), r.setAttribute("aria-required", "true"), r.addEventListener("keydown", q_));
  const h = L("div");
  p.addClass(h, i.selectValidationValid);
  const _ = document.createTextNode(
    `${t.selectValidFeedback}`
  );
  h.appendChild(_);
  const f = L("div");
  p.addClass(f, i.selectValidationInvalid);
  const g = document.createTextNode(
    `${t.selectInvalidFeedback}`
  );
  f.appendChild(g);
  const m = L("span");
  m.setAttribute(B_, ""), p.addClass(m, i.selectClearBtn), Xi(
    m,
    t,
    i.selectClearBtnDefault,
    i.selectClearBtnSm,
    i.selectClearBtnLg
  ), t.selectFormWhite && p.addClass(m, i.selectClearBtnWhite);
  const E = document.createTextNode("â");
  m.appendChild(E), m.setAttribute("tabindex", "0");
  const C = L("span");
  return p.addClass(C, i.selectArrow), Xi(
    C,
    t,
    i.selectArrowDefault,
    i.selectArrowSm,
    i.selectArrowLg
  ), t.selectFormWhite && p.addClass(C, i.selectArrowWhite), C.innerHTML = G_, o.appendChild(r), e && (p.addClass(e, i.selectLabel), Xi(
    e,
    t,
    i.selectLabelSizeDefault,
    i.selectLabelSizeSm,
    i.selectLabelSizeLg
  ), t.selectFormWhite && p.addClass(e, i.selectLabelWhite), o.appendChild(e)), t.selectValidation && (o.appendChild(h), o.appendChild(f)), t.selectClearButton && o.appendChild(m), o.appendChild(C), n.appendChild(o), n;
}
function jr(s, t, e, i, n, o, r, a) {
  const l = document.createElement("div");
  l.setAttribute(H_, ""), p.addClass(l, a.selectDropdownContainer), l.setAttribute("id", `${s}`), l.style.width = `${e}px`;
  const c = document.createElement("div");
  c.setAttribute("tabindex", 0), c.setAttribute(V_, ""), p.addClass(c, a.dropdown);
  const h = L("div");
  h.setAttribute(W_, ""), p.addClass(h, a.optionsWrapper), p.addClass(h, a.optionsWrapperScrollbar), h.style.maxHeight = `${i}px`;
  const _ = _l(
    o,
    n,
    t,
    a
  );
  return h.appendChild(_), t.selectFilter && c.appendChild(
    Z_(t.selectSearchPlaceholder, a)
  ), c.appendChild(h), r && c.appendChild(r), l.appendChild(c), l;
}
function _l(s, t, e, i) {
  const n = L("div");
  n.setAttribute(F_, ""), p.addClass(n, i.optionsList);
  let o;
  return e.multiple ? o = tm(
    s,
    t,
    e,
    i
  ) : o = J_(s, e, i), o.forEach((r) => {
    n.appendChild(r);
  }), n;
}
function Z_(s, t) {
  const e = L("div");
  p.addClass(e, t.inputGroup);
  const i = L("input");
  return i.setAttribute(Y_, ""), p.addClass(i, t.selectFilterInput), i.placeholder = s, i.setAttribute("role", "searchbox"), i.setAttribute("type", "text"), e.appendChild(i), e;
}
function J_(s, t, e) {
  return ml(s, t, e);
}
function tm(s, t, e, i) {
  let n = null;
  e.selectAll && (n = em(
    t,
    s,
    e,
    i
  ));
  const o = ml(s, e, i);
  return n ? [n, ...o] : o;
}
function ml(s, t, e) {
  const i = [];
  return s.forEach((n) => {
    if (Object.prototype.hasOwnProperty.call(
      n,
      "options"
    )) {
      const r = om(n, t, e);
      i.push(r);
    } else
      i.push(gl(n, t, e));
  }), i;
}
function em(s, t, e, i) {
  const n = Pn(t), o = L("div");
  return o.setAttribute(pl, ""), p.addClass(o, i.selectOption), o.setAttribute(j_, ""), p.addStyle(o, {
    height: `${e.selectOptionHeight}px`
  }), o.setAttribute("role", "option"), o.setAttribute("aria-selected", n), n && o.setAttribute(fl, ""), o.appendChild(bl(s, e, i)), s.setNode(o), o;
}
function gl(s, t, e) {
  if (s.node)
    return s.node;
  const i = L("div");
  return i.setAttribute(pl, ""), p.addClass(i, e.selectOption), p.addStyle(i, {
    height: `${t.selectOptionHeight}px`
  }), p.setDataAttribute(i, "id", s.id), i.setAttribute("role", "option"), i.setAttribute("aria-selected", s.selected), i.setAttribute("aria-disabled", s.disabled), s.selected && i.setAttribute(fl, ""), s.disabled && i.setAttribute("data-te-select-option-disabled", !0), s.hidden && p.addClass(i, "hidden"), i.appendChild(bl(s, t, e)), s.icon && i.appendChild(nm(s, e)), s.setNode(i), i;
}
function bl(s, t, e) {
  const i = L("span");
  i.setAttribute(K_, ""), p.addClass(i, e.selectOptionText);
  const n = document.createTextNode(s.label);
  return t.multiple && i.appendChild(sm(s, e)), i.appendChild(n), (s.secondaryText || typeof s.secondaryText == "number") && i.appendChild(
    im(s.secondaryText, e)
  ), i;
}
function im(s, t) {
  const e = L("span");
  p.addClass(e, t.selectOptionSecondaryText);
  const i = document.createTextNode(s);
  return e.appendChild(i), e;
}
function sm(s, t) {
  const e = L("input");
  e.setAttribute("type", "checkbox"), p.addClass(e, t.formCheckInput), e.setAttribute(U_, "");
  const i = L("label");
  return s.selected && e.setAttribute("checked", !0), s.disabled && e.setAttribute("disabled", !0), e.appendChild(i), e;
}
function nm(s, t) {
  const e = L("span"), i = L("img");
  return p.addClass(i, t.selectOptionIcon), i.src = s.icon, e.appendChild(i), e;
}
function om(s, t, e) {
  const i = L("div");
  i.setAttribute(z_, ""), p.addClass(i, e.selectOptionGroup), i.setAttribute("role", "group"), i.setAttribute("id", s.id), s.hidden && p.addClass(i, "hidden");
  const n = L("label");
  return n.setAttribute(X_, ""), p.addClass(n, e.selectOptionGroupLabel), p.addStyle(n, { height: `${t.selectOptionHeight}px` }), n.setAttribute("for", s.id), n.textContent = s.label, i.appendChild(n), s.options.forEach((o) => {
    i.appendChild(gl(o, t, e));
  }), i;
}
function rm(s, t) {
  const e = L("div");
  return e.innerHTML = s, p.addClass(e, t.selectLabel), p.addClass(e, t.selectFakeValue), e;
}
const bn = "select", Ze = "te.select", gi = `.${Ze}`, am = `close${gi}`, lm = `open${gi}`, Kr = `optionSelect${gi}`, Ur = `optionDeselect${gi}`, cm = `valueChange${gi}`, dm = "change", zr = "data-te-select-init", vl = "data-te-select-no-results-ref", Xr = "data-te-select-open", G = "data-te-input-state-active", Wt = "data-te-input-focused", vn = "data-te-input-disabled", hm = "data-te-select-option-group-label-ref", um = "data-te-select-option-all-ref", ze = "data-te-select-selected", pm = "[data-te-select-label-ref]", Gr = "[data-te-select-input-ref]", fm = "[data-te-select-input-filter-ref]", _m = "[data-te-select-dropdown-ref]", mm = "[data-te-select-options-wrapper-ref]", qr = "[data-te-select-options-list-ref]", gm = "[data-te-select-option-ref]", bm = "[data-te-select-clear-btn-ref]", vm = "[data-te-select-custom-content-ref]", Em = `[${vl}]`, Qr = "[data-te-select-form-outline-ref]", Tm = "[data-te-select-toggle]", En = "[data-te-input-notch-ref]", Cm = 200, Am = {
  selectAutoSelect: !1,
  selectContainer: "body",
  selectClearButton: !1,
  disabled: !1,
  selectDisplayedLabels: 5,
  selectFormWhite: !1,
  multiple: !1,
  selectOptionsSelectedLabel: "options selected",
  selectOptionHeight: 38,
  selectAll: !0,
  selectAllLabel: "Select all",
  selectSearchPlaceholder: "Search...",
  selectSize: "default",
  selectVisibleOptions: 5,
  selectFilter: !1,
  selectFilterDebounce: 300,
  selectNoResultText: "No results",
  selectValidation: !1,
  selectValidFeedback: "Valid",
  selectInvalidFeedback: "Invalid",
  selectPlaceholder: ""
}, ym = {
  selectAutoSelect: "boolean",
  selectContainer: "string",
  selectClearButton: "boolean",
  disabled: "boolean",
  selectDisplayedLabels: "number",
  selectFormWhite: "boolean",
  multiple: "boolean",
  selectOptionsSelectedLabel: "string",
  selectOptionHeight: "number",
  selectAll: "boolean",
  selectAllLabel: "string",
  selectSearchPlaceholder: "string",
  selectSize: "string",
  selectVisibleOptions: "number",
  selectFilter: "boolean",
  selectFilterDebounce: "number",
  selectNoResultText: "string",
  selectValidation: "boolean",
  selectValidFeedback: "string",
  selectInvalidFeedback: "string",
  selectPlaceholder: "string"
}, wm = {
  dropdown: "relative outline-none min-w-[100px] m-0 scale-[0.8] opacity-0 bg-white shadow-[0_2px_5px_0_rgba(0,0,0,0.16),_0_2px_10px_0_rgba(0,0,0,0.12)] transition duration-200 motion-reduce:transition-none data-[te-select-open]:scale-100 data-[te-select-open]:opacity-100 dark:bg-zinc-700",
  formCheckInput: "relative float-left mt-[0.15rem] mr-[8px] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 dark:border-neutral-600 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary dark:checked:border-primary checked:bg-primary dark:checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:ml-[0.25rem] checked:after:-mt-px checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-t-0 checked:after:border-l-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:ml-[0.25rem] checked:focus:after:-mt-px checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-t-0 checked:focus:after:border-l-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent",
  formOutline: "relative",
  initialized: "hidden",
  inputGroup: "flex items-center whitespace-nowrap p-2.5 text-center text-base font-normal leading-[1.6] text-gray-700 dark:bg-zinc-800 dark:text-gray-200 dark:placeholder:text-gray-200",
  noResult: "flex items-center px-4",
  optionsList: "list-none m-0 p-0",
  optionsWrapper: "overflow-y-auto",
  optionsWrapperScrollbar: "[&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar]:h-1 [&::-webkit-scrollbar-button]:block [&::-webkit-scrollbar-button]:h-0 [&::-webkit-scrollbar-button]:bg-transparent [&::-webkit-scrollbar-track-piece]:bg-transparent [&::-webkit-scrollbar-track-piece]:rounded-none [&::-webkit-scrollbar-track-piece]: [&::-webkit-scrollbar-track-piece]:rounded-l [&::-webkit-scrollbar-thumb]:h-[50px] [&::-webkit-scrollbar-thumb]:bg-[#999] [&::-webkit-scrollbar-thumb]:rounded",
  selectArrow: "absolute right-3 text-[0.8rem] cursor-pointer peer-focus:text-primary peer-data-[te-input-focused]:text-primary group-data-[te-was-validated]/validation:peer-valid:text-green-600 group-data-[te-was-validated]/validation:peer-invalid:text-[rgb(220,76,100)] w-5 h-5",
  selectArrowWhite: "text-gray-50 peer-focus:!text-white peer-data-[te-input-focused]:!text-white",
  selectArrowDefault: "top-2",
  selectArrowLg: "top-[13px]",
  selectArrowSm: "top-1",
  selectClearBtn: "absolute top-2 right-9 text-black cursor-pointer focus:text-primary outline-none dark:text-gray-200",
  selectClearBtnWhite: "!text-gray-50",
  selectClearBtnDefault: "top-2 text-base",
  selectClearBtnLg: "top-[11px] text-base",
  selectClearBtnSm: "top-1 text-[0.8rem]",
  selectDropdownContainer: "z-[1070]",
  selectFakeValue: "transform-none hidden data-[te-input-state-active]:block",
  selectFilterInput: "relative m-0 block w-full min-w-0 flex-auto rounded border border-solid border-gray-300 bg-transparent bg-clip-padding px-3 py-1.5 text-base font-normal text-gray-700 transition duration-300 ease-in-out motion-reduce:transition-none focus:border-primary focus:text-gray-700 focus:shadow-te-primary focus:outline-none dark:text-gray-200 dark:placeholder:text-gray-200",
  selectInput: "peer block min-h-[auto] w-full rounded border-0 bg-transparent outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-gray-200 dark:placeholder:text-gray-200 [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0 cursor-pointer data-[te-input-disabled]:bg-[#e9ecef] data-[te-input-disabled]:cursor-default group-data-[te-was-validated]/validation:mb-4 dark:data-[te-input-disabled]:bg-zinc-600",
  selectInputWhite: "!text-gray-50",
  selectInputSizeDefault: "py-[0.32rem] px-3 leading-[1.6]",
  selectInputSizeLg: "py-[0.32rem] px-3 leading-[2.15]",
  selectInputSizeSm: "py-[0.33rem] px-3 text-xs leading-[1.5]",
  selectLabel: "pointer-events-none absolute top-0 left-3 mb-0 max-w-[90%] origin-[0_0] truncate text-gray-500 transition-all duration-200 ease-out peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-gray-200 dark:peer-focus:text-gray-200 data-[te-input-state-active]:scale-[0.8] dark:peer-focus:text-primary",
  selectLabelWhite: "!text-gray-50",
  selectLabelSizeDefault: "pt-[0.37rem] leading-[1.6] peer-focus:-translate-y-[0.9rem] peer-data-[te-input-state-active]:-translate-y-[0.9rem] data-[te-input-state-active]:-translate-y-[0.9rem]",
  selectLabelSizeLg: "pt-[0.37rem] leading-[2.15] peer-focus:-translate-y-[1.15rem] peer-data-[te-input-state-active]:-translate-y-[1.15rem] data-[te-input-state-active]:-translate-y-[1.15rem]",
  selectLabelSizeSm: "pt-[0.37rem] text-xs leading-[1.5] peer-focus:-translate-y-[0.75rem] peer-data-[te-input-state-active]:-translate-y-[0.75rem] data-[te-input-state-active]:-translate-y-[0.75rem]",
  selectOption: "flex flex-row items-center justify-between w-full px-4 truncate text-gray-700 bg-transparent select-none cursor-pointer data-[te-input-multiple-active]:bg-black/5 hover:[&:not([data-te-select-option-disabled])]:bg-black/5 data-[te-input-state-active]:bg-black/5 data-[te-select-option-selected]:data-[te-input-state-active]:bg-black/5 data-[te-select-selected]:data-[te-select-option-disabled]:cursor-default data-[te-select-selected]:data-[te-select-option-disabled]:text-gray-400 data-[te-select-selected]:data-[te-select-option-disabled]:bg-transparent data-[te-select-option-selected]:bg-black/[0.02] data-[te-select-option-disabled]:text-gray-400 data-[te-select-option-disabled]:cursor-default group-data-[te-select-option-group-ref]/opt:pl-7 dark:text-gray-200 dark:hover:[&:not([data-te-select-option-disabled])]:bg-white/30 dark:data-[te-input-state-active]:bg-white/30 dark:data-[te-select-option-selected]:data-[te-input-state-active]:bg-white/30 dark:data-[te-select-option-disabled]:text-gray-400 dark:data-[te-input-multiple-active]:bg-white/30",
  selectOptionGroup: "group/opt",
  selectOptionGroupLabel: "flex flex-row items-center w-full px-4 truncate bg-transparent text-black/50 select-none dark:text-gray-300",
  selectOptionIcon: "w-7 h-7 rounded-full",
  selectOptionSecondaryText: "block text-[0.8rem] text-gray-500 dark:text-gray-300",
  selectOptionText: "group",
  selectValidationValid: "hidden absolute -mt-3 w-auto text-sm text-green-600 cursor-pointer group-data-[te-was-validated]/validation:peer-valid:block",
  selectValidationInvalid: "hidden absolute -mt-3 w-auto text-sm text-[rgb(220,76,100)] cursor-pointer group-data-[te-was-validated]/validation:peer-invalid:block"
}, Om = {
  dropdown: "string",
  formCheckInput: "string",
  formOutline: "string",
  initialized: "string",
  inputGroup: "string",
  noResult: "string",
  optionsList: "string",
  optionsWrapper: "string",
  optionsWrapperScrollbar: "string",
  selectArrow: "string",
  selectArrowDefault: "string",
  selectArrowLg: "string",
  selectArrowSm: "string",
  selectClearBtn: "string",
  selectClearBtnDefault: "string",
  selectClearBtnLg: "string",
  selectClearBtnSm: "string",
  selectDropdownContainer: "string",
  selectFakeValue: "string",
  selectFilterInput: "string",
  selectInput: "string",
  selectInputSizeDefault: "string",
  selectInputSizeLg: "string",
  selectInputSizeSm: "string",
  selectLabel: "string",
  selectLabelSizeDefault: "string",
  selectLabelSizeLg: "string",
  selectLabelSizeSm: "string",
  selectOption: "string",
  selectOptionGroup: "string",
  selectOptionGroupLabel: "string",
  selectOptionIcon: "string",
  selectOptionSecondaryText: "string",
  selectOptionText: "string"
};
class El {
  constructor(t, e, i) {
    this._element = t, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._optionsToRender = this._getOptionsToRender(t), this._plainOptions = this._getPlainOptions(this._optionsToRender), this._filteredOptionsList = null, this._selectionModel = new M_(this.multiple), this._activeOptionIndex = -1, this._activeOption = null, this._wrapperId = kt("select-wrapper-"), this._dropdownContainerId = kt("select-dropdown-container-"), this._selectAllId = kt("select-all-"), this._debounceTimeoutId = null, this._dropdownHeight = this._config.selectOptionHeight * this._config.selectVisibleOptions, this._popper = null, this._input = null, this._label = d.next(this._element, pm)[0], this._notch = null, this._fakeValue = null, this._isFakeValueActive = !1, this._customContent = d.next(
      t,
      vm
    )[0], this._toggleButton = null, this._elementToggle = null, this._wrapper = null, this._inputEl = null, this._dropdownContainer = null, this._container = null, this._selectAllOption = null, this._init(), this._mutationObserver = null, this._isOpen = !1, this._addMutationObserver(), this._element && I.setData(t, Ze, this);
  }
  static get NAME() {
    return bn;
  }
  get filterInput() {
    return d.findOne(
      fm,
      this._dropdownContainer
    );
  }
  get dropdown() {
    return d.findOne(_m, this._dropdownContainer);
  }
  get optionsList() {
    return d.findOne(
      qr,
      this._dropdownContainer
    );
  }
  get optionsWrapper() {
    return d.findOne(
      mm,
      this._dropdownContainer
    );
  }
  get clearButton() {
    return d.findOne(bm, this._wrapper);
  }
  get options() {
    return this._filteredOptionsList ? this._filteredOptionsList : this._plainOptions;
  }
  get value() {
    return this.multiple ? this._selectionModel.values : this._selectionModel.value;
  }
  get multiple() {
    return this._config.multiple;
  }
  get hasSelectAll() {
    return this.multiple && this._config.selectAll;
  }
  get hasSelection() {
    return this._selectionModel.selection || this._selectionModel.selections.length > 0;
  }
  _getConfig(t) {
    const e = p.getDataAttributes(this._element);
    return t = {
      ...Am,
      ...e,
      ...t
    }, this._element.hasAttribute("multiple") && (t.multiple = !0), this._element.hasAttribute("disabled") && (t.disabled = !0), this._element.tabIndex && (t.tabIndex = this._element.getAttribute("tabIndex")), M(bn, t, ym), t;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...wm,
      ...e,
      ...t
    }, M(bn, t, Om), t;
  }
  _getOptionsToRender(t) {
    const e = [];
    return t.childNodes.forEach((n) => {
      if (n.nodeName === "OPTGROUP") {
        const o = {
          id: kt("group-"),
          label: n.label,
          disabled: n.hasAttribute("disabled"),
          hidden: n.hasAttribute("hidden"),
          options: []
        };
        n.childNodes.forEach((a) => {
          a.nodeName === "OPTION" && o.options.push(
            this._createOptionObject(a, o)
          );
        }), e.push(o);
      } else
        n.nodeName === "OPTION" && e.push(this._createOptionObject(n));
    }), e;
  }
  _getPlainOptions(t) {
    if (!d.findOne("optgroup", this._element))
      return t;
    const i = [];
    return t.forEach((n) => {
      Object.prototype.hasOwnProperty.call(
        n,
        "options"
      ) ? n.options.forEach((r) => {
        i.push(r);
      }) : i.push(n);
    }), i;
  }
  _createOptionObject(t, e = {}) {
    const i = kt("option-"), n = e.id ? e.id : null, o = e.disabled ? e.disabled : !1, r = t.selected || t.hasAttribute(ze), a = t.hasAttribute("disabled") || o, l = t.hasAttribute("hidden") || e && e.hidden, c = this.multiple, h = t.value, _ = t.label, f = p.getDataAttribute(
      t,
      "selectSecondaryText"
    ), g = p.getDataAttribute(t, "select-icon");
    return new Yr(
      i,
      t,
      c,
      h,
      _,
      r,
      a,
      l,
      f,
      n,
      g
    );
  }
  _getNavigationOptions() {
    const t = this.options.filter((e) => !e.hidden);
    return this.hasSelectAll ? [this._selectAllOption, ...t] : t;
  }
  _init() {
    this._renderMaterialWrapper(), this._wrapper = d.findOne(`#${this._wrapperId}`), this._input = d.findOne(Gr, this._wrapper), this._config.disabled && this._input.setAttribute(vn, "");
    const t = this._config.selectContainer;
    t === "body" ? this._container = document.body : this._container = d.findOne(t), this._initOutlineInput(), this._setDefaultSelections(), this._updateInputValue(), this._appendFakeValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._bindComponentEvents(), this.hasSelectAll && (this._selectAllOption = this._createSelectAllOption()), this._dropdownContainer = jr(
      this._dropdownContainerId,
      this._config,
      this._input.offsetWidth,
      this._dropdownHeight,
      this._selectAllOption,
      this._optionsToRender,
      this._customContent,
      this._classes
    ), this._setFirstActiveOption(), this._listenToFocusChange();
  }
  _renderMaterialWrapper() {
    const t = Q_(
      this._wrapperId,
      this._config,
      this._label,
      this._classes
    );
    this._element.parentNode.insertBefore(t, this._element), p.addClass(this._element, this._classes.initialized), t.appendChild(this._element);
  }
  _initOutlineInput() {
    const t = d.findOne(
      Qr,
      this._wrapper
    );
    new V(t, {
      inputFormWhite: this._config.selectFormWhite
    }).init(), this._notch = d.findOne(En, this._wrapper);
  }
  _bindComponentEvents() {
    this._listenToComponentKeydown(), this._listenToWrapperClick(), this._listenToClearBtnClick(), this._listenToClearBtnKeydown();
  }
  _setDefaultSelections() {
    this.options.forEach((t) => {
      t.selected && this._selectionModel.select(t);
    });
  }
  _listenToComponentKeydown() {
    u.on(this._wrapper, "keydown", this._handleKeydown.bind(this));
  }
  _handleKeydown(t) {
    this._isOpen && !this._config.selectFilter ? this._handleOpenKeydown(t) : this._handleClosedKeydown(t);
  }
  _handleOpenKeydown(t) {
    const e = t.keyCode, i = e === ws || e === it && t.altKey || e === li;
    if (e === li && this._config.selectAutoSelect && !this.multiple && this._handleAutoSelection(this._activeOption), i) {
      this.close(), this._input.focus();
      return;
    }
    switch (e) {
      case U:
        this._setNextOptionActive(), this._scrollToOption(this._activeOption);
        break;
      case it:
        this._setPreviousOptionActive(), this._scrollToOption(this._activeOption);
        break;
      case Ie:
        this._setFirstOptionActive(), this._scrollToOption(this._activeOption);
        break;
      case $e:
        this._setLastOptionActive(), this._scrollToOption(this._activeOption);
        break;
      case nt:
        t.preventDefault(), this._activeOption && (this.hasSelectAll && this._activeOptionIndex === 0 ? this._handleSelectAll() : this._handleSelection(this._activeOption));
        return;
      default:
        return;
    }
    t.preventDefault();
  }
  _handleClosedKeydown(t) {
    const e = t.keyCode;
    if (e === nt && t.preventDefault(), (e === nt || e === U && t.altKey || e === U && this.multiple) && this.open(), this.multiple)
      switch (e) {
        case U:
          this.open();
          break;
        case it:
          this.open();
          break;
        default:
          return;
      }
    else
      switch (e) {
        case U:
          this._setNextOptionActive(), this._handleSelection(this._activeOption);
          break;
        case it:
          this._setPreviousOptionActive(), this._handleSelection(this._activeOption);
          break;
        case Ie:
          this._setFirstOptionActive(), this._handleSelection(this._activeOption);
          break;
        case $e:
          this._setLastOptionActive(), this._handleSelection(this._activeOption);
          break;
        default:
          return;
      }
    t.preventDefault();
  }
  _scrollToOption(t) {
    if (!t)
      return;
    let e;
    const i = this.options.filter((h) => !h.hidden);
    this.hasSelectAll ? e = i.indexOf(t) + 1 : e = i.indexOf(t);
    const n = this._getNumberOfGroupsBeforeOption(e), o = e + n, r = this.optionsWrapper, a = r.offsetHeight, l = this._config.selectOptionHeight, c = r.scrollTop;
    if (e > -1) {
      const h = o * l, _ = h + l > c + a;
      h < c ? r.scrollTop = h : _ ? r.scrollTop = h - a + l : r.scrollTop = c;
    }
  }
  _getNumberOfGroupsBeforeOption(t) {
    const e = this.options.filter((r) => !r.hidden), i = this._optionsToRender.filter((r) => !r.hidden), n = this.hasSelectAll ? t - 1 : t;
    let o = 0;
    for (let r = 0; r <= n; r++)
      e[r].groupId && i[o] && i[o].id && e[r].groupId === i[o].id && o++;
    return o;
  }
  _setNextOptionActive() {
    let t = this._activeOptionIndex + 1;
    const e = this._getNavigationOptions();
    if (e[t]) {
      for (; e[t].disabled; )
        if (t += 1, !e[t])
          return;
      this._updateActiveOption(e[t], t);
    }
  }
  _setPreviousOptionActive() {
    let t = this._activeOptionIndex - 1;
    const e = this._getNavigationOptions();
    if (e[t]) {
      for (; e[t].disabled; )
        if (t -= 1, !e[t])
          return;
      this._updateActiveOption(e[t], t);
    }
  }
  _setFirstOptionActive() {
    const e = this._getNavigationOptions();
    this._updateActiveOption(e[0], 0);
  }
  _setLastOptionActive() {
    const t = this._getNavigationOptions(), e = t.length - 1;
    this._updateActiveOption(t[e], e);
  }
  _updateActiveOption(t, e) {
    const i = this._activeOption;
    i && i.removeActiveStyles(), t.setActiveStyles(), this._activeOptionIndex = e, this._activeOption = t;
  }
  _listenToWrapperClick() {
    u.on(this._wrapper, "click", () => {
      this.toggle();
    });
  }
  _listenToClearBtnClick() {
    u.on(this.clearButton, "click", (t) => {
      t.preventDefault(), t.stopPropagation(), this._handleClear();
    });
  }
  _listenToClearBtnKeydown() {
    u.on(this.clearButton, "keydown", (t) => {
      t.keyCode === nt && (this._handleClear(), t.preventDefault(), t.stopPropagation());
    });
  }
  _handleClear() {
    if (this.multiple)
      this._selectionModel.clear(), this._deselectAllOptions(this.options), this.hasSelectAll && this._updateSelectAllState();
    else {
      const t = this._selectionModel.selection;
      this._selectionModel.clear(), t.deselect();
    }
    this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._emitValueChangeEvent(null), this._emitNativeChangeEvent();
  }
  _listenToOptionsClick() {
    u.on(this.optionsWrapper, "click", (t) => {
      if (t.target.hasAttribute(
        hm
      ))
        return;
      const i = t.target.nodeName === "DIV" ? t.target : d.closest(t.target, gm);
      if (i.hasAttribute(um)) {
        this._handleSelectAll();
        return;
      }
      const o = i.dataset.teId, r = this.options.find((a) => a.id === o);
      r && !r.disabled && this._handleSelection(r);
    });
  }
  _handleSelectAll() {
    this._selectAllOption.selected ? (this._deselectAllOptions(this.options), this._selectAllOption.deselect()) : (this._selectAllOptions(this.options), this._selectAllOption.select()), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent();
  }
  _selectAllOptions(t) {
    t.forEach((e) => {
      !e.selected && !e.disabled && (this._selectionModel.select(e), e.select());
    });
  }
  _deselectAllOptions(t) {
    t.forEach((e) => {
      e.selected && !e.disabled && (this._selectionModel.deselect(e), e.deselect());
    });
  }
  _handleSelection(t) {
    this.multiple ? (this._handleMultiSelection(t), this.hasSelectAll && this._updateSelectAllState()) : this._handleSingleSelection(t), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility();
  }
  _handleAutoSelection(t) {
    this._singleOptionSelect(t), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility();
  }
  _handleSingleSelection(t) {
    this._singleOptionSelect(t), this.close(), this._input.focus();
  }
  _singleOptionSelect(t) {
    const e = this._selectionModel.selections[0];
    e && e !== t && (this._selectionModel.deselect(e), e.deselect(), e.node.setAttribute(ze, !1), u.trigger(this._element, Ur, {
      value: e.value
    })), (!e || e && t !== e) && (this._selectionModel.select(t), t.select(), t.node.setAttribute(ze, !0), u.trigger(this._element, Kr, {
      value: t.value
    }), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent());
  }
  _handleMultiSelection(t) {
    t.selected ? (this._selectionModel.deselect(t), t.deselect(), t.node.setAttribute(ze, !1), u.trigger(this._element, Ur, {
      value: t.value
    })) : (this._selectionModel.select(t), t.select(), t.node.setAttribute(ze, !0), u.trigger(this._element, Kr, {
      value: t.value
    })), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent();
  }
  _emitValueChangeEvent(t) {
    u.trigger(this._element, cm, { value: t });
  }
  _emitNativeChangeEvent() {
    u.trigger(this._element, dm);
  }
  _updateInputValue() {
    const t = this.multiple ? this._selectionModel.labels : this._selectionModel.label;
    let e;
    this.multiple && this._config.selectDisplayedLabels !== -1 && this._selectionModel.selections.length > this._config.selectDisplayedLabels ? e = `${this._selectionModel.selections.length} ${this._config.selectOptionsSelectedLabel}` : e = t, !this.multiple && !this._isSelectionValid(this._selectionModel.selection) ? this._input.value = "" : this._isLabelEmpty(this._selectionModel.selection) ? this._input.value = " " : e ? this._input.value = e : this.multiple || !this._optionsToRender[0] ? this._input.value = "" : this._input.value = this._optionsToRender[0].label;
  }
  _isSelectionValid(t) {
    return !(t && (t.disabled || t.value === ""));
  }
  _isLabelEmpty(t) {
    return !!(t && t.label === "");
  }
  _appendFakeValue() {
    if (!this._selectionModel.selection || this._selectionModel._multiple)
      return;
    const t = this._selectionModel.selection.label;
    this._fakeValue = rm(t, this._classes), d.findOne(
      Qr,
      this._wrapper
    ).appendChild(this._fakeValue);
  }
  _updateLabelPosition() {
    const t = this._element.hasAttribute(zr), e = this._input.value !== "";
    this._label && (t && (e || this._isOpen || this._isFakeValueActive) ? (this._label.setAttribute(G, ""), this._notch.setAttribute(G, "")) : (this._label.removeAttribute(G), this._notch.removeAttribute(G, "")));
  }
  _updateLabelPositionWhileClosing() {
    this._label && (this._input.value !== "" || this._isFakeValueActive ? (this._label.setAttribute(G, ""), this._notch.setAttribute(G, "")) : (this._label.removeAttribute(G), this._notch.removeAttribute(G)));
  }
  _updateFakeLabelPosition() {
    this._fakeValue && (this._input.value === "" && this._fakeValue.innerHTML !== "" ? (this._isFakeValueActive = !0, this._fakeValue.setAttribute(G, "")) : (this._isFakeValueActive = !1, this._fakeValue.removeAttribute(G)));
  }
  _updateClearButtonVisibility() {
    if (!this.clearButton)
      return;
    this._selectionModel.selection || this._selectionModel.selections.length > 0 ? p.addStyle(this.clearButton, { display: "block" }) : p.addStyle(this.clearButton, { display: "none" });
  }
  _updateSelectAllState() {
    const t = this._selectAllOption.selected, e = Pn(this.options);
    !e && t ? this._selectAllOption.deselect() : e && !t && this._selectAllOption.select();
  }
  toggle() {
    this._isOpen ? this.close() : this.open();
  }
  open() {
    const t = this._config.disabled, e = u.trigger(this._element, lm);
    this._isOpen || t || e.defaultPrevented || (this._openDropdown(), this._updateDropdownWidth(), this._setFirstActiveOption(), this._scrollToOption(this._activeOption), this._config.selectFilter && (setTimeout(() => {
      this.filterInput.focus();
    }, 0), this._listenToSelectSearch(), this._listenToDropdownKeydown()), this._listenToOptionsClick(), this._listenToOutsideClick(), this._listenToWindowResize(), this._isOpen = !0, this._updateLabelPosition(), this._setInputActiveStyles());
  }
  _openDropdown() {
    this._popper = Be(this._input, this._dropdownContainer, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 1]
          }
        }
      ]
    }), this._container.appendChild(this._dropdownContainer), setTimeout(() => {
      this.dropdown.setAttribute(Xr, "");
    }, 0);
  }
  _updateDropdownWidth() {
    const t = this._input.offsetWidth;
    p.addStyle(this._dropdownContainer, { width: `${t}px` });
  }
  _setFirstActiveOption() {
    const t = this._getNavigationOptions(), e = this._activeOption;
    e && e.removeActiveStyles();
    const i = this.multiple ? this._selectionModel.selections[0] : this._selectionModel.selection;
    i ? (this._activeOption = i, i.setActiveStyles(), this._activeOptionIndex = t.findIndex(
      (n) => n === i
    )) : (this._activeOption = null, this._activeOptionIndex = -1);
  }
  _setInputActiveStyles() {
    this._input.setAttribute(Wt, ""), d.findOne(En, this._wrapper).setAttribute(
      Wt,
      ""
    );
  }
  _listenToWindowResize() {
    u.on(window, "resize", this._handleWindowResize.bind(this));
  }
  _handleWindowResize() {
    this._dropdownContainer && this._updateDropdownWidth();
  }
  _listenToSelectSearch() {
    this.filterInput.addEventListener("input", (t) => {
      const e = t.target.value, i = this._config.selectFilterDebounce;
      this._debounceFilter(e, i);
    });
  }
  _debounceFilter(t, e) {
    this._debounceTimeoutId && clearTimeout(this._debounceTimeoutId), this._debounceTimeoutId = setTimeout(() => {
      this._filterOptions(t);
    }, e);
  }
  _filterOptions(t) {
    const e = [];
    this._optionsToRender.forEach((o) => {
      const r = Object.prototype.hasOwnProperty.call(
        o,
        "options"
      ), a = !r && o.label.toLowerCase().includes(t.toLowerCase()), l = {};
      r && (l.label = o.label, l.options = this._filter(t, o.options), l.options.length > 0 && e.push(l)), a && e.push(o);
    });
    const i = this._config.selectNoResultText !== "", n = e.length !== 0;
    if (n)
      this._updateOptionsListTemplate(e), this._popper.forceUpdate(), this._filteredOptionsList = this._getPlainOptions(e), this.hasSelectAll && this._updateSelectAllState(), this._setFirstActiveOption();
    else if (!n && i) {
      const o = this._getNoResultTemplate();
      this.optionsWrapper.innerHTML = o;
    }
  }
  _updateOptionsListTemplate(t) {
    const e = d.findOne(qr, this._dropdownContainer) || d.findOne(Em, this._dropdownContainer), i = _l(
      t,
      this._selectAllOption,
      this._config,
      this._classes
    );
    this.optionsWrapper.removeChild(e), this.optionsWrapper.appendChild(i);
  }
  _getNoResultTemplate() {
    return `<div class="${this._classes.noResult}" ${vl} style="height: ${this._config.selectOptionHeight}px">${this._config.selectNoResultText}</div>`;
  }
  _filter(t, e) {
    const i = t.toLowerCase();
    return e.filter(
      (n) => n.label.toLowerCase().includes(i)
    );
  }
  _listenToDropdownKeydown() {
    u.on(
      this.dropdown,
      "keydown",
      this._handleOpenKeydown.bind(this)
    );
  }
  _listenToOutsideClick() {
    this._outsideClick = this._handleOutSideClick.bind(this), u.on(document, "click", this._outsideClick);
  }
  _listenToFocusChange(t = !0) {
    if (t === !1) {
      u.remove(
        this._input,
        "focus",
        () => this._notch.setAttribute(Wt, "")
      ), u.remove(
        this._input,
        "blur",
        () => this._notch.removeAttribute(Wt)
      );
      return;
    }
    u.on(
      this._input,
      "focus",
      () => this._notch.setAttribute(Wt, "")
    ), u.on(
      this._input,
      "blur",
      () => this._notch.removeAttribute(Wt)
    );
  }
  _handleOutSideClick(t) {
    const e = this._wrapper && this._wrapper.contains(t.target), i = t.target === this._dropdownContainer, n = this._dropdownContainer && this._dropdownContainer.contains(t.target);
    let o;
    this._toggleButton || (this._elementToggle = d.find(Tm)), this._elementToggle && this._elementToggle.forEach((r) => {
      const a = p.getDataAttribute(
        r,
        "select-toggle"
      );
      (a === this._element.id || this._element.classList.contains(a)) && (this._toggleButton = r, o = this._toggleButton.contains(t.target));
    }), !e && !i && !n && !o && this.close();
  }
  close() {
    const t = u.trigger(this._element, am);
    !this._isOpen || t.defaultPrevented || (this._config.selectFilter && this.hasSelectAll && (this._resetFilterState(), this._updateOptionsListTemplate(this._optionsToRender), this._config.multiple && this._updateSelectAllState()), this._removeDropdownEvents(), this.dropdown.removeAttribute(Xr), setTimeout(() => {
      this._input.removeAttribute(Wt), this._input.blur(), d.findOne(En, this._wrapper).removeAttribute(
        Wt
      ), this._label && !this.hasSelection && (this._label.removeAttribute(G), this._notch.setAttribute(G, ""), this._input.removeAttribute(G), this._notch.removeAttribute(G)), this._updateLabelPositionWhileClosing();
    }, 0), setTimeout(() => {
      this._container && this._dropdownContainer.parentNode === this._container && this._container.removeChild(this._dropdownContainer), this._popper.destroy(), this._isOpen = !1, u.off(this.dropdown, "transitionend");
    }, Cm));
  }
  _resetFilterState() {
    this.filterInput.value = "", this._filteredOptionsList = null;
  }
  _removeDropdownEvents() {
    u.off(document, "click", this._outsideClick), this._config.selectFilter && u.off(this.dropdown, "keydown"), u.off(this.optionsWrapper, "click");
  }
  _addMutationObserver() {
    this._mutationObserver = new MutationObserver(() => {
      this._wrapper && (this._updateSelections(), this._updateDisabledState());
    }), this._observeMutationObserver();
  }
  _updateSelections() {
    this._optionsToRender = this._getOptionsToRender(this._element), this._plainOptions = this._getPlainOptions(this._optionsToRender), this._selectionModel.clear(), this._setDefaultSelections(), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this.hasSelectAll && this._updateSelectAllState();
    const t = this._config.filter && this.filterInput && this.filterInput.value;
    this._isOpen && !t ? (this._updateOptionsListTemplate(this._optionsToRender), this._setFirstActiveOption()) : this._isOpen && t ? (this._filterOptions(this.filterInput.value), this._setFirstActiveOption()) : this._dropdownContainer = jr(
      this._dropdownContainerId,
      this._config,
      this._input.offsetWidth,
      this._dropdownHeight,
      this._selectAllOption,
      this._optionsToRender,
      this._customContent,
      this._classes
    );
  }
  _updateDisabledState() {
    const t = d.findOne(Gr, this._wrapper);
    this._element.hasAttribute("disabled") ? (this._config.disabled = !0, t.setAttribute("disabled", ""), t.setAttribute(vn, "")) : (this._config.disabled = !1, t.removeAttribute("disabled"), t.removeAttribute(vn));
  }
  _observeMutationObserver() {
    this._mutationObserver && this._mutationObserver.observe(this._element, {
      attributes: !0,
      childList: !0,
      characterData: !0,
      subtree: !0
    });
  }
  _disconnectMutationObserver() {
    this.mutationObserver && (this._mutationObserver.disconnect(), this._mutationObserver = null);
  }
  _createSelectAllOption() {
    const t = this._selectAllId, e = null, i = !0, n = "select-all", o = this._config.selectAllLabel, r = Pn(this.options), a = !1, l = !1, c = null, h = null, _ = null;
    return new Yr(
      t,
      e,
      i,
      n,
      o,
      r,
      a,
      l,
      c,
      h,
      _
    );
  }
  dispose() {
    this._removeComponentEvents(), this._destroyMaterialSelect(), this._listenToFocusChange(!1), I.removeData(this._element, Ze);
  }
  _removeComponentEvents() {
    u.off(this.input, "click"), u.off(this.wrapper, this._handleKeydown.bind(this)), u.off(this.clearButton, "click"), u.off(this.clearButton, "keydown"), u.off(window, "resize", this._handleWindowResize.bind(this));
  }
  _destroyMaterialSelect() {
    this._isOpen && this.close(), this._destroyMaterialTemplate();
  }
  _destroyMaterialTemplate() {
    const t = this._wrapper.parentNode, e = d.find("label", this._wrapper);
    t.appendChild(this._element), e.forEach((i) => {
      t.appendChild(i);
    }), e.forEach((i) => {
      i.removeAttribute(G);
    }), p.removeClass(this._element, this._classes.initialized), this._element.removeActiveStyles(zr), t.removeChild(this._wrapper);
  }
  setValue(t) {
    this.options.filter((i) => i.selected).forEach((i) => i.nativeOption.selected = !1), Array.isArray(t) ? t.forEach((i) => {
      this._selectByValue(i);
    }) : this._selectByValue(t), this._updateSelections();
  }
  _selectByValue(t) {
    const e = this.options.find(
      (i) => i.value === t
    );
    return e ? (e.nativeOption.selected = !0, !0) : !1;
  }
  static jQueryInterface(t, e) {
    return this.each(function() {
      let i = I.getData(this, Ze);
      const n = typeof t == "object" && t;
      if (!(!i && /dispose/.test(t)) && (i || (i = new El(this, n)), typeof t == "string")) {
        if (typeof i[t] > "u")
          throw new TypeError(`No method named "${t}"`);
        i[t](e);
      }
    });
  }
  static getInstance(t) {
    return I.getData(t, Ze);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const km = (s) => {
  ca(() => {
    const t = la();
    if (t) {
      const e = s.NAME, i = t.fn[e];
      t.fn[e] = s.jQueryInterface, t.fn[e].Constructor = s, t.fn[e].noConflict = () => (t.fn[e] = i, s.jQueryInterface);
    }
  });
}, Sm = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}`,
    t,
    function(e) {
      e.preventDefault(), s.getOrCreateInstance(this).toggle();
    }
  );
}, xm = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}.data-api`,
    t,
    function(e) {
      if (["A", "AREA"].includes(this.tagName) && e.preventDefault(), de(this))
        return;
      s.getOrCreateInstance(this).show();
    }
  );
}, Dm = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}.data-api`,
    t,
    function(e) {
      const i = Xt(this);
      if (["A", "AREA"].includes(this.tagName) && e.preventDefault(), de(this))
        return;
      u.one(i, s.EVENT_HIDDEN, () => {
        xt(this) && this.focus();
      });
      const n = d.findOne(s.OPEN_SELECTOR);
      n && n !== i && s.getInstance(n).hide(), s.getOrCreateInstance(i).toggle(this);
    }
  );
}, Im = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}`,
    t,
    (e) => {
      e.preventDefault();
      const i = e.target.closest(t);
      s.getOrCreateInstance(i).toggle();
    }
  );
}, $m = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}`,
    t,
    function(e) {
      const i = Xt(this);
      ["A", "AREA"].includes(this.tagName) && e.preventDefault(), u.one(i, s.EVENT_SHOW, (r) => {
        r.defaultPrevented || u.one(i, s.EVENT_HIDDEN, () => {
          xt(this) && this.focus();
        });
      });
      const n = d.findOne(
        `[${s.OPEN_SELECTOR}="true"]`
      );
      n && s.getInstance(n).hide(), s.getOrCreateInstance(i).toggle(this);
    }
  );
}, Lm = (s, t) => {
  u.one(
    document,
    "mousedown",
    t,
    s.autoInitial(new s())
  );
}, Mm = (s, t) => {
  u.on(
    document,
    `click.te.${s.NAME}.data-api`,
    t,
    function(e) {
      (e.target.tagName === "A" || e.delegateTarget && e.delegateTarget.tagName === "A") && e.preventDefault();
      const i = Fn(this);
      d.find(i).forEach((o) => {
        s.getOrCreateInstance(o, { toggle: !1 }).toggle();
      });
    }
  );
}, Ft = {
  plugins: {
    legend: {
      labels: {
        color: "rgb(102,102,102)"
      }
    }
  }
}, hs = {
  line: {
    options: {
      ...Ft,
      elements: {
        line: {
          backgroundColor: "rgba(59, 112, 202, 0.0)",
          borderColor: "rgb(59, 112, 202)",
          borderWidth: 2,
          tension: 0
        },
        point: {
          borderColor: "rgb(59, 112, 202)",
          backgroundColor: "rgb(59, 112, 202)"
        }
      },
      responsive: !0,
      legend: {
        display: !0
      },
      tooltips: {
        intersect: !1,
        mode: "index"
      },
      datasets: {
        borderColor: "red"
      },
      scales: {
        x: {
          stacked: !0,
          grid: {
            display: !1
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        },
        y: {
          stacked: !1,
          grid: {
            borderDash: [2],
            drawBorder: !1,
            zeroLineColor: "rgba(0,0,0,0)",
            zeroLineBorderDash: [2],
            zeroLineBorderDashOffset: [2]
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        }
      }
    }
  },
  bar: {
    options: {
      ...Ft,
      backgroundColor: "rgb(59, 112, 202)",
      borderWidth: 0,
      responsive: !0,
      legend: {
        display: !0
      },
      tooltips: {
        intersect: !1,
        mode: "index"
      },
      scales: {
        x: {
          stacked: !0,
          grid: {
            display: !1
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        },
        y: {
          stacked: !0,
          grid: {
            borderDash: [2],
            drawBorder: !1,
            zeroLineColor: "rgba(0,0,0,0)",
            zeroLineBorderDash: [2],
            zeroLineBorderDashOffset: [2]
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        }
      }
    }
  },
  pie: {
    options: {
      ...Ft,
      elements: {
        arc: { backgroundColor: "rgb(59, 112, 202)" }
      },
      responsive: !0,
      legend: {
        display: !0
      }
    }
  },
  doughnut: {
    options: {
      ...Ft,
      elements: {
        arc: { backgroundColor: "rgb(59, 112, 202)" }
      },
      responsive: !0,
      legend: {
        display: !0
      }
    }
  },
  polarArea: {
    options: {
      ...Ft,
      elements: {
        arc: { backgroundColor: "rgba(59, 112, 202, 0.5)" }
      },
      responsive: !0,
      legend: {
        display: !0
      }
    }
  },
  radar: {
    options: {
      ...Ft,
      elements: {
        line: {
          backgroundColor: "rgba(59, 112, 202, 0.5)",
          borderColor: "rgb(59, 112, 202)",
          borderWidth: 2
        },
        point: {
          borderColor: "rgb(59, 112, 202)",
          backgroundColor: "rgb(59, 112, 202)"
        }
      },
      responsive: !0,
      legend: {
        display: !0
      }
    }
  },
  scatter: {
    options: {
      ...Ft,
      elements: {
        line: {
          backgroundColor: "rgba(59, 112, 202, 0.5)",
          borderColor: "rgb(59, 112, 202)",
          borderWidth: 2,
          tension: 0
        },
        point: {
          borderColor: "rgb(59, 112, 202)",
          backgroundColor: "rgba(59, 112, 202, 0.5)"
        }
      },
      responsive: !0,
      legend: {
        display: !0
      },
      tooltips: {
        intersect: !1,
        mode: "index"
      },
      datasets: {
        borderColor: "red"
      },
      scales: {
        x: {
          stacked: !0,
          grid: {
            display: !1
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        },
        y: {
          stacked: !1,
          grid: {
            borderDash: [2],
            drawBorder: !1,
            zeroLineColor: "rgba(0,0,0,0)",
            zeroLineBorderDash: [2],
            zeroLineBorderDashOffset: [2]
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        }
      }
    }
  },
  bubble: {
    options: {
      ...Ft,
      elements: {
        point: {
          borderColor: "rgb(59, 112, 202)",
          backgroundColor: "rgba(59, 112, 202, 0.5)"
        }
      },
      responsive: !0,
      legend: {
        display: !0
      },
      scales: {
        x: {
          grid: {
            display: !1
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        },
        y: {
          grid: {
            borderDash: [2],
            drawBorder: !1,
            zeroLineColor: "rgba(0,0,0,0)",
            zeroLineBorderDash: [2],
            zeroLineBorderDashOffset: [2]
          },
          ticks: {
            fontColor: "rgba(0,0,0, 0.5)"
          }
        }
      }
    }
  }
}, Nm = (s, t) => {
  const e = (o) => o[0] === "{" && o[o.length - 1] === "}" || o[0] === "[" && o[o.length - 1] === "]", i = (o) => typeof o != "string" ? o : e(o) ? JSON.parse(o.replace(/'/g, '"')) : o, n = (o) => {
    const r = {};
    return Object.keys(o).forEach((a) => {
      if (a.match(/dataset.*/)) {
        const l = a.slice(7, 8).toLowerCase().concat(a.slice(8));
        r[l] = i(o[a]);
      }
    }), r;
  };
  d.find(t).forEach((o) => {
    if (p.getDataAttribute(o, "chart") !== "bubble" && p.getDataAttribute(o, "chart") !== "scatter") {
      const r = p.getDataAttributes(o), a = {
        data: {
          datasets: [n(r)]
        }
      };
      return r.chart && (a.type = r.chart), r.labels && (a.data.labels = JSON.parse(r.labels.replace(/'/g, '"'))), new s(o, {
        ...a,
        ...hs[a.type]
      });
    }
    return null;
  });
};
let Bn = [];
const Je = {
  alert: {
    name: "Alert",
    selector: "[data-te-alert-init]",
    isToggler: !1
  },
  animation: {
    name: "Animate",
    selector: "[data-te-animation-init]",
    isToggler: !1
  },
  carousel: {
    name: "Carousel",
    selector: "[data-te-carousel-init]",
    isToggler: !1
  },
  chips: {
    name: "ChipsInput",
    selector: "[data-te-chips-init]",
    isToggler: !1
  },
  chip: {
    name: "Chip",
    selector: "[data-te-chip-init]",
    isToggler: !1
  },
  datepicker: {
    name: "Datepicker",
    selector: "[data-te-datepicker-init]",
    isToggler: !1
  },
  input: {
    name: "Input",
    selector: "[data-te-input-wrapper-init]",
    isToggler: !1
  },
  scrollspy: {
    name: "ScrollSpy",
    selector: "[data-te-spy='scroll']",
    isToggler: !1
  },
  select: {
    name: "Select",
    selector: "[data-te-select-init]",
    isToggler: !1
  },
  sidenav: {
    name: "Sidenav",
    selector: "[data-te-sidenav-init]",
    isToggler: !1
  },
  stepper: {
    name: "Stepper",
    selector: "[data-te-stepper-init]",
    isToggler: !1
  },
  timepicker: {
    name: "Timepicker",
    selector: "[data-te-timepicker-init]",
    isToggler: !1
  },
  toast: {
    name: "Toast",
    selector: "[data-te-toast-init]",
    isToggler: !1
  },
  // advancedInits
  chart: {
    name: "Chart",
    selector: "[data-te-chart]",
    isToggler: !1,
    advanced: Nm
  },
  // togglers
  button: {
    name: "Button",
    selector: "[data-te-toggle='button']",
    isToggler: !0,
    callback: Im
  },
  collapse: {
    name: "Collapse",
    selector: "[data-te-collapse-init]",
    isToggler: !0,
    callback: Mm
  },
  dropdown: {
    name: "Dropdown",
    selector: "[data-te-dropdown-toggle-ref]",
    isToggler: !0,
    callback: Sm
  },
  modal: {
    name: "Modal",
    selector: "[data-te-toggle='modal']",
    isToggler: !0,
    callback: $m
  },
  ripple: {
    name: "Ripple",
    selector: "[data-te-ripple-init]",
    isToggler: !0,
    callback: Lm
  },
  offcanvas: {
    name: "Offcanvas",
    selector: "[data-te-offcanvas-toggle]",
    isToggler: !0,
    callback: Dm
  },
  tab: {
    name: "Tab",
    selector: "[data-te-toggle='tab'], [data-te-toggle='pill'], [data-te-toggle='list']",
    isToggler: !0,
    callback: xm
  }
}, Rm = (s) => Je[s.NAME] || null, Pm = (s) => {
  if (!s || Bn.includes(s.NAME))
    return;
  Bn.push(s.NAME);
  const t = Rm(s), e = (t == null ? void 0 : t.isToggler) || !1;
  if (km(s), t != null && t.advanced) {
    t == null || t.advanced(s, t == null ? void 0 : t.selector);
    return;
  }
  if (e) {
    t == null || t.callback(s, t == null ? void 0 : t.selector);
    return;
  }
  d.find(t == null ? void 0 : t.selector).forEach((i) => {
    let n = s.getInstance(i);
    n || (n = new s(i));
  });
}, Bm = (s) => {
  s.forEach((t) => Pm(t));
}, Hm = (s, t = !1) => {
  const e = Object.keys(Je).map((i) => {
    if (Boolean(
      document.body.querySelector(Je[i].selector)
    )) {
      const o = s[Je[i].name];
      return !o && !Bn.includes(i) && t && console.warn(
        `Please import ${Je[i].name} from "tw-elements" package and add it to a object parameter inside "initTE" function`
      ), o;
    }
  });
  Bm(e);
}, Vm = ({ inputID: s, labelText: t }, e) => (Hm({ Input: V }, !1), `<div data-te-chips-input-wrapper data-te-input-wrapper-init class="${e.chipsInputWrapper}">
      <input
          type="text"
          class="${e.chipsInput}"
          id="${s}"
          placeholder="Example label" />
        <label
          for="${s}"
          class="${e.chipsLabel}"
          >${t}
        </label>

        <div data-te-input-notch-ref class="${e.chipsNotchesWrapper}">
        <div class="${e.chipsNotchesLeading}" data-te-input-notch-leading-ref style="width: 9px;"></div>
        <div class="${e.chipsNotchesMiddle}" data-te-input-notch-middle-ref style="width: 87.2px;"></div>
        <div class="${e.chipsNotchesTrailing}" data-te-input-notch-trailing-ref></div>
      </div>
    </div>`), Wm = ({ text: s, iconSVG: t }, e) => `<div data-te-chip-init data-te-ripple-init class="${e.chipElement}">
    <span data-te-chip-text>${s}</span> 
      <span data-te-chip-close class="${e.chipCloseIcon}">
        ${t}
      </span>
  </div>`, us = "chip", Fm = `te.${us}`, Tl = "data-te-chip-close", Tn = `[${Tl}]`, Ym = "delete.te.chips", jm = "select.te.chip", Km = '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3"> <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>', Um = {
  text: "string",
  closeIcon: "boolean",
  img: "object",
  iconSVG: "string"
}, zm = {
  text: "",
  closeIcon: !1,
  img: { path: "", alt: "" },
  iconSVG: Km
}, Xm = {
  icon: "float-right pl-[8px] text-[16px] opacity-[.53] cursor-pointer fill-[#afafaf] hover:text-[#8b8b8b] transition-all duration-200 ease-in-out",
  chipElement: "flex justify-between items-center h-[32px] leading-loose py-[5px] px-[12px] mr-4 my-[5px] text-[13px] font-normal text-[#4f4f4f] cursor-pointer bg-[#eceff1] dark:text-white dark:bg-neutral-600 rounded-[16px] transition-[opacity] duration-300 ease-linear [word-wrap: break-word] shadow-none normal-case hover:!shadow-none active:bg-[#cacfd1] inline-block font-medium leading-normal text-[#4f4f4f] text-center no-underline align-middle cursor-pointer select-none border-[.125rem] border-solid border-transparent py-1.5 px-3 text-xs rounded",
  chipCloseIcon: "w-4 float-right pl-[8px] text-[16px] opacity-[.53] cursor-pointer fill-[#afafaf] hover:fill-[#8b8b8b] dark:fill-gray-400 dark:hover:fill-gray-100 transition-all duration-200 ease-in-out"
}, Gm = {
  icon: "string",
  chipElement: "string",
  chipCloseIcon: "string"
};
class Xe {
  constructor(t, e = {}, i) {
    this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i);
  }
  // Getters
  static get NAME() {
    return us;
  }
  // Public
  init() {
    this._appendCloseIcon(), this._handleDelete(), this._handleTextChip(), this._handleClickOnChip();
  }
  dispose() {
    this._element = null, this._options = null, u.off(this._element, "click");
  }
  appendChip() {
    const { text: t, closeIcon: e, iconSVG: i } = this._options;
    return Wm({ text: t, closeIcon: e, iconSVG: i }, this._classes);
  }
  // Private
  _appendCloseIcon(t = this._element) {
    if (!(d.find(Tn, this._element).length > 0) && this._options.closeIcon) {
      const e = L("span");
      e.classList = this._classes.icon, e.setAttribute(Tl), e.innerHTML = this._options.iconSVG, t.insertAdjacentElement("beforeend", e);
    }
  }
  _handleClickOnChip() {
    u.on(this._element, "click", (t) => {
      const { textContent: e } = t.target, i = {};
      i.tag = e.trim(), u.trigger(jm, { event: t, obj: i });
    });
  }
  _handleDelete() {
    d.find(
      Tn,
      this._element
    ).length !== 0 && u.on(this._element, "click", Tn, () => {
      u.trigger(this._element, Ym), this._element.remove();
    });
  }
  _handleTextChip() {
    this._element.innerText === "" && (this._element.innerText = this._options.text);
  }
  _getConfig(t) {
    const e = {
      ...zm,
      ...p.getDataAttributes(this._element),
      ...t
    };
    return M(us, e, Um), e;
  }
  _getClasses(t) {
    const e = p.getDataClassAttributes(this._element);
    return t = {
      ...Xm,
      ...e,
      ...t
    }, M(us, t, Gm), t;
  }
  static getInstance(t) {
    return I.getData(t, Fm);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
const si = "chips", bi = `data-te-${si}`, Zr = `te.${si}`, qm = `${bi}-init`, ct = `${bi}-active`, Jr = `${bi}-initial`, Cl = `${bi}-placeholder`, Qm = `${bi}-input-wrapper`, Hn = "data-te-chip-init", Al = "data-te-chip-close", yl = "data-te-chip-text", Zm = `[${ct}]`, Vn = `[${Hn}]`, Jm = `${Vn}${Zm}`, Cn = `[${Al}]`, tg = `[${Qm}]`, eg = `[${yl}]`, ig = `[${Cl}]`, sg = "data-te-input-notch-leading-ref", ng = "data-te-input-notch-middle-ref", og = `[${sg}]`, rg = `[${ng}]`, Te = "data-te-input-state-active", An = "[data-te-input-notch-ref]", ag = "add.te.chips", lg = "arrowDown.te.chips", cg = "arrowLeft.te.chips", dg = "arrowRight.te.chips", hg = "arrowUp.te.chips", ta = "delete.te.chips", ea = "select.te.chips", ug = {
  inputID: "string",
  parentSelector: "string",
  initialValues: "array",
  editable: "boolean",
  labelText: "string"
}, pg = {
  inputID: kt("chips-input-"),
  parentSelector: "",
  initialValues: [{ tag: "init1" }, { tag: "init2" }],
  editable: !1,
  labelText: "Example label"
}, fg = {
  opacity: "opacity-0",
  inputWrapperPadding: "p-[5px]",
  transition: "transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)]",
  contentEditable: "outline-none !border-[3px] !border-solid !border-[#b2b3b4]",
  chipsInputWrapper: "relative flex items-center flex-wrap transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)]",
  chipsInput: "peer block min-h-[auto] w-[150px] rounded border-0 bg-transparent py-[0.32rem] px-3 leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-gray-200 dark:placeholder:text-gray-200 [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0",
  chipsLabel: "pointer-events-none absolute top-0 left-3 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-gray-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-gray-200 dark:peer-focus:text-gray-200",
  chipsNotchesWrapper: "group flex absolute left-0 top-0 w-full max-w-full h-full text-left pointer-events-none",
  chipsNotchesLeading: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none left-0 top-0 h-full w-2 border-r-0 rounded-l-[0.25rem] group-data-[te-input-focused]:border-r-0 group-data-[te-input-state-active]:border-r-0 border-gray-300 dark:border-gray-600 group-data-[te-input-focused]:shadow-[-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary",
  chipsNotchesMiddle: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow-0 shrink-0 basis-auto w-auto max-w-[calc(100%-1rem)] h-full border-r-0 border-l-0 group-data-[te-input-focused]:border-x-0 group-data-[te-input-state-active]:border-x-0 group-data-[te-input-focused]:border-t group-data-[te-input-state-active]:border-t group-data-[te-input-focused]:border-solid group-data-[te-input-state-active]:border-solid group-data-[te-input-focused]:border-t-transparent group-data-[te-input-state-active]:border-t-transparent border-gray-300 dark:border-gray-600 group-data-[te-input-focused]:shadow-[0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary",
  chipsNotchesTrailing: "pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow h-full border-l-0 rounded-r-[0.25rem] group-data-[te-input-focused]:border-l-0 group-data-[te-input-state-active]:border-l-0 border-gray-300 dark:border-gray-600 group-data-[te-input-focused]:shadow-[1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary"
}, _g = {
  opacity: "string",
  inputWrapperPadding: "string",
  transition: "string",
  contentEditable: "string",
  chipsInputWrapper: "string",
  chipsInput: "string",
  chipsLabel: "string",
  chipsNotchesWrapper: "string",
  chipsNotchesLeading: "string",
  chipsNotchesMiddle: "string",
  chipsNotchesTrailing: "string"
};
class Rg extends Xe {
  constructor(e, i = {}, n) {
    super(e, i);
    Tt(this, "_handleBlurInput", ({ target: e }) => {
      e.value.length > 0 && this._handleCreateChip(e, e.value), this.allChips.length > 0 ? (e.setAttribute(ct, ""), this.input.setAttribute(Te, ""), d.findOne(
        An,
        this.input.parentNode
      ).setAttribute(Te, ""), this.chipsInputWrapper.classList.add(
        ...this._classes.inputWrapperPadding.split(" ")
      )) : (e.removeAttribute(ct), this.input.removeAttribute(Te), d.findOne(
        An,
        this.input.parentNode
      ).removeAttribute(Te), this.chipsInputWrapper.classList.remove(
        ...this._classes.inputWrapperPadding.split(" ")
      )), this.allChips.forEach((i) => i.removeAttribute(ct));
    });
    this._element = e, this._label = null, this._labelWidth = 0, this._labelMarginLeft = 0, this._notchLeading = null, this._notchMiddle = null, this._element && I.setData(e, Zr, this), this._options = this._getConfig(i), this._classes = this._getClasses(n), this.numberClicks = 0, this.init();
  }
  // Getters
  static get NAME() {
    return si;
  }
  get activeChip() {
    return d.findOne(Jm, this._element);
  }
  get input() {
    return d.findOne("input", this._element);
  }
  get allChips() {
    return d.find(Vn, this._element);
  }
  get chipsInputWrapper() {
    return d.findOne(tg, this._element);
  }
  // Public
  init() {
    this._setChipsClass(), this._appendInputToElement(Cl), this._handleInitialValue(), this._handleInputText(), this._handleKeyboard(), this._handleChipsOnSelect(), this._handleEditable(), this._handleChipsFocus(), this._handleClicksOnChips(), this._getLabelData(), this._getLabelWidth(), this._getNotchData(), this._applyNotch();
  }
  dispose() {
    this._element = null, this._options = null;
  }
  // Private
  _getNotchData() {
    this._notchMiddle = d.findOne(
      rg,
      this._element
    ), this._notchLeading = d.findOne(
      og,
      this._element
    );
  }
  _getLabelData() {
    this._label = d.findOne("label", this._element);
  }
  _getLabelWidth() {
    this._labelWidth = this._label.clientWidth * 0.8 + 8;
  }
  _applyNotch() {
    this._notchMiddle.style.width = `${this._labelWidth}px`, this._notchLeading.style.width = `${this._labelMarginLeft + 9}px`, this._label !== null && (this._label.style.marginLeft = `${this._labelMarginLeft}px`);
  }
  _setChipsClass() {
    this._element.setAttribute(qm, "");
  }
  _handleDeleteEvents(e) {
    const [i] = this.allChips.slice(-1);
    if (this.activeChip === null)
      i.remove(), this._handleEvents(e, ta);
    else {
      const n = this.allChips.findIndex((a) => a === this.activeChip), o = this._handleActiveChipAfterRemove(n), r = [];
      if (this.activeChip === null)
        return;
      this.activeChip.remove(), this._handleEvents(e, ta), this.numberClicks = n, o.setAttribute(ct, ""), this.allChips.forEach((a) => {
        a.hasAttribute(ct) && (r.push(a), r.length > 1 && this.allChips.forEach((l) => l.remove()));
      });
    }
  }
  _handleUpEvents(e) {
    this.numberClicks += 1, this.numberClicks === this.allChips.length + 1 && (this.numberClicks = 0), this._handleRightKeyboardArrow(this.numberClicks), this._handleEvents(e, dg), this._handleEvents(e, hg);
  }
  _handleDownEvents(e) {
    this.numberClicks -= 1, this.numberClicks <= 0 && (this.numberClicks = this.allChips.length), this._handleLeftKeyboardArrow(this.numberClicks), this._handleEvents(e, cg), this._handleEvents(e, lg);
  }
  _keyboardEvents(e) {
    const { target: i, keyCode: n, ctrlKey: o } = e;
    i.value.length > 0 || this.allChips.length === 0 || (n === $p || n === Lp ? this._handleDeleteEvents(e) : n === De || n === it ? this._handleUpEvents(e) : n === xe || n === U ? this._handleDownEvents(e) : n === 65 && o && this._handleAddActiveClass());
  }
  _handleKeyboard() {
    u.on(
      this.input,
      "keydown",
      (e) => this._keyboardEvents(e)
    );
  }
  _handleEditable() {
    const { editable: e } = this._options;
    e && this.allChips.forEach((i) => {
      u.on(i, "dblclick", (n) => {
        const o = d.findOne(Cn, i);
        i.classList.add(...this._classes.contentEditable.split(" ")), i.contentEditable = !0, i.focus(), setTimeout(() => {
          p.addStyle(o, { display: "none" });
        }, 200), o.classList.add(...this._classes.opacity.split(" ")), n.target.textContent, u.trigger(i, ea, {
          event: n,
          allChips: this.allChips
        });
      }), u.on(document, "click", ({ target: n }) => {
        const o = d.findOne(Cn, i), r = d.findOne(eg, i), a = n === i, l = i && i.contains(n);
        !a && !l && (i.contentEditable = !1, i.classList.remove(...this._classes.contentEditable.split(" ")), r.textContent !== "" && setTimeout(() => {
          p.addStyle(o, { display: "block" }), o.classList.remove(...this._classes.opacity.split(" "));
        }, 160)), r.textContent === "" && (setTimeout(() => {
          i.classList.add(...this._classes.opacity.split(" "));
        }, 200), setTimeout(() => {
          i.remove();
        }, 300));
      });
    });
  }
  _handleRemoveActiveClass() {
    this.allChips.forEach((e) => e.removeAttribute(ct));
  }
  _handleAddActiveClass() {
    this.allChips.forEach((e) => e.setAttribute(ct, ""));
  }
  _handleRightKeyboardArrow(e) {
    this._handleRemoveActiveClass(), e === 0 && (e = 1), this._handleAddActiveClassWithKebyboard(e);
  }
  _handleLeftKeyboardArrow(e) {
    this._handleRemoveActiveClass(), this._handleAddActiveClassWithKebyboard(e);
  }
  _handleActiveChipAfterRemove(e) {
    const i = e === 0 ? 1 : e - 1;
    return this.allChips[i];
  }
  _handleClicksOnChips() {
    u.on(this._element, "click", () => {
      this.allChips.length === 0 && (this.chipsInputWrapper.classList.remove(
        ...this._classes.inputWrapperPadding.split(" ")
      ), this.input.removeAttribute(ct));
    });
  }
  _handleTextContent() {
    const e = [];
    return this.allChips.forEach((i) => e.push({ tag: i.textContent.trim() })), e;
  }
  _handleEvents(e, i) {
    const n = this._handleTextContent(), o = this.allChips.filter(
      (r) => r.hasAttribute(ct) && r
    );
    u.trigger(this._element, i, {
      event: e,
      allChips: this.allChips,
      arrOfObjects: n,
      active: o,
      activeObj: {
        tag: o.length <= 0 ? "" : o[0].textContent.trim()
      }
    });
  }
  _handleChipsFocus() {
    u.on(this._element, "click", ({ target: { attributes: e } }) => {
      const i = [...e];
      i.includes(Hn) || i.includes(Al) || i.includes(yl) || this.input.focus();
    });
  }
  _handleInitialValue() {
    if (this._appendInputToElement(Jr), this._element.hasAttribute(Jr)) {
      const { initialValues: e } = this._options;
      e.forEach(
        ({ tag: i }) => this._handleCreateChip(this.input, i)
      ), d.findOne(
        An,
        this.input.parentNode
      ).setAttribute(Te, ""), this.input.setAttribute(ct, ""), this.input.setAttribute(Te, "");
    }
    this.allChips.length > 0 && (this.chipsInputWrapper.classList.add(
      ...this._classes.inputWrapperPadding.split(" ")
    ), this.chipsInputWrapper.classList.add(
      ...this._classes.transition.split(" ")
    ));
  }
  _handleKeysInputToElement(e) {
    const { keyCode: i, target: n } = e;
    if (n.hasAttribute(Hn)) {
      const o = d.findOne(Cn, n);
      i === nt && (n.contentEditable = !1, n.classList.remove(...this._classes.contentEditable.split(" ")), n.textContent !== "" ? setTimeout(() => {
        p.addStyle(o, { display: "block" }), o.classList.remove(...this._classes.opacity.split(" "));
      }, 160) : n.textContent === "" && (setTimeout(() => {
        n.classList.add(...this._classes.opacity.split(" "));
      }, 200), setTimeout(() => {
        n.remove();
      }, 300)));
      return;
    }
    if (i === nt) {
      if (n.value === "")
        return;
      this._handleCreateChip(n, n.value), this._handleRemoveActiveClass(), this.numberClicks = this.allChips.length + 1, this._handleEvents(e, ag);
    }
    this.allChips.length > 0 ? (this.chipsInputWrapper.classList.add(
      ...this._classes.inputWrapperPadding.split(" ")
    ), this.chipsInputWrapper.classList.add(
      ...this._classes.transition.split(" ")
    )) : this.chipsInputWrapper.classList.remove(
      ...this._classes.inputWrapperPadding.split(" ")
    );
  }
  _handleInputText() {
    const e = d.findOne(
      ig,
      this._element
    );
    u.on(
      this._element,
      "keyup",
      e,
      (i) => this._handleKeysInputToElement(i)
    ), u.on(this.input, "blur", (i) => this._handleBlurInput(i));
  }
  _appendInputToElement(e) {
    if (!this._element.hasAttribute(e))
      return;
    const i = Vm(this._options, this._classes);
    this._element.insertAdjacentHTML("beforeend", i);
  }
  _handleCreateChip(e, i) {
    const n = L("div"), o = Xe.getInstance(n), r = new Xe(o, { text: i }, this._classes);
    this._options.parentSelector !== "" ? document.querySelector(this._options.parentSelector).insertAdjacentHTML("beforeend", r.appendChip()) : e.insertAdjacentHTML("beforebegin", r.appendChip()), e.value = "", d.find(Vn).forEach((a) => {
      let l = Xe.getInstance(a);
      return l || (l = new Xe(a, {}, this._classes)), l.init();
    }), this._handleEditable();
  }
  _handleChipsOnSelect() {
    this.allChips.forEach((e) => {
      u.on(this._element, "click", (i) => {
        u.trigger(e, ea, {
          event: i,
          allChips: this.allChips
        });
      });
    });
  }
  _handleAddActiveClassWithKebyboard(e) {
    let i;
    this.allChips[e - 1] === void 0 ? i = this.allChips[e - 2] : i = this.allChips[e - 1], i.setAttribute(ct);
  }
  _getConfig(e) {
    const i = {
      ...pg,
      ...p.getDataAttributes(this._element),
      ...e
    };
    return M(si, i, ug), i;
  }
  _getClasses(e) {
    const i = p.getDataClassAttributes(this._element);
    return e = {
      ...fg,
      ...i,
      ...e
    }, M(si, e, _g), e;
  }
  static getInstance(e) {
    return I.getData(e, Zr);
  }
  static getOrCreateInstance(e, i = {}) {
    return this.getInstance(e) || new this(e, typeof i == "object" ? i : null);
  }
}
var mg = function(t) {
  return gg(t) && !bg(t);
};
function gg(s) {
  return !!s && typeof s == "object";
}
function bg(s) {
  var t = Object.prototype.toString.call(s);
  return t === "[object RegExp]" || t === "[object Date]" || Tg(s);
}
var vg = typeof Symbol == "function" && Symbol.for, Eg = vg ? Symbol.for("react.element") : 60103;
function Tg(s) {
  return s.$$typeof === Eg;
}
function Cg(s) {
  return Array.isArray(s) ? [] : {};
}
function ci(s, t) {
  return t.clone !== !1 && t.isMergeableObject(s) ? Ne(Cg(s), s, t) : s;
}
function Ag(s, t, e) {
  return s.concat(t).map(function(i) {
    return ci(i, e);
  });
}
function yg(s, t) {
  if (!t.customMerge)
    return Ne;
  var e = t.customMerge(s);
  return typeof e == "function" ? e : Ne;
}
function wg(s) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(s).filter(function(t) {
    return s.propertyIsEnumerable(t);
  }) : [];
}
function ia(s) {
  return Object.keys(s).concat(wg(s));
}
function wl(s, t) {
  try {
    return t in s;
  } catch {
    return !1;
  }
}
function Og(s, t) {
  return wl(s, t) && !(Object.hasOwnProperty.call(s, t) && Object.propertyIsEnumerable.call(s, t));
}
function kg(s, t, e) {
  var i = {};
  return e.isMergeableObject(s) && ia(s).forEach(function(n) {
    i[n] = ci(s[n], e);
  }), ia(t).forEach(function(n) {
    Og(s, n) || (wl(s, n) && e.isMergeableObject(t[n]) ? i[n] = yg(n, e)(s[n], t[n], e) : i[n] = ci(t[n], e));
  }), i;
}
function Ne(s, t, e) {
  e = e || {}, e.arrayMerge = e.arrayMerge || Ag, e.isMergeableObject = e.isMergeableObject || mg, e.cloneUnlessOtherwiseSpecified = ci;
  var i = Array.isArray(t), n = Array.isArray(s), o = i === n;
  return o ? i ? e.arrayMerge(s, t, e) : kg(s, t, e) : ci(t, e);
}
Ne.all = function(t, e) {
  if (!Array.isArray(t))
    throw new Error("first argument should be an array");
  return t.reduce(function(i, n) {
    return Ne(i, n, e);
  }, {});
};
var Sg = Ne, Wn = Sg;
const sa = "chart", Gi = "te.chart", xg = "chart", na = (s, t, e) => {
  const i = (n, o, r) => {
    const a = n.slice();
    return o.forEach((l, c) => {
      typeof a[c] > "u" ? a[c] = r.cloneUnlessOtherwiseSpecified(
        l,
        r
      ) : r.isMergeableObject(l) ? a[c] = Wn(n[c], l, r) : n.indexOf(l) === -1 && a.push(l);
    }), a;
  };
  return Wn(e[t], s, {
    arrayMerge: i
  });
}, Dg = {
  darkTicksColor: "#fff",
  darkLabelColor: "#fff",
  darkGridLinesColor: "#555",
  darkmodeOff: "undefined",
  darkBgColor: "#262626",
  options: null
}, Ig = {
  darkTicksColor: "string",
  darkLabelColor: "string",
  darkGridLinesColor: "string",
  darkmodeOff: "(string|null)",
  darkBgColor: "string",
  options: "(object|null)"
};
class Ol {
  constructor(t, e, i = {}, n = {}) {
    this._waitForCharts(t, e, i, n);
  }
  async _getChartjs() {
    const {
      Chart: t,
      ArcElement: e,
      LineElement: i,
      BarElement: n,
      PointElement: o,
      BarController: r,
      BubbleController: a,
      DoughnutController: l,
      LineController: c,
      PieController: h,
      PolarAreaController: _,
      RadarController: f,
      ScatterController: g,
      CategoryScale: m,
      LinearScale: E,
      LogarithmicScale: C,
      RadialLinearScale: b,
      TimeScale: v,
      TimeSeriesScale: T,
      Decimation: A,
      Filler: w,
      Legend: y,
      Title: O,
      Tooltip: x,
      SubTitle: k
    } = await import("./chart.es.js").then((D) => D.b);
    return t.register(
      e,
      i,
      n,
      o,
      r,
      a,
      l,
      c,
      h,
      _,
      f,
      g,
      m,
      E,
      C,
      b,
      v,
      T,
      A,
      w,
      y,
      O,
      x,
      k
    ), t;
  }
  async _getChartDataLabels() {
    const { ChartDataLabels: t } = await import("./chartjs-plugin-datalabels.es.js");
    return t;
  }
  async _waitForCharts(t, e, i = {}, n = {}) {
    this._Chartjs = await this._getChartjs(), this._ChartDataLabels = await this._getChartDataLabels(), this._element = t, this._data = e, this._options = i, this._type = e.type, this._canvas = null, this._chart = null, this._darkOptions = this._getDarkConfig(n), this._darkModeClassContainer = document.querySelector("html"), this._prevConfig = null, this._observer = null, this._element && (I.setData(t, Gi, this), p.addClass(this._element, xg), this._chartConstructor()), this._darkOptions.darkmodeOff !== null && (this._handleMode(this.systemColorMode), this._observer = new MutationObserver(this._observerCallback.bind(this)), this._observer.observe(this._darkModeClassContainer, {
      attributes: !0
    }));
  }
  // Getters
  static get NAME() {
    return sa;
  }
  get systemColorMode() {
    return localStorage.theme || (this._darkModeClassContainer.classList.contains("dark") ? "dark" : "light");
  }
  // Public
  dispose() {
    this._observer.disconnect(), I.removeData(this._element, Gi), this._element = null;
  }
  update(t, e) {
    t && (this._data = { ...this._data, ...t }, this._chart.data = this._data), this._prevConfig = this._chart.options, this._options = { ...this._options, ...e }, this._chart.options = Wn(this._chart.options, this._options), this._chart.update();
  }
  // Private
  _getDarkConfig(t) {
    let e = {};
    const i = p.getDataAttributes(this._element);
    Object.keys(i).forEach(
      (c) => c.startsWith("dark") && (e[c] = i[c])
    ), e = {
      ...Dg,
      ...e
    };
    const n = {
      y: {
        ticks: {
          color: e.darkTicksColor
        },
        grid: {
          color: e.darkGridLinesColor
        }
      },
      x: {
        ticks: {
          color: e.darkTicksColor
        },
        grid: {
          color: e.darkGridLinesColor
        }
      }
    }, o = {
      r: {
        ticks: {
          color: e.darkTicksColor,
          backdropColor: e.darkBgColor
        },
        grid: {
          color: e.darkGridLinesColor
        },
        pointLabels: {
          color: e.darkTicksColor
        }
      }
    }, l = {
      scales: ["pie", "doughnut", "polarArea", "radar"].includes(this._type) ? ["polarArea", "radar"].includes(this._type) ? o : {} : n,
      plugins: {
        legend: {
          labels: {
            color: e.darkLabelColor
          }
        }
      }
    };
    return t = {
      ...e,
      options: {
        ...l
      },
      ...t
    }, M(sa, t, Ig), t;
  }
  _chartConstructor() {
    if (this._data) {
      this._createCanvas();
      const t = na(this._options, this._type, hs), e = [];
      t.dataLabelsPlugin && e.push(this._ChartDataLabels), this._chart = new this._Chartjs(this._canvas, {
        ...this._data,
        ...t,
        plugins: e
      });
    }
  }
  _createCanvas() {
    this._canvas || (this._element.nodeName === "CANVAS" ? this._canvas = this._element : (this._canvas = L("canvas"), this._element.appendChild(this._canvas)));
  }
  _handleMode(t) {
    t === "dark" ? (this._changeDatasetBorderColor(), this.update(null, this._darkOptions.options)) : (this._changeDatasetBorderColor(!1), this._prevConfig && this.update(null, this._prevConfig));
  }
  _observerCallback(t) {
    for (const e of t)
      e.type === "attributes" && this._handleMode(this.systemColorMode);
  }
  _changeDatasetBorderColor(t = !0) {
    [...this._data.data.datasets].forEach(
      (e) => ["pie", "doughnut", "polarArea"].includes(this._type) && (e.borderColor = t ? this._darkOptions.darkBgColor : "#fff")
    );
  }
  static jQueryInterface(t, e, i) {
    return this.each(function() {
      let n = I.getData(this, Gi);
      if (!(!n && /dispose/.test(t))) {
        if (!n) {
          const o = e ? na(e, i, hs) : hs[i];
          n = new Ol(this, {
            ...t,
            ...o
          });
        }
        if (typeof t == "string") {
          if (typeof n[t] > "u")
            throw new TypeError(`No method named "${t}"`);
          n[t](e, i);
        }
      }
    });
  }
  static getInstance(t) {
    return I.getData(t, Gi);
  }
  static getOrCreateInstance(t, e = {}) {
    return this.getInstance(t) || new this(t, typeof e == "object" ? e : null);
  }
}
export {
  xn as Alert,
  el as Animate,
  ba as Button,
  Yt as Carousel,
  Ol as Chart,
  Xe as Chip,
  Rg as ChipsInput,
  Ut as Collapse,
  Lg as Datepicker,
  wt as Dropdown,
  V as Input,
  Dn as Modal,
  ts as Offcanvas,
  za as Popover,
  _s as Ripple,
  $n as ScrollSpy,
  El as Select,
  qe as Sidenav,
  Ng as Stepper,
  qa as Tab,
  Mg as Timepicker,
  Ln as Toast,
  pi as Tooltip,
  Hm as initTE
};
//# sourceMappingURL=tw-elements.es.min.js.map
